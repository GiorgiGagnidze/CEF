// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "V8IntersectionObserver.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8Element.h"
#include "bindings/core/v8/V8IntersectionObserverEntry.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "core/frame/LocalDOMWindow.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8IntersectionObserver::wrapperTypeInfo = { gin::kEmbedderBlink, V8IntersectionObserver::domTemplate, V8IntersectionObserver::refObject, V8IntersectionObserver::derefObject, V8IntersectionObserver::trace, 0, 0, V8IntersectionObserver::preparePrototypeAndInterfaceObject, V8IntersectionObserver::installConditionallyEnabledProperties, "IntersectionObserver", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent, WrapperTypeInfo::GarbageCollectedObject };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in IntersectionObserver.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& IntersectionObserver::s_wrapperTypeInfo = V8IntersectionObserver::wrapperTypeInfo;

namespace IntersectionObserverV8Internal {

static void observeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "observe", "IntersectionObserver", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    IntersectionObserver* impl = V8IntersectionObserver::toImpl(info.Holder());
    Element* target;
    {
        target = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!target) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Element'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->observe(target, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void observeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    IntersectionObserverV8Internal::observeMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void unobserveMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "unobserve", "IntersectionObserver", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    IntersectionObserver* impl = V8IntersectionObserver::toImpl(info.Holder());
    Element* target;
    {
        target = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!target) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Element'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->unobserve(target, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void unobserveMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    IntersectionObserverV8Internal::unobserveMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void disconnectMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    IntersectionObserver* impl = V8IntersectionObserver::toImpl(info.Holder());
    impl->disconnect();
}

static void disconnectMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    IntersectionObserverV8Internal::disconnectMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void takeRecordsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    IntersectionObserver* impl = V8IntersectionObserver::toImpl(info.Holder());
    v8SetReturnValue(info, toV8(impl->takeRecords(), info.Holder(), info.GetIsolate()));
}

static void takeRecordsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    IntersectionObserverV8Internal::takeRecordsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

} // namespace IntersectionObserverV8Internal

const V8DOMConfiguration::MethodConfiguration V8IntersectionObserverMethods[] = {
    {"observe", IntersectionObserverV8Internal::observeMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"unobserve", IntersectionObserverV8Internal::unobserveMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"disconnect", IntersectionObserverV8Internal::disconnectMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"takeRecords", IntersectionObserverV8Internal::takeRecordsMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
};

void V8IntersectionObserver::constructorCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SCOPED_SAMPLING_STATE("blink", "DOMConstructor");
    if (!info.IsConstructCall()) {
        V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::constructorNotCallableAsFunction("IntersectionObserver"));
        return;
    }

    if (ConstructorMode::current(info.GetIsolate()) == ConstructorMode::WrapExistingObject) {
        v8SetReturnValue(info, info.Holder());
        return;
    }

    V8IntersectionObserver::constructorCustom(info);
}

static void installV8IntersectionObserverTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    if (!RuntimeEnabledFeatures::intersectionObserverEnabled())
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "IntersectionObserver", v8::Local<v8::FunctionTemplate>(), V8IntersectionObserver::internalFieldCount, 0, 0, 0, 0, 0, 0);
    else
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "IntersectionObserver", v8::Local<v8::FunctionTemplate>(), V8IntersectionObserver::internalFieldCount,
            0, 0,
            0, 0,
            V8IntersectionObserverMethods, WTF_ARRAY_LENGTH(V8IntersectionObserverMethods));
    functionTemplate->SetCallHandler(V8IntersectionObserver::constructorCallback);
    functionTemplate->SetLength(2);
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
}

v8::Local<v8::FunctionTemplate> V8IntersectionObserver::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8IntersectionObserverTemplate);
}

bool V8IntersectionObserver::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8IntersectionObserver::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

IntersectionObserver* V8IntersectionObserver::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : 0;
}

void V8IntersectionObserver::refObject(ScriptWrappable* scriptWrappable)
{
}

void V8IntersectionObserver::derefObject(ScriptWrappable* scriptWrappable)
{
}

} // namespace blink
