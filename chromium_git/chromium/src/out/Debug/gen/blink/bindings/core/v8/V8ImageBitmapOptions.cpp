// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "V8ImageBitmapOptions.h"

#include "bindings/core/v8/ExceptionState.h"

namespace blink {

void V8ImageBitmapOptions::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, ImageBitmapOptions& impl, ExceptionState& exceptionState)
{
    if (isUndefinedOrNull(v8Value)) {
        return;
    }
    if (!v8Value->IsObject()) {
        exceptionState.throwTypeError("cannot convert to dictionary.");
        return;
    }

    v8::TryCatch block(isolate);
    v8::Local<v8::Object> v8Object;
    if (!v8Call(v8Value->ToObject(isolate->GetCurrentContext()), v8Object, block)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    {
        v8::Local<v8::Value> imageOrientationValue;
        if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "imageOrientation")).ToLocal(&imageOrientationValue)) {
            exceptionState.rethrowV8Exception(block.Exception());
            return;
        }
        if (imageOrientationValue.IsEmpty() || imageOrientationValue->IsUndefined()) {
            // Do nothing.
        } else {
            V8StringResource<> imageOrientation = imageOrientationValue;
            if (!imageOrientation.prepare(exceptionState))
                return;
            const char* validValues[] = {
                "none",
                "flipY",
            };
            if (!isValidEnum(imageOrientation, validValues, WTF_ARRAY_LENGTH(validValues), "ImageOrientation", exceptionState))
                return;
            impl.setImageOrientation(imageOrientation);
        }
    }

    {
        v8::Local<v8::Value> premuiltiplyAlphaValue;
        if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "premuiltiplyAlpha")).ToLocal(&premuiltiplyAlphaValue)) {
            exceptionState.rethrowV8Exception(block.Exception());
            return;
        }
        if (premuiltiplyAlphaValue.IsEmpty() || premuiltiplyAlphaValue->IsUndefined()) {
            // Do nothing.
        } else {
            bool premuiltiplyAlpha = toBoolean(isolate, premuiltiplyAlphaValue, exceptionState);
            if (exceptionState.hadException())
                return;
            impl.setPremuiltiplyAlpha(premuiltiplyAlpha);
        }
    }

}

v8::Local<v8::Value> toV8(const ImageBitmapOptions& impl, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    v8::Local<v8::Object> v8Object = v8::Object::New(isolate);
    if (!toV8ImageBitmapOptions(impl, v8Object, creationContext, isolate))
        return v8::Local<v8::Value>();
    return v8Object;
}

bool toV8ImageBitmapOptions(const ImageBitmapOptions& impl, v8::Local<v8::Object> dictionary, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    if (impl.hasImageOrientation()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "imageOrientation"), v8String(isolate, impl.imageOrientation()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "imageOrientation"), v8String(isolate, String("none")))))
            return false;
    }

    if (impl.hasPremuiltiplyAlpha()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "premuiltiplyAlpha"), v8Boolean(impl.premuiltiplyAlpha(), isolate))))
            return false;
    }

    return true;
}

ImageBitmapOptions NativeValueTraits<ImageBitmapOptions>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    ImageBitmapOptions impl;
    V8ImageBitmapOptions::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

} // namespace blink
