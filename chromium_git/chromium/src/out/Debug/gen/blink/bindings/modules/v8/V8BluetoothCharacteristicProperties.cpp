// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "V8BluetoothCharacteristicProperties.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8BluetoothCharacteristicProperties::wrapperTypeInfo = { gin::kEmbedderBlink, V8BluetoothCharacteristicProperties::domTemplate, V8BluetoothCharacteristicProperties::refObject, V8BluetoothCharacteristicProperties::derefObject, V8BluetoothCharacteristicProperties::trace, 0, 0, V8BluetoothCharacteristicProperties::preparePrototypeAndInterfaceObject, V8BluetoothCharacteristicProperties::installConditionallyEnabledProperties, "BluetoothCharacteristicProperties", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent, WrapperTypeInfo::GarbageCollectedObject };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in BluetoothCharacteristicProperties.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& BluetoothCharacteristicProperties::s_wrapperTypeInfo = V8BluetoothCharacteristicProperties::wrapperTypeInfo;

namespace BluetoothCharacteristicPropertiesV8Internal {

static void broadcastAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    BluetoothCharacteristicProperties* impl = V8BluetoothCharacteristicProperties::toImpl(holder);
    v8SetReturnValueBool(info, impl->broadcast());
}

static void broadcastAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    BluetoothCharacteristicPropertiesV8Internal::broadcastAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void readAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    BluetoothCharacteristicProperties* impl = V8BluetoothCharacteristicProperties::toImpl(holder);
    v8SetReturnValueBool(info, impl->read());
}

static void readAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    BluetoothCharacteristicPropertiesV8Internal::readAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void writeWithoutResponseAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    BluetoothCharacteristicProperties* impl = V8BluetoothCharacteristicProperties::toImpl(holder);
    v8SetReturnValueBool(info, impl->writeWithoutResponse());
}

static void writeWithoutResponseAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    BluetoothCharacteristicPropertiesV8Internal::writeWithoutResponseAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void writeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    BluetoothCharacteristicProperties* impl = V8BluetoothCharacteristicProperties::toImpl(holder);
    v8SetReturnValueBool(info, impl->write());
}

static void writeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    BluetoothCharacteristicPropertiesV8Internal::writeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void notifyAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    BluetoothCharacteristicProperties* impl = V8BluetoothCharacteristicProperties::toImpl(holder);
    v8SetReturnValueBool(info, impl->notify());
}

static void notifyAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    BluetoothCharacteristicPropertiesV8Internal::notifyAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void indicateAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    BluetoothCharacteristicProperties* impl = V8BluetoothCharacteristicProperties::toImpl(holder);
    v8SetReturnValueBool(info, impl->indicate());
}

static void indicateAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    BluetoothCharacteristicPropertiesV8Internal::indicateAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void authenticatedSignedWritesAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    BluetoothCharacteristicProperties* impl = V8BluetoothCharacteristicProperties::toImpl(holder);
    v8SetReturnValueBool(info, impl->authenticatedSignedWrites());
}

static void authenticatedSignedWritesAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    BluetoothCharacteristicPropertiesV8Internal::authenticatedSignedWritesAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void reliableWriteAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    BluetoothCharacteristicProperties* impl = V8BluetoothCharacteristicProperties::toImpl(holder);
    v8SetReturnValueBool(info, impl->reliableWrite());
}

static void reliableWriteAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    BluetoothCharacteristicPropertiesV8Internal::reliableWriteAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void writableAuxiliariesAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    BluetoothCharacteristicProperties* impl = V8BluetoothCharacteristicProperties::toImpl(holder);
    v8SetReturnValueBool(info, impl->writableAuxiliaries());
}

static void writableAuxiliariesAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    BluetoothCharacteristicPropertiesV8Internal::writableAuxiliariesAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

} // namespace BluetoothCharacteristicPropertiesV8Internal

const V8DOMConfiguration::AccessorConfiguration V8BluetoothCharacteristicPropertiesAccessors[] = {
    {"broadcast", BluetoothCharacteristicPropertiesV8Internal::broadcastAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"read", BluetoothCharacteristicPropertiesV8Internal::readAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"writeWithoutResponse", BluetoothCharacteristicPropertiesV8Internal::writeWithoutResponseAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"write", BluetoothCharacteristicPropertiesV8Internal::writeAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"notify", BluetoothCharacteristicPropertiesV8Internal::notifyAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"indicate", BluetoothCharacteristicPropertiesV8Internal::indicateAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"authenticatedSignedWrites", BluetoothCharacteristicPropertiesV8Internal::authenticatedSignedWritesAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"reliableWrite", BluetoothCharacteristicPropertiesV8Internal::reliableWriteAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"writableAuxiliaries", BluetoothCharacteristicPropertiesV8Internal::writableAuxiliariesAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};

static void installV8BluetoothCharacteristicPropertiesTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    if (!RuntimeEnabledFeatures::webBluetoothEnabled())
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "BluetoothCharacteristicProperties", v8::Local<v8::FunctionTemplate>(), V8BluetoothCharacteristicProperties::internalFieldCount, 0, 0, 0, 0, 0, 0);
    else
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "BluetoothCharacteristicProperties", v8::Local<v8::FunctionTemplate>(), V8BluetoothCharacteristicProperties::internalFieldCount,
            0, 0,
            V8BluetoothCharacteristicPropertiesAccessors, WTF_ARRAY_LENGTH(V8BluetoothCharacteristicPropertiesAccessors),
            0, 0);
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
}

v8::Local<v8::FunctionTemplate> V8BluetoothCharacteristicProperties::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8BluetoothCharacteristicPropertiesTemplate);
}

bool V8BluetoothCharacteristicProperties::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8BluetoothCharacteristicProperties::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

BluetoothCharacteristicProperties* V8BluetoothCharacteristicProperties::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : 0;
}

void V8BluetoothCharacteristicProperties::refObject(ScriptWrappable* scriptWrappable)
{
}

void V8BluetoothCharacteristicProperties::derefObject(ScriptWrappable* scriptWrappable)
{
}

} // namespace blink
