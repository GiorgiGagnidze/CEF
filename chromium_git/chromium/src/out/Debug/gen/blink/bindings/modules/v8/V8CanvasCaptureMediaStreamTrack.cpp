// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "V8CanvasCaptureMediaStreamTrack.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8HTMLCanvasElement.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8CanvasCaptureMediaStreamTrack::wrapperTypeInfo = { gin::kEmbedderBlink, V8CanvasCaptureMediaStreamTrack::domTemplate, V8CanvasCaptureMediaStreamTrack::refObject, V8CanvasCaptureMediaStreamTrack::derefObject, V8CanvasCaptureMediaStreamTrack::trace, V8CanvasCaptureMediaStreamTrack::toActiveDOMObject, 0, V8CanvasCaptureMediaStreamTrack::preparePrototypeAndInterfaceObject, V8CanvasCaptureMediaStreamTrack::installConditionallyEnabledProperties, "CanvasCaptureMediaStreamTrack", &V8MediaStreamTrack::wrapperTypeInfo, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::InheritFromEventTarget, WrapperTypeInfo::Dependent, WrapperTypeInfo::GarbageCollectedObject };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in CanvasCaptureMediaStreamTrack.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& CanvasCaptureMediaStreamTrack::s_wrapperTypeInfo = V8CanvasCaptureMediaStreamTrack::wrapperTypeInfo;

namespace CanvasCaptureMediaStreamTrackV8Internal {

static void canvasAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    CanvasCaptureMediaStreamTrack* impl = V8CanvasCaptureMediaStreamTrack::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->canvas()), impl);
}

static void canvasAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    CanvasCaptureMediaStreamTrackV8Internal::canvasAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void requestFrameMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    CanvasCaptureMediaStreamTrack* impl = V8CanvasCaptureMediaStreamTrack::toImpl(info.Holder());
    impl->requestFrame();
}

static void requestFrameMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    CanvasCaptureMediaStreamTrackV8Internal::requestFrameMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

} // namespace CanvasCaptureMediaStreamTrackV8Internal

const V8DOMConfiguration::AccessorConfiguration V8CanvasCaptureMediaStreamTrackAccessors[] = {
    {"canvas", CanvasCaptureMediaStreamTrackV8Internal::canvasAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};

const V8DOMConfiguration::MethodConfiguration V8CanvasCaptureMediaStreamTrackMethods[] = {
    {"requestFrame", CanvasCaptureMediaStreamTrackV8Internal::requestFrameMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
};

static void installV8CanvasCaptureMediaStreamTrackTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    if (!RuntimeEnabledFeatures::mediaCaptureFromElementEnabled())
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "CanvasCaptureMediaStreamTrack", V8MediaStreamTrack::domTemplate(isolate), V8CanvasCaptureMediaStreamTrack::internalFieldCount, 0, 0, 0, 0, 0, 0);
    else
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "CanvasCaptureMediaStreamTrack", V8MediaStreamTrack::domTemplate(isolate), V8CanvasCaptureMediaStreamTrack::internalFieldCount,
            0, 0,
            V8CanvasCaptureMediaStreamTrackAccessors, WTF_ARRAY_LENGTH(V8CanvasCaptureMediaStreamTrackAccessors),
            V8CanvasCaptureMediaStreamTrackMethods, WTF_ARRAY_LENGTH(V8CanvasCaptureMediaStreamTrackMethods));
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
}

v8::Local<v8::FunctionTemplate> V8CanvasCaptureMediaStreamTrack::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8CanvasCaptureMediaStreamTrackTemplate);
}

bool V8CanvasCaptureMediaStreamTrack::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8CanvasCaptureMediaStreamTrack::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

CanvasCaptureMediaStreamTrack* V8CanvasCaptureMediaStreamTrack::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : 0;
}

ActiveDOMObject* V8CanvasCaptureMediaStreamTrack::toActiveDOMObject(v8::Local<v8::Object> wrapper)
{
    return toImpl(wrapper);
}

void V8CanvasCaptureMediaStreamTrack::refObject(ScriptWrappable* scriptWrappable)
{
}

void V8CanvasCaptureMediaStreamTrack::derefObject(ScriptWrappable* scriptWrappable)
{
}

} // namespace blink
