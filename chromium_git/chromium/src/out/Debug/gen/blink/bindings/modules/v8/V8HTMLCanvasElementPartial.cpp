// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "V8HTMLCanvasElementPartial.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/ScriptState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8HTMLCanvasElement.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/modules/v8/V8MediaStream.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "modules/mediacapturefromelement/HTMLCanvasElementCapture.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

namespace HTMLCanvasElementPartialV8Internal {

static void captureStreamMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "captureStream", "HTMLCanvasElement", info.Holder(), info.GetIsolate());
    HTMLCanvasElement* impl = V8HTMLCanvasElement::toImpl(info.Holder());
    double frameRate;
    {
        int numArgsPassed = info.Length();
        while (numArgsPassed > 0) {
            if (!info[numArgsPassed - 1]->IsUndefined())
                break;
            --numArgsPassed;
        }
        if (UNLIKELY(numArgsPassed <= 0)) {
            RawPtr<MediaStream> result = HTMLCanvasElementCapture::captureStream(*impl, exceptionState);
            if (exceptionState.hadException()) {
                exceptionState.throwIfNeeded();
                return;
            }
            v8SetReturnValueFast(info, WTF::getPtr(result.release()), impl);
            return;
        }
        frameRate = toRestrictedDouble(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    RawPtr<MediaStream> result = HTMLCanvasElementCapture::captureStream(*impl, frameRate, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueFast(info, WTF::getPtr(result.release()), impl);
}

static void captureStreamMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    HTMLCanvasElementPartialV8Internal::captureStreamMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

} // namespace HTMLCanvasElementPartialV8Internal

void V8HTMLCanvasElementPartial::installV8HTMLCanvasElementTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    V8HTMLCanvasElement::installV8HTMLCanvasElementTemplate(functionTemplate, isolate);

    v8::Local<v8::Signature> defaultSignature;
    if (!RuntimeEnabledFeatures::mediaCaptureFromElementEnabled())
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "HTMLCanvasElement", v8::Local<v8::FunctionTemplate>(), V8HTMLCanvasElement::internalFieldCount, 0, 0, 0, 0, 0, 0);
    else
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "HTMLCanvasElement", v8::Local<v8::FunctionTemplate>(), V8HTMLCanvasElement::internalFieldCount,
            0, 0,
            0, 0,
            0, 0);
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
    ExecutionContext* context = currentExecutionContext(isolate);
    ALLOW_UNUSED_LOCAL(context);
    if (RuntimeEnabledFeatures::mediaCaptureFromElementEnabled()) {
        const V8DOMConfiguration::MethodConfiguration captureStreamMethodConfiguration = {"captureStream", HTMLCanvasElementPartialV8Internal::captureStreamMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype};
        V8DOMConfiguration::installMethod(isolate, instanceTemplate, prototypeTemplate, functionTemplate, defaultSignature, captureStreamMethodConfiguration);
    }
}

void V8HTMLCanvasElementPartial::preparePrototypeAndInterfaceObject(v8::Local<v8::Context> context, v8::Local<v8::Object> prototypeObject, v8::Local<v8::Function> interfaceObject, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    V8HTMLCanvasElement::preparePrototypeAndInterfaceObject(context, prototypeObject, interfaceObject, interfaceTemplate);
}

void V8HTMLCanvasElementPartial::initialize()
{
    // Should be invoked from initModules.
    V8HTMLCanvasElement::updateWrapperTypeInfo(
        &V8HTMLCanvasElementPartial::installV8HTMLCanvasElementTemplate,
        &V8HTMLCanvasElementPartial::preparePrototypeAndInterfaceObject);
}

} // namespace blink
