// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "V8HTMLMediaElementPartial.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/ScriptPromise.h"
#include "bindings/core/v8/ScriptState.h"
#include "bindings/core/v8/V8AbstractEventListener.h"
#include "bindings/core/v8/V8ArrayBufferView.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8EventListenerList.h"
#include "bindings/core/v8/V8HTMLMediaElement.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/core/v8/V8Uint8Array.h"
#include "bindings/modules/v8/V8MediaKeys.h"
#include "bindings/modules/v8/V8MediaSession.h"
#include "bindings/modules/v8/V8MediaStream.h"
#include "core/HTMLNames.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "core/dom/FlexibleArrayBufferView.h"
#include "core/dom/custom/CustomElementProcessingStack.h"
#include "core/frame/UseCounter.h"
#include "modules/audio_output_devices/HTMLMediaElementAudioOutputDevice.h"
#include "modules/encryptedmedia/HTMLMediaElementEncryptedMedia.h"
#include "modules/mediacapturefromelement/HTMLMediaElementCapture.h"
#include "modules/mediasession/HTMLMediaElementMediaSession.h"
#include "modules/remoteplayback/HTMLMediaElementRemotePlayback.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

namespace HTMLMediaElementPartialV8Internal {

static void sinkIdAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLMediaElement* impl = V8HTMLMediaElement::toImpl(holder);
    v8SetReturnValueString(info, HTMLMediaElementAudioOutputDevice::sinkId(*impl), info.GetIsolate());
}

static void sinkIdAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    HTMLMediaElementPartialV8Internal::sinkIdAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void onwebkitkeyaddedAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLMediaElement* impl = V8HTMLMediaElement::toImpl(holder);
    EventListener* cppValue(HTMLMediaElementEncryptedMedia::onwebkitkeyadded(*impl));
    v8SetReturnValue(info, cppValue ? v8::Local<v8::Value>(V8AbstractEventListener::cast(cppValue)->getListenerObject(impl->executionContext())) : v8::Local<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onwebkitkeyaddedAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    HTMLMediaElementPartialV8Internal::onwebkitkeyaddedAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void onwebkitkeyaddedAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLMediaElement* impl = V8HTMLMediaElement::toImpl(holder);
    HTMLMediaElementEncryptedMedia::setOnwebkitkeyadded(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onwebkitkeyaddedAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    HTMLMediaElementPartialV8Internal::onwebkitkeyaddedAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void onwebkitkeyerrorAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLMediaElement* impl = V8HTMLMediaElement::toImpl(holder);
    EventListener* cppValue(HTMLMediaElementEncryptedMedia::onwebkitkeyerror(*impl));
    v8SetReturnValue(info, cppValue ? v8::Local<v8::Value>(V8AbstractEventListener::cast(cppValue)->getListenerObject(impl->executionContext())) : v8::Local<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onwebkitkeyerrorAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    HTMLMediaElementPartialV8Internal::onwebkitkeyerrorAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void onwebkitkeyerrorAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLMediaElement* impl = V8HTMLMediaElement::toImpl(holder);
    HTMLMediaElementEncryptedMedia::setOnwebkitkeyerror(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onwebkitkeyerrorAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    HTMLMediaElementPartialV8Internal::onwebkitkeyerrorAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void onwebkitkeymessageAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLMediaElement* impl = V8HTMLMediaElement::toImpl(holder);
    EventListener* cppValue(HTMLMediaElementEncryptedMedia::onwebkitkeymessage(*impl));
    v8SetReturnValue(info, cppValue ? v8::Local<v8::Value>(V8AbstractEventListener::cast(cppValue)->getListenerObject(impl->executionContext())) : v8::Local<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onwebkitkeymessageAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    HTMLMediaElementPartialV8Internal::onwebkitkeymessageAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void onwebkitkeymessageAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLMediaElement* impl = V8HTMLMediaElement::toImpl(holder);
    HTMLMediaElementEncryptedMedia::setOnwebkitkeymessage(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onwebkitkeymessageAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    HTMLMediaElementPartialV8Internal::onwebkitkeymessageAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void onwebkitneedkeyAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLMediaElement* impl = V8HTMLMediaElement::toImpl(holder);
    EventListener* cppValue(HTMLMediaElementEncryptedMedia::onwebkitneedkey(*impl));
    v8SetReturnValue(info, cppValue ? v8::Local<v8::Value>(V8AbstractEventListener::cast(cppValue)->getListenerObject(impl->executionContext())) : v8::Local<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onwebkitneedkeyAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    HTMLMediaElementPartialV8Internal::onwebkitneedkeyAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void onwebkitneedkeyAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLMediaElement* impl = V8HTMLMediaElement::toImpl(holder);
    HTMLMediaElementEncryptedMedia::setOnwebkitneedkey(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onwebkitneedkeyAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    HTMLMediaElementPartialV8Internal::onwebkitneedkeyAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void mediaKeysAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLMediaElement* impl = V8HTMLMediaElement::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(HTMLMediaElementEncryptedMedia::mediaKeys(*impl)), impl);
}

static void mediaKeysAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    HTMLMediaElementPartialV8Internal::mediaKeysAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void onencryptedAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLMediaElement* impl = V8HTMLMediaElement::toImpl(holder);
    EventListener* cppValue(HTMLMediaElementEncryptedMedia::onencrypted(*impl));
    v8SetReturnValue(info, cppValue ? v8::Local<v8::Value>(V8AbstractEventListener::cast(cppValue)->getListenerObject(impl->executionContext())) : v8::Local<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onencryptedAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    HTMLMediaElementPartialV8Internal::onencryptedAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void onencryptedAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLMediaElement* impl = V8HTMLMediaElement::toImpl(holder);
    HTMLMediaElementEncryptedMedia::setOnencrypted(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onencryptedAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    HTMLMediaElementPartialV8Internal::onencryptedAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void sessionAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLMediaElement* impl = V8HTMLMediaElement::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(HTMLMediaElementMediaSession::session(*impl)), impl);
}

static void sessionAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    HTMLMediaElementPartialV8Internal::sessionAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void sessionAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "session", "HTMLMediaElement", holder, info.GetIsolate());
    HTMLMediaElement* impl = V8HTMLMediaElement::toImpl(holder);
    MediaSession* cppValue = V8MediaSession::toImplWithTypeCheck(info.GetIsolate(), v8Value);
    if (!cppValue && !isUndefinedOrNull(v8Value)) {
        exceptionState.throwTypeError("The provided value is not of type 'MediaSession'.");
        exceptionState.throwIfNeeded();
        return;
    }
    HTMLMediaElementMediaSession::setSession(*impl, WTF::getPtr(cppValue), exceptionState);
    exceptionState.throwIfNeeded();
}

static void sessionAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    HTMLMediaElementPartialV8Internal::sessionAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void disableRemotePlaybackAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    HTMLMediaElement* impl = V8HTMLMediaElement::toImpl(holder);
    v8SetReturnValueBool(info, HTMLMediaElementRemotePlayback::fastHasAttribute(HTMLNames::disableremoteplaybackAttr, *impl));
}

static void disableRemotePlaybackAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    HTMLMediaElementPartialV8Internal::disableRemotePlaybackAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void disableRemotePlaybackAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "disableRemotePlayback", "HTMLMediaElement", holder, info.GetIsolate());
    HTMLMediaElement* impl = V8HTMLMediaElement::toImpl(holder);
    bool cppValue = toBoolean(info.GetIsolate(), v8Value, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    CustomElementProcessingStack::CallbackDeliveryScope deliveryScope;
    HTMLMediaElementRemotePlayback::setBooleanAttribute(HTMLNames::disableremoteplaybackAttr, *impl, cppValue);
}

static void disableRemotePlaybackAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    CustomElementProcessingStack::CallbackDeliveryScope deliveryScope;
    HTMLMediaElementPartialV8Internal::disableRemotePlaybackAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setSinkIdMethodPromise(const v8::FunctionCallbackInfo<v8::Value>& info, ExceptionState& exceptionState)
{
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    HTMLMediaElement* impl = V8HTMLMediaElement::toImpl(info.Holder());
    V8StringResource<> sinkId;
    {
        sinkId = info[0];
        if (!sinkId.prepare(exceptionState))
            return;
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = HTMLMediaElementAudioOutputDevice::setSinkId(scriptState, *impl, sinkId);
    v8SetReturnValue(info, result.v8Value());
}

static void setSinkIdMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setSinkId", "HTMLMediaElement", info.Holder(), info.GetIsolate());
    setSinkIdMethodPromise(info, exceptionState);
    if (exceptionState.hadException())
        v8SetReturnValue(info, exceptionState.reject(ScriptState::current(info.GetIsolate())).v8Value());
}

static void setSinkIdMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    HTMLMediaElementPartialV8Internal::setSinkIdMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void webkitGenerateKeyRequestMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "webkitGenerateKeyRequest", "HTMLMediaElement", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    HTMLMediaElement* impl = V8HTMLMediaElement::toImpl(info.Holder());
    V8StringResource<TreatNullAndUndefinedAsNullString> keySystem;
    DOMUint8Array* initData;
    {
        int numArgsPassed = info.Length();
        while (numArgsPassed > 0) {
            if (!info[numArgsPassed - 1]->IsUndefined())
                break;
            --numArgsPassed;
        }
        keySystem = info[0];
        if (!keySystem.prepare())
            return;
        if (UNLIKELY(numArgsPassed <= 1)) {
            HTMLMediaElementEncryptedMedia::webkitGenerateKeyRequest(*impl, keySystem, exceptionState);
            if (exceptionState.hadException()) {
                exceptionState.throwIfNeeded();
                return;
            }
            return;
        }
        initData = info[1]->IsUint8Array() ? V8Uint8Array::toImpl(v8::Local<v8::Uint8Array>::Cast(info[1])) : 0;
    }
    HTMLMediaElementEncryptedMedia::webkitGenerateKeyRequest(*impl, keySystem, initData, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void webkitGenerateKeyRequestMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    UseCounter::countDeprecationIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::PrefixedMediaGenerateKeyRequest);
    HTMLMediaElementPartialV8Internal::webkitGenerateKeyRequestMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void webkitAddKeyMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "webkitAddKey", "HTMLMediaElement", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    HTMLMediaElement* impl = V8HTMLMediaElement::toImpl(info.Holder());
    V8StringResource<TreatNullAndUndefinedAsNullString> keySystem;
    DOMUint8Array* key;
    DOMUint8Array* initData;
    V8StringResource<> sessionId;
    {
        int numArgsPassed = info.Length();
        while (numArgsPassed > 0) {
            if (!info[numArgsPassed - 1]->IsUndefined())
                break;
            --numArgsPassed;
        }
        keySystem = info[0];
        if (!keySystem.prepare())
            return;
        key = info[1]->IsUint8Array() ? V8Uint8Array::toImpl(v8::Local<v8::Uint8Array>::Cast(info[1])) : 0;
        if (UNLIKELY(numArgsPassed <= 2)) {
            HTMLMediaElementEncryptedMedia::webkitAddKey(*impl, keySystem, key, exceptionState);
            if (exceptionState.hadException()) {
                exceptionState.throwIfNeeded();
                return;
            }
            return;
        }
        initData = info[2]->IsUint8Array() ? V8Uint8Array::toImpl(v8::Local<v8::Uint8Array>::Cast(info[2])) : 0;
        if (!info[3]->IsUndefined()) {
            sessionId = info[3];
            if (!sessionId.prepare())
                return;
        } else {
            sessionId = nullptr;
        }
    }
    HTMLMediaElementEncryptedMedia::webkitAddKey(*impl, keySystem, key, initData, sessionId, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void webkitAddKeyMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    UseCounter::countDeprecationIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::PrefixedMediaAddKey);
    HTMLMediaElementPartialV8Internal::webkitAddKeyMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void webkitCancelKeyRequestMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "webkitCancelKeyRequest", "HTMLMediaElement", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    HTMLMediaElement* impl = V8HTMLMediaElement::toImpl(info.Holder());
    V8StringResource<TreatNullAndUndefinedAsNullString> keySystem;
    V8StringResource<> sessionId;
    {
        keySystem = info[0];
        if (!keySystem.prepare())
            return;
        if (!info[1]->IsUndefined()) {
            sessionId = info[1];
            if (!sessionId.prepare())
                return;
        } else {
            sessionId = nullptr;
        }
    }
    HTMLMediaElementEncryptedMedia::webkitCancelKeyRequest(*impl, keySystem, sessionId, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void webkitCancelKeyRequestMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    UseCounter::countDeprecationIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::PrefixedMediaCancelKeyRequest);
    HTMLMediaElementPartialV8Internal::webkitCancelKeyRequestMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setMediaKeysMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        v8SetReturnValue(info, ScriptPromise::rejectRaw(ScriptState::current(info.GetIsolate()), createMinimumArityTypeErrorForMethod(info.GetIsolate(), "setMediaKeys", "HTMLMediaElement", 1, info.Length())));
        return;
    }
    HTMLMediaElement* impl = V8HTMLMediaElement::toImpl(info.Holder());
    MediaKeys* mediaKeys;
    {
        mediaKeys = V8MediaKeys::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!mediaKeys && !isUndefinedOrNull(info[0])) {
            v8SetReturnValue(info, ScriptPromise::rejectRaw(ScriptState::current(info.GetIsolate()), V8ThrowException::createTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("setMediaKeys", "HTMLMediaElement", "parameter 1 is not of type 'MediaKeys'."))));
            return;
        }
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = HTMLMediaElementEncryptedMedia::setMediaKeys(scriptState, *impl, mediaKeys);
    v8SetReturnValue(info, result.v8Value());
}

static void setMediaKeysMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    HTMLMediaElementPartialV8Internal::setMediaKeysMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void captureStreamMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "captureStream", "HTMLMediaElement", info.Holder(), info.GetIsolate());
    HTMLMediaElement* impl = V8HTMLMediaElement::toImpl(info.Holder());
    RawPtr<MediaStream> result = HTMLMediaElementCapture::captureStream(*impl, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueFast(info, WTF::getPtr(result.release()), impl);
}

static void captureStreamMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    HTMLMediaElementPartialV8Internal::captureStreamMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

} // namespace HTMLMediaElementPartialV8Internal

const V8DOMConfiguration::AccessorConfiguration V8HTMLMediaElementAccessors[] = {
    {"disableRemotePlayback", HTMLMediaElementPartialV8Internal::disableRemotePlaybackAttributeGetterCallback, HTMLMediaElementPartialV8Internal::disableRemotePlaybackAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};

void V8HTMLMediaElementPartial::installV8HTMLMediaElementTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    V8HTMLMediaElement::installV8HTMLMediaElementTemplate(functionTemplate, isolate);

    v8::Local<v8::Signature> defaultSignature;
    if (!RuntimeEnabledFeatures::mediaEnabled())
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "HTMLMediaElement", v8::Local<v8::FunctionTemplate>(), V8HTMLMediaElement::internalFieldCount, 0, 0, 0, 0, 0, 0);
    else
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "HTMLMediaElement", v8::Local<v8::FunctionTemplate>(), V8HTMLMediaElement::internalFieldCount,
            0, 0,
            V8HTMLMediaElementAccessors, WTF_ARRAY_LENGTH(V8HTMLMediaElementAccessors),
            0, 0);
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
    ExecutionContext* context = currentExecutionContext(isolate);
    ALLOW_UNUSED_LOCAL(context);
    if (RuntimeEnabledFeatures::audioOutputDevicesEnabled()) {
        const V8DOMConfiguration::AccessorConfiguration accessorsinkIdConfiguration = \
        {"sinkId", HTMLMediaElementPartialV8Internal::sinkIdAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder};
        V8DOMConfiguration::installAccessor(isolate, instanceTemplate, prototypeTemplate, functionTemplate, defaultSignature, accessorsinkIdConfiguration);
    }
    if (RuntimeEnabledFeatures::encryptedMediaEnabled()) {
        const V8DOMConfiguration::AccessorConfiguration accessormediaKeysConfiguration = \
        {"mediaKeys", HTMLMediaElementPartialV8Internal::mediaKeysAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder};
        V8DOMConfiguration::installAccessor(isolate, instanceTemplate, prototypeTemplate, functionTemplate, defaultSignature, accessormediaKeysConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessoronencryptedConfiguration = \
        {"onencrypted", HTMLMediaElementPartialV8Internal::onencryptedAttributeGetterCallback, HTMLMediaElementPartialV8Internal::onencryptedAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder};
        V8DOMConfiguration::installAccessor(isolate, instanceTemplate, prototypeTemplate, functionTemplate, defaultSignature, accessoronencryptedConfiguration);
    }
    if (RuntimeEnabledFeatures::mediaSessionEnabled()) {
        const V8DOMConfiguration::AccessorConfiguration accessorsessionConfiguration = \
        {"session", HTMLMediaElementPartialV8Internal::sessionAttributeGetterCallback, HTMLMediaElementPartialV8Internal::sessionAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder};
        V8DOMConfiguration::installAccessor(isolate, instanceTemplate, prototypeTemplate, functionTemplate, defaultSignature, accessorsessionConfiguration);
    }
    if (RuntimeEnabledFeatures::prefixedEncryptedMediaEnabled()) {
        const V8DOMConfiguration::AccessorConfiguration accessoronwebkitkeyaddedConfiguration = \
        {"onwebkitkeyadded", HTMLMediaElementPartialV8Internal::onwebkitkeyaddedAttributeGetterCallback, HTMLMediaElementPartialV8Internal::onwebkitkeyaddedAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder};
        V8DOMConfiguration::installAccessor(isolate, instanceTemplate, prototypeTemplate, functionTemplate, defaultSignature, accessoronwebkitkeyaddedConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessoronwebkitkeyerrorConfiguration = \
        {"onwebkitkeyerror", HTMLMediaElementPartialV8Internal::onwebkitkeyerrorAttributeGetterCallback, HTMLMediaElementPartialV8Internal::onwebkitkeyerrorAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder};
        V8DOMConfiguration::installAccessor(isolate, instanceTemplate, prototypeTemplate, functionTemplate, defaultSignature, accessoronwebkitkeyerrorConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessoronwebkitkeymessageConfiguration = \
        {"onwebkitkeymessage", HTMLMediaElementPartialV8Internal::onwebkitkeymessageAttributeGetterCallback, HTMLMediaElementPartialV8Internal::onwebkitkeymessageAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder};
        V8DOMConfiguration::installAccessor(isolate, instanceTemplate, prototypeTemplate, functionTemplate, defaultSignature, accessoronwebkitkeymessageConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessoronwebkitneedkeyConfiguration = \
        {"onwebkitneedkey", HTMLMediaElementPartialV8Internal::onwebkitneedkeyAttributeGetterCallback, HTMLMediaElementPartialV8Internal::onwebkitneedkeyAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder};
        V8DOMConfiguration::installAccessor(isolate, instanceTemplate, prototypeTemplate, functionTemplate, defaultSignature, accessoronwebkitneedkeyConfiguration);
    }
    if (RuntimeEnabledFeatures::audioOutputDevicesEnabled()) {
        const V8DOMConfiguration::MethodConfiguration setSinkIdMethodConfiguration = {"setSinkId", HTMLMediaElementPartialV8Internal::setSinkIdMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype};
        V8DOMConfiguration::installMethod(isolate, instanceTemplate, prototypeTemplate, functionTemplate, defaultSignature, setSinkIdMethodConfiguration);
    }
    if (RuntimeEnabledFeatures::prefixedEncryptedMediaEnabled()) {
        const V8DOMConfiguration::MethodConfiguration webkitGenerateKeyRequestMethodConfiguration = {"webkitGenerateKeyRequest", HTMLMediaElementPartialV8Internal::webkitGenerateKeyRequestMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype};
        V8DOMConfiguration::installMethod(isolate, instanceTemplate, prototypeTemplate, functionTemplate, defaultSignature, webkitGenerateKeyRequestMethodConfiguration);
    }
    if (RuntimeEnabledFeatures::prefixedEncryptedMediaEnabled()) {
        const V8DOMConfiguration::MethodConfiguration webkitAddKeyMethodConfiguration = {"webkitAddKey", HTMLMediaElementPartialV8Internal::webkitAddKeyMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype};
        V8DOMConfiguration::installMethod(isolate, instanceTemplate, prototypeTemplate, functionTemplate, defaultSignature, webkitAddKeyMethodConfiguration);
    }
    if (RuntimeEnabledFeatures::prefixedEncryptedMediaEnabled()) {
        const V8DOMConfiguration::MethodConfiguration webkitCancelKeyRequestMethodConfiguration = {"webkitCancelKeyRequest", HTMLMediaElementPartialV8Internal::webkitCancelKeyRequestMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype};
        V8DOMConfiguration::installMethod(isolate, instanceTemplate, prototypeTemplate, functionTemplate, defaultSignature, webkitCancelKeyRequestMethodConfiguration);
    }
    if (RuntimeEnabledFeatures::encryptedMediaEnabled()) {
        const V8DOMConfiguration::MethodConfiguration setMediaKeysMethodConfiguration = {"setMediaKeys", HTMLMediaElementPartialV8Internal::setMediaKeysMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype};
        V8DOMConfiguration::installMethod(isolate, instanceTemplate, prototypeTemplate, functionTemplate, defaultSignature, setMediaKeysMethodConfiguration);
    }
    if (RuntimeEnabledFeatures::mediaCaptureFromElementEnabled()) {
        const V8DOMConfiguration::MethodConfiguration captureStreamMethodConfiguration = {"captureStream", HTMLMediaElementPartialV8Internal::captureStreamMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype};
        V8DOMConfiguration::installMethod(isolate, instanceTemplate, prototypeTemplate, functionTemplate, defaultSignature, captureStreamMethodConfiguration);
    }
}

void V8HTMLMediaElementPartial::preparePrototypeAndInterfaceObject(v8::Local<v8::Context> context, v8::Local<v8::Object> prototypeObject, v8::Local<v8::Function> interfaceObject, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    V8HTMLMediaElement::preparePrototypeAndInterfaceObject(context, prototypeObject, interfaceObject, interfaceTemplate);
}

void V8HTMLMediaElementPartial::initialize()
{
    // Should be invoked from initModules.
    V8HTMLMediaElement::updateWrapperTypeInfo(
        &V8HTMLMediaElementPartial::installV8HTMLMediaElementTemplate,
        &V8HTMLMediaElementPartial::preparePrototypeAndInterfaceObject);
}

} // namespace blink
