// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "V8IIRFilterNode.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8ArrayBufferView.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8Float32Array.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "core/dom/FlexibleArrayBufferView.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8IIRFilterNode::wrapperTypeInfo = { gin::kEmbedderBlink, V8IIRFilterNode::domTemplate, V8IIRFilterNode::refObject, V8IIRFilterNode::derefObject, V8IIRFilterNode::trace, 0, 0, V8IIRFilterNode::preparePrototypeAndInterfaceObject, V8IIRFilterNode::installConditionallyEnabledProperties, "IIRFilterNode", &V8AudioNode::wrapperTypeInfo, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::InheritFromEventTarget, WrapperTypeInfo::Independent, WrapperTypeInfo::GarbageCollectedObject };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in IIRFilterNode.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& IIRFilterNode::s_wrapperTypeInfo = V8IIRFilterNode::wrapperTypeInfo;

namespace IIRFilterNodeV8Internal {

static void getFrequencyResponseMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "getFrequencyResponse", "IIRFilterNode", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 3)) {
        setMinimumArityTypeError(exceptionState, 3, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    IIRFilterNode* impl = V8IIRFilterNode::toImpl(info.Holder());
    DOMFloat32Array* frequencyHz;
    DOMFloat32Array* magResponse;
    DOMFloat32Array* phaseResponse;
    {
        frequencyHz = info[0]->IsFloat32Array() ? V8Float32Array::toImpl(v8::Local<v8::Float32Array>::Cast(info[0])) : 0;
        if (!frequencyHz) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Float32Array'.");
            exceptionState.throwIfNeeded();
            return;
        }
        magResponse = info[1]->IsFloat32Array() ? V8Float32Array::toImpl(v8::Local<v8::Float32Array>::Cast(info[1])) : 0;
        if (!magResponse) {
            exceptionState.throwTypeError("parameter 2 is not of type 'Float32Array'.");
            exceptionState.throwIfNeeded();
            return;
        }
        phaseResponse = info[2]->IsFloat32Array() ? V8Float32Array::toImpl(v8::Local<v8::Float32Array>::Cast(info[2])) : 0;
        if (!phaseResponse) {
            exceptionState.throwTypeError("parameter 3 is not of type 'Float32Array'.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->getFrequencyResponse(frequencyHz, magResponse, phaseResponse, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void getFrequencyResponseMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    IIRFilterNodeV8Internal::getFrequencyResponseMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

} // namespace IIRFilterNodeV8Internal

const V8DOMConfiguration::MethodConfiguration V8IIRFilterNodeMethods[] = {
    {"getFrequencyResponse", IIRFilterNodeV8Internal::getFrequencyResponseMethodCallback, 0, 3, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
};

static void installV8IIRFilterNodeTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "IIRFilterNode", V8AudioNode::domTemplate(isolate), V8IIRFilterNode::internalFieldCount,
        0, 0,
        0, 0,
        V8IIRFilterNodeMethods, WTF_ARRAY_LENGTH(V8IIRFilterNodeMethods));
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
}

v8::Local<v8::FunctionTemplate> V8IIRFilterNode::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8IIRFilterNodeTemplate);
}

bool V8IIRFilterNode::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8IIRFilterNode::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

IIRFilterNode* V8IIRFilterNode::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : 0;
}

void V8IIRFilterNode::refObject(ScriptWrappable* scriptWrappable)
{
}

void V8IIRFilterNode::derefObject(ScriptWrappable* scriptWrappable)
{
}

} // namespace blink
