// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "V8SVGMarkerElement.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/core/v8/V8SVGAngle.h"
#include "bindings/core/v8/V8SVGAnimatedAngle.h"
#include "bindings/core/v8/V8SVGAnimatedEnumeration.h"
#include "bindings/core/v8/V8SVGAnimatedLength.h"
#include "bindings/core/v8/V8SVGAnimatedPreserveAspectRatio.h"
#include "bindings/core/v8/V8SVGAnimatedRect.h"
#include "core/animation/ElementAnimation.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "core/dom/ElementFullscreen.h"
#include "core/frame/UseCounter.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8SVGMarkerElement::wrapperTypeInfo = { gin::kEmbedderBlink, V8SVGMarkerElement::domTemplate, V8SVGMarkerElement::refObject, V8SVGMarkerElement::derefObject, V8SVGMarkerElement::trace, 0, 0, V8SVGMarkerElement::preparePrototypeAndInterfaceObject, V8SVGMarkerElement::installConditionallyEnabledProperties, "SVGMarkerElement", &V8SVGElement::wrapperTypeInfo, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::NodeClassId, WrapperTypeInfo::InheritFromEventTarget, WrapperTypeInfo::Dependent, WrapperTypeInfo::WillBeGarbageCollectedObject };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in SVGMarkerElement.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& SVGMarkerElement::s_wrapperTypeInfo = V8SVGMarkerElement::wrapperTypeInfo;

namespace SVGMarkerElementV8Internal {

static void refXAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SVGMarkerElement* impl = V8SVGMarkerElement::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->refX()), impl);
}

static void refXAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::SVG1DOMMarkerElement);
    SVGMarkerElementV8Internal::refXAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void refYAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SVGMarkerElement* impl = V8SVGMarkerElement::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->refY()), impl);
}

static void refYAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::SVG1DOMMarkerElement);
    SVGMarkerElementV8Internal::refYAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void markerUnitsAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SVGMarkerElement* impl = V8SVGMarkerElement::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->markerUnits()), impl);
}

static void markerUnitsAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::SVG1DOMMarkerElement);
    SVGMarkerElementV8Internal::markerUnitsAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void markerWidthAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SVGMarkerElement* impl = V8SVGMarkerElement::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->markerWidth()), impl);
}

static void markerWidthAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::SVG1DOMMarkerElement);
    SVGMarkerElementV8Internal::markerWidthAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void markerHeightAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SVGMarkerElement* impl = V8SVGMarkerElement::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->markerHeight()), impl);
}

static void markerHeightAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::SVG1DOMMarkerElement);
    SVGMarkerElementV8Internal::markerHeightAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void orientTypeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SVGMarkerElement* impl = V8SVGMarkerElement::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->orientType()), impl);
}

static void orientTypeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::SVG1DOMMarkerElement);
    SVGMarkerElementV8Internal::orientTypeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void orientAngleAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SVGMarkerElement* impl = V8SVGMarkerElement::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->orientAngle()), impl);
}

static void orientAngleAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::SVG1DOMMarkerElement);
    SVGMarkerElementV8Internal::orientAngleAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void viewBoxAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SVGMarkerElement* impl = V8SVGMarkerElement::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->viewBox()), impl);
}

static void viewBoxAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::SVG1DOMFitToViewBox);
    SVGMarkerElementV8Internal::viewBoxAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void preserveAspectRatioAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    SVGMarkerElement* impl = V8SVGMarkerElement::toImpl(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->preserveAspectRatio()), impl);
}

static void preserveAspectRatioAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::SVG1DOMFitToViewBox);
    SVGMarkerElementV8Internal::preserveAspectRatioAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setOrientToAutoMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGMarkerElement* impl = V8SVGMarkerElement::toImpl(info.Holder());
    impl->setOrientToAuto();
}

static void setOrientToAutoMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::SVG1DOMMarkerElement);
    SVGMarkerElementV8Internal::setOrientToAutoMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void setOrientToAngleMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "setOrientToAngle", "SVGMarkerElement", 1, info.Length()), info.GetIsolate());
        return;
    }
    SVGMarkerElement* impl = V8SVGMarkerElement::toImpl(info.Holder());
    SVGAngleTearOff* angle;
    {
        angle = V8SVGAngle::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!angle) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("setOrientToAngle", "SVGMarkerElement", "parameter 1 is not of type 'SVGAngle'."));
            return;
        }
    }
    impl->setOrientToAngle(angle);
}

static void setOrientToAngleMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), currentExecutionContext(info.GetIsolate()), UseCounter::SVG1DOMMarkerElement);
    SVGMarkerElementV8Internal::setOrientToAngleMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

} // namespace SVGMarkerElementV8Internal

const V8DOMConfiguration::AccessorConfiguration V8SVGMarkerElementAccessors[] = {
    {"refX", SVGMarkerElementV8Internal::refXAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"refY", SVGMarkerElementV8Internal::refYAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"markerUnits", SVGMarkerElementV8Internal::markerUnitsAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"markerWidth", SVGMarkerElementV8Internal::markerWidthAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"markerHeight", SVGMarkerElementV8Internal::markerHeightAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"orientType", SVGMarkerElementV8Internal::orientTypeAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"orientAngle", SVGMarkerElementV8Internal::orientAngleAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"viewBox", SVGMarkerElementV8Internal::viewBoxAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"preserveAspectRatio", SVGMarkerElementV8Internal::preserveAspectRatioAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};

const V8DOMConfiguration::MethodConfiguration V8SVGMarkerElementMethods[] = {
    {"setOrientToAuto", SVGMarkerElementV8Internal::setOrientToAutoMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"setOrientToAngle", SVGMarkerElementV8Internal::setOrientToAngleMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
};

static void installV8SVGMarkerElementTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "SVGMarkerElement", V8SVGElement::domTemplate(isolate), V8SVGMarkerElement::internalFieldCount,
        0, 0,
        V8SVGMarkerElementAccessors, WTF_ARRAY_LENGTH(V8SVGMarkerElementAccessors),
        V8SVGMarkerElementMethods, WTF_ARRAY_LENGTH(V8SVGMarkerElementMethods));
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
    const V8DOMConfiguration::ConstantConfiguration V8SVGMarkerElementConstants[] = {
        {"SVG_MARKERUNITS_UNKNOWN", 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"SVG_MARKERUNITS_USERSPACEONUSE", 1, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"SVG_MARKERUNITS_STROKEWIDTH", 2, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"SVG_MARKER_ORIENT_UNKNOWN", 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"SVG_MARKER_ORIENT_AUTO", 1, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"SVG_MARKER_ORIENT_ANGLE", 2, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
    };
    V8DOMConfiguration::installConstants(isolate, functionTemplate, prototypeTemplate, V8SVGMarkerElementConstants, WTF_ARRAY_LENGTH(V8SVGMarkerElementConstants));
    static_assert(0 == SVGMarkerElement::SVG_MARKERUNITS_UNKNOWN, "the value of SVGMarkerElement_SVG_MARKERUNITS_UNKNOWN does not match with implementation");
    static_assert(1 == SVGMarkerElement::SVG_MARKERUNITS_USERSPACEONUSE, "the value of SVGMarkerElement_SVG_MARKERUNITS_USERSPACEONUSE does not match with implementation");
    static_assert(2 == SVGMarkerElement::SVG_MARKERUNITS_STROKEWIDTH, "the value of SVGMarkerElement_SVG_MARKERUNITS_STROKEWIDTH does not match with implementation");
    static_assert(0 == SVGMarkerElement::SVG_MARKER_ORIENT_UNKNOWN, "the value of SVGMarkerElement_SVG_MARKER_ORIENT_UNKNOWN does not match with implementation");
    static_assert(1 == SVGMarkerElement::SVG_MARKER_ORIENT_AUTO, "the value of SVGMarkerElement_SVG_MARKER_ORIENT_AUTO does not match with implementation");
    static_assert(2 == SVGMarkerElement::SVG_MARKER_ORIENT_ANGLE, "the value of SVGMarkerElement_SVG_MARKER_ORIENT_ANGLE does not match with implementation");
}

v8::Local<v8::FunctionTemplate> V8SVGMarkerElement::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8SVGMarkerElementTemplate);
}

bool V8SVGMarkerElement::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8SVGMarkerElement::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

SVGMarkerElement* V8SVGMarkerElement::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : 0;
}

void V8SVGMarkerElement::refObject(ScriptWrappable* scriptWrappable)
{
#if !ENABLE(OILPAN)
    scriptWrappable->toImpl<SVGMarkerElement>()->ref();
#endif
}

void V8SVGMarkerElement::derefObject(ScriptWrappable* scriptWrappable)
{
#if !ENABLE(OILPAN)
    scriptWrappable->toImpl<SVGMarkerElement>()->deref();
#endif
}

} // namespace blink
