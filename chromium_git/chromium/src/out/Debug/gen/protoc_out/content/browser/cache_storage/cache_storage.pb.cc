// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cache_storage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cache_storage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace content {

void protobuf_ShutdownFile_cache_5fstorage_2eproto() {
  delete CacheStorageIndex::default_instance_;
  delete CacheStorageIndex_Cache::default_instance_;
  delete CacheHeaderMap::default_instance_;
  delete CacheRequest::default_instance_;
  delete CacheResponse::default_instance_;
  delete CacheMetadata::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_cache_5fstorage_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_cache_5fstorage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  CacheStorageIndex::default_instance_ = new CacheStorageIndex();
  CacheStorageIndex_Cache::default_instance_ = new CacheStorageIndex_Cache();
  CacheHeaderMap::default_instance_ = new CacheHeaderMap();
  CacheRequest::default_instance_ = new CacheRequest();
  CacheResponse::default_instance_ = new CacheResponse();
  CacheMetadata::default_instance_ = new CacheMetadata();
  CacheStorageIndex::default_instance_->InitAsDefaultInstance();
  CacheStorageIndex_Cache::default_instance_->InitAsDefaultInstance();
  CacheHeaderMap::default_instance_->InitAsDefaultInstance();
  CacheRequest::default_instance_->InitAsDefaultInstance();
  CacheResponse::default_instance_->InitAsDefaultInstance();
  CacheMetadata::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cache_5fstorage_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_cache_5fstorage_2eproto_once_);
void protobuf_AddDesc_cache_5fstorage_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_cache_5fstorage_2eproto_once_,
                 &protobuf_AddDesc_cache_5fstorage_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cache_5fstorage_2eproto {
  StaticDescriptorInitializer_cache_5fstorage_2eproto() {
    protobuf_AddDesc_cache_5fstorage_2eproto();
  }
} static_descriptor_initializer_cache_5fstorage_2eproto_;
#endif

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CacheStorageIndex_Cache::kNameFieldNumber;
const int CacheStorageIndex_Cache::kCacheDirFieldNumber;
#endif  // !_MSC_VER

CacheStorageIndex_Cache::CacheStorageIndex_Cache()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CacheStorageIndex_Cache::InitAsDefaultInstance() {
}

CacheStorageIndex_Cache::CacheStorageIndex_Cache(const CacheStorageIndex_Cache& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CacheStorageIndex_Cache::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  cache_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CacheStorageIndex_Cache::~CacheStorageIndex_Cache() {
  SharedDtor();
}

void CacheStorageIndex_Cache::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (cache_dir_ != &::google::protobuf::internal::GetEmptyString()) {
    delete cache_dir_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CacheStorageIndex_Cache::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CacheStorageIndex_Cache& CacheStorageIndex_Cache::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_cache_5fstorage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_cache_5fstorage_2eproto();
#endif
  return *default_instance_;
}

CacheStorageIndex_Cache* CacheStorageIndex_Cache::default_instance_ = NULL;

CacheStorageIndex_Cache* CacheStorageIndex_Cache::New() const {
  return new CacheStorageIndex_Cache;
}

void CacheStorageIndex_Cache::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
    if (has_cache_dir()) {
      if (cache_dir_ != &::google::protobuf::internal::GetEmptyString()) {
        cache_dir_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CacheStorageIndex_Cache::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cache_dir;
        break;
      }

      // optional string cache_dir = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cache_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cache_dir()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CacheStorageIndex_Cache::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string cache_dir = 2;
  if (has_cache_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->cache_dir(), output);
  }

}

int CacheStorageIndex_Cache::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string cache_dir = 2;
    if (has_cache_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cache_dir());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CacheStorageIndex_Cache::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CacheStorageIndex_Cache*>(&from));
}

void CacheStorageIndex_Cache::MergeFrom(const CacheStorageIndex_Cache& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_cache_dir()) {
      set_cache_dir(from.cache_dir());
    }
  }
}

void CacheStorageIndex_Cache::CopyFrom(const CacheStorageIndex_Cache& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheStorageIndex_Cache::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CacheStorageIndex_Cache::Swap(CacheStorageIndex_Cache* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(cache_dir_, other->cache_dir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CacheStorageIndex_Cache::GetTypeName() const {
  return "content.CacheStorageIndex.Cache";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CacheStorageIndex::kCacheFieldNumber;
const int CacheStorageIndex::kOriginFieldNumber;
#endif  // !_MSC_VER

CacheStorageIndex::CacheStorageIndex()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CacheStorageIndex::InitAsDefaultInstance() {
}

CacheStorageIndex::CacheStorageIndex(const CacheStorageIndex& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CacheStorageIndex::SharedCtor() {
  _cached_size_ = 0;
  origin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CacheStorageIndex::~CacheStorageIndex() {
  SharedDtor();
}

void CacheStorageIndex::SharedDtor() {
  if (origin_ != &::google::protobuf::internal::GetEmptyString()) {
    delete origin_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CacheStorageIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CacheStorageIndex& CacheStorageIndex::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_cache_5fstorage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_cache_5fstorage_2eproto();
#endif
  return *default_instance_;
}

CacheStorageIndex* CacheStorageIndex::default_instance_ = NULL;

CacheStorageIndex* CacheStorageIndex::New() const {
  return new CacheStorageIndex;
}

void CacheStorageIndex::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_origin()) {
      if (origin_ != &::google::protobuf::internal::GetEmptyString()) {
        origin_->clear();
      }
    }
  }
  cache_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CacheStorageIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .content.CacheStorageIndex.Cache cache = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cache:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cache()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cache;
        if (input->ExpectTag(18)) goto parse_origin;
        break;
      }

      // optional string origin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_origin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_origin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CacheStorageIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .content.CacheStorageIndex.Cache cache = 1;
  for (int i = 0; i < this->cache_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->cache(i), output);
  }

  // optional string origin = 2;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->origin(), output);
  }

}

int CacheStorageIndex::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string origin = 2;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->origin());
    }

  }
  // repeated .content.CacheStorageIndex.Cache cache = 1;
  total_size += 1 * this->cache_size();
  for (int i = 0; i < this->cache_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cache(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CacheStorageIndex::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CacheStorageIndex*>(&from));
}

void CacheStorageIndex::MergeFrom(const CacheStorageIndex& from) {
  GOOGLE_CHECK_NE(&from, this);
  cache_.MergeFrom(from.cache_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_origin()) {
      set_origin(from.origin());
    }
  }
}

void CacheStorageIndex::CopyFrom(const CacheStorageIndex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheStorageIndex::IsInitialized() const {

  for (int i = 0; i < cache_size(); i++) {
    if (!this->cache(i).IsInitialized()) return false;
  }
  return true;
}

void CacheStorageIndex::Swap(CacheStorageIndex* other) {
  if (other != this) {
    cache_.Swap(&other->cache_);
    std::swap(origin_, other->origin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CacheStorageIndex::GetTypeName() const {
  return "content.CacheStorageIndex";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CacheHeaderMap::kNameFieldNumber;
const int CacheHeaderMap::kValueFieldNumber;
#endif  // !_MSC_VER

CacheHeaderMap::CacheHeaderMap()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CacheHeaderMap::InitAsDefaultInstance() {
}

CacheHeaderMap::CacheHeaderMap(const CacheHeaderMap& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CacheHeaderMap::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CacheHeaderMap::~CacheHeaderMap() {
  SharedDtor();
}

void CacheHeaderMap::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyString()) {
    delete value_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CacheHeaderMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CacheHeaderMap& CacheHeaderMap::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_cache_5fstorage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_cache_5fstorage_2eproto();
#endif
  return *default_instance_;
}

CacheHeaderMap* CacheHeaderMap::default_instance_ = NULL;

CacheHeaderMap* CacheHeaderMap::New() const {
  return new CacheHeaderMap;
}

void CacheHeaderMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyString()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CacheHeaderMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CacheHeaderMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

}

int CacheHeaderMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CacheHeaderMap::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CacheHeaderMap*>(&from));
}

void CacheHeaderMap::MergeFrom(const CacheHeaderMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
}

void CacheHeaderMap::CopyFrom(const CacheHeaderMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheHeaderMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CacheHeaderMap::Swap(CacheHeaderMap* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CacheHeaderMap::GetTypeName() const {
  return "content.CacheHeaderMap";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CacheRequest::kMethodFieldNumber;
const int CacheRequest::kHeadersFieldNumber;
#endif  // !_MSC_VER

CacheRequest::CacheRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CacheRequest::InitAsDefaultInstance() {
}

CacheRequest::CacheRequest(const CacheRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CacheRequest::SharedCtor() {
  _cached_size_ = 0;
  method_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CacheRequest::~CacheRequest() {
  SharedDtor();
}

void CacheRequest::SharedDtor() {
  if (method_ != &::google::protobuf::internal::GetEmptyString()) {
    delete method_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CacheRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CacheRequest& CacheRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_cache_5fstorage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_cache_5fstorage_2eproto();
#endif
  return *default_instance_;
}

CacheRequest* CacheRequest::default_instance_ = NULL;

CacheRequest* CacheRequest::New() const {
  return new CacheRequest;
}

void CacheRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_method()) {
      if (method_ != &::google::protobuf::internal::GetEmptyString()) {
        method_->clear();
      }
    }
  }
  headers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CacheRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string method = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_headers;
        break;
      }

      // repeated .content.CacheHeaderMap headers = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_headers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_headers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CacheRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string method = 1;
  if (has_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->method(), output);
  }

  // repeated .content.CacheHeaderMap headers = 2;
  for (int i = 0; i < this->headers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->headers(i), output);
  }

}

int CacheRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string method = 1;
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method());
    }

  }
  // repeated .content.CacheHeaderMap headers = 2;
  total_size += 1 * this->headers_size();
  for (int i = 0; i < this->headers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->headers(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CacheRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CacheRequest*>(&from));
}

void CacheRequest::MergeFrom(const CacheRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  headers_.MergeFrom(from.headers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_method()) {
      set_method(from.method());
    }
  }
}

void CacheRequest::CopyFrom(const CacheRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < headers_size(); i++) {
    if (!this->headers(i).IsInitialized()) return false;
  }
  return true;
}

void CacheRequest::Swap(CacheRequest* other) {
  if (other != this) {
    std::swap(method_, other->method_);
    headers_.Swap(&other->headers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CacheRequest::GetTypeName() const {
  return "content.CacheRequest";
}


// ===================================================================

bool CacheResponse_ResponseType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CacheResponse_ResponseType CacheResponse::BASIC_TYPE;
const CacheResponse_ResponseType CacheResponse::CORS_TYPE;
const CacheResponse_ResponseType CacheResponse::DEFAULT_TYPE;
const CacheResponse_ResponseType CacheResponse::ERROR_TYPE;
const CacheResponse_ResponseType CacheResponse::OPAQUE_TYPE;
const CacheResponse_ResponseType CacheResponse::OPAQUE_REDIRECT_TYPE;
const CacheResponse_ResponseType CacheResponse::ResponseType_MIN;
const CacheResponse_ResponseType CacheResponse::ResponseType_MAX;
const int CacheResponse::ResponseType_ARRAYSIZE;
#endif  // _MSC_VER
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CacheResponse::kStatusCodeFieldNumber;
const int CacheResponse::kStatusTextFieldNumber;
const int CacheResponse::kResponseTypeFieldNumber;
const int CacheResponse::kHeadersFieldNumber;
const int CacheResponse::kUrlFieldNumber;
#endif  // !_MSC_VER

CacheResponse::CacheResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CacheResponse::InitAsDefaultInstance() {
}

CacheResponse::CacheResponse(const CacheResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CacheResponse::SharedCtor() {
  _cached_size_ = 0;
  status_code_ = 0;
  status_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  response_type_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CacheResponse::~CacheResponse() {
  SharedDtor();
}

void CacheResponse::SharedDtor() {
  if (status_text_ != &::google::protobuf::internal::GetEmptyString()) {
    delete status_text_;
  }
  if (url_ != &::google::protobuf::internal::GetEmptyString()) {
    delete url_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CacheResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CacheResponse& CacheResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_cache_5fstorage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_cache_5fstorage_2eproto();
#endif
  return *default_instance_;
}

CacheResponse* CacheResponse::default_instance_ = NULL;

CacheResponse* CacheResponse::New() const {
  return new CacheResponse;
}

void CacheResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_code_ = 0;
    if (has_status_text()) {
      if (status_text_ != &::google::protobuf::internal::GetEmptyString()) {
        status_text_->clear();
      }
    }
    response_type_ = 0;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyString()) {
        url_->clear();
      }
    }
  }
  headers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CacheResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_code_)));
          set_has_status_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_status_text;
        break;
      }

      // required string status_text = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_response_type;
        break;
      }

      // required .content.CacheResponse.ResponseType response_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_response_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::content::CacheResponse_ResponseType_IsValid(value)) {
            set_response_type(static_cast< ::content::CacheResponse_ResponseType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_headers;
        break;
      }

      // repeated .content.CacheHeaderMap headers = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_headers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_headers;
        if (input->ExpectTag(42)) goto parse_url;
        break;
      }

      // optional string url = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CacheResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 status_code = 1;
  if (has_status_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status_code(), output);
  }

  // required string status_text = 2;
  if (has_status_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->status_text(), output);
  }

  // required .content.CacheResponse.ResponseType response_type = 3;
  if (has_response_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->response_type(), output);
  }

  // repeated .content.CacheHeaderMap headers = 4;
  for (int i = 0; i < this->headers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->headers(i), output);
  }

  // optional string url = 5;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->url(), output);
  }

}

int CacheResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 status_code = 1;
    if (has_status_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status_code());
    }

    // required string status_text = 2;
    if (has_status_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status_text());
    }

    // required .content.CacheResponse.ResponseType response_type = 3;
    if (has_response_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->response_type());
    }

    // optional string url = 5;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  // repeated .content.CacheHeaderMap headers = 4;
  total_size += 1 * this->headers_size();
  for (int i = 0; i < this->headers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->headers(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CacheResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CacheResponse*>(&from));
}

void CacheResponse::MergeFrom(const CacheResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  headers_.MergeFrom(from.headers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status_code()) {
      set_status_code(from.status_code());
    }
    if (from.has_status_text()) {
      set_status_text(from.status_text());
    }
    if (from.has_response_type()) {
      set_response_type(from.response_type());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
}

void CacheResponse::CopyFrom(const CacheResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < headers_size(); i++) {
    if (!this->headers(i).IsInitialized()) return false;
  }
  return true;
}

void CacheResponse::Swap(CacheResponse* other) {
  if (other != this) {
    std::swap(status_code_, other->status_code_);
    std::swap(status_text_, other->status_text_);
    std::swap(response_type_, other->response_type_);
    headers_.Swap(&other->headers_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CacheResponse::GetTypeName() const {
  return "content.CacheResponse";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CacheMetadata::kRequestFieldNumber;
const int CacheMetadata::kResponseFieldNumber;
#endif  // !_MSC_VER

CacheMetadata::CacheMetadata()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CacheMetadata::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  request_ = const_cast< ::content::CacheRequest*>(
      ::content::CacheRequest::internal_default_instance());
#else
  request_ = const_cast< ::content::CacheRequest*>(&::content::CacheRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  response_ = const_cast< ::content::CacheResponse*>(
      ::content::CacheResponse::internal_default_instance());
#else
  response_ = const_cast< ::content::CacheResponse*>(&::content::CacheResponse::default_instance());
#endif
}

CacheMetadata::CacheMetadata(const CacheMetadata& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CacheMetadata::SharedCtor() {
  _cached_size_ = 0;
  request_ = NULL;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CacheMetadata::~CacheMetadata() {
  SharedDtor();
}

void CacheMetadata::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete request_;
    delete response_;
  }
}

void CacheMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CacheMetadata& CacheMetadata::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_cache_5fstorage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_cache_5fstorage_2eproto();
#endif
  return *default_instance_;
}

CacheMetadata* CacheMetadata::default_instance_ = NULL;

CacheMetadata* CacheMetadata::New() const {
  return new CacheMetadata;
}

void CacheMetadata::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request()) {
      if (request_ != NULL) request_->::content::CacheRequest::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::content::CacheResponse::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CacheMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .content.CacheRequest request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // required .content.CacheResponse response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CacheMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .content.CacheRequest request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->request(), output);
  }

  // required .content.CacheResponse response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->response(), output);
  }

}

int CacheMetadata::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .content.CacheRequest request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // required .content.CacheResponse response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CacheMetadata::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CacheMetadata*>(&from));
}

void CacheMetadata::MergeFrom(const CacheMetadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::content::CacheRequest::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::content::CacheResponse::MergeFrom(from.response());
    }
  }
}

void CacheMetadata::CopyFrom(const CacheMetadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheMetadata::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_request()) {
    if (!this->request().IsInitialized()) return false;
  }
  if (has_response()) {
    if (!this->response().IsInitialized()) return false;
  }
  return true;
}

void CacheMetadata::Swap(CacheMetadata* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CacheMetadata::GetTypeName() const {
  return "content.CacheMetadata";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace content

// @@protoc_insertion_point(global_scope)
