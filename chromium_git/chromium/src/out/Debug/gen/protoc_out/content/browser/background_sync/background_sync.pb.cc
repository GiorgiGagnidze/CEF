// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: background_sync.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "background_sync.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace content {

void protobuf_ShutdownFile_background_5fsync_2eproto() {
  delete BackgroundSyncRegistrationProto::default_instance_;
  delete BackgroundSyncRegistrationsProto::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_background_5fsync_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_background_5fsync_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  BackgroundSyncRegistrationProto::default_instance_ = new BackgroundSyncRegistrationProto();
  BackgroundSyncRegistrationsProto::default_instance_ = new BackgroundSyncRegistrationsProto();
  BackgroundSyncRegistrationProto::default_instance_->InitAsDefaultInstance();
  BackgroundSyncRegistrationsProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_background_5fsync_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_background_5fsync_2eproto_once_);
void protobuf_AddDesc_background_5fsync_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_background_5fsync_2eproto_once_,
                 &protobuf_AddDesc_background_5fsync_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_background_5fsync_2eproto {
  StaticDescriptorInitializer_background_5fsync_2eproto() {
    protobuf_AddDesc_background_5fsync_2eproto();
  }
} static_descriptor_initializer_background_5fsync_2eproto_;
#endif
bool SyncNetworkState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BackgroundSyncRegistrationProto::kIdFieldNumber;
const int BackgroundSyncRegistrationProto::kTagFieldNumber;
const int BackgroundSyncRegistrationProto::kNetworkStateFieldNumber;
const int BackgroundSyncRegistrationProto::kNumAttemptsFieldNumber;
const int BackgroundSyncRegistrationProto::kDelayUntilFieldNumber;
#endif  // !_MSC_VER

BackgroundSyncRegistrationProto::BackgroundSyncRegistrationProto()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BackgroundSyncRegistrationProto::InitAsDefaultInstance() {
}

BackgroundSyncRegistrationProto::BackgroundSyncRegistrationProto(const BackgroundSyncRegistrationProto& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BackgroundSyncRegistrationProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  network_state_ = 0;
  num_attempts_ = 0;
  delay_until_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BackgroundSyncRegistrationProto::~BackgroundSyncRegistrationProto() {
  SharedDtor();
}

void BackgroundSyncRegistrationProto::SharedDtor() {
  if (tag_ != &::google::protobuf::internal::GetEmptyString()) {
    delete tag_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BackgroundSyncRegistrationProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BackgroundSyncRegistrationProto& BackgroundSyncRegistrationProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_background_5fsync_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_background_5fsync_2eproto();
#endif
  return *default_instance_;
}

BackgroundSyncRegistrationProto* BackgroundSyncRegistrationProto::default_instance_ = NULL;

BackgroundSyncRegistrationProto* BackgroundSyncRegistrationProto::New() const {
  return new BackgroundSyncRegistrationProto;
}

void BackgroundSyncRegistrationProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_tag()) {
      if (tag_ != &::google::protobuf::internal::GetEmptyString()) {
        tag_->clear();
      }
    }
    network_state_ = 0;
    num_attempts_ = 0;
    delay_until_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BackgroundSyncRegistrationProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tag;
        break;
      }

      // required string tag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_network_state;
        break;
      }

      // required .content.SyncNetworkState network_state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_network_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::content::SyncNetworkState_IsValid(value)) {
            set_network_state(static_cast< ::content::SyncNetworkState >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_num_attempts;
        break;
      }

      // required int32 num_attempts = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_attempts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_attempts_)));
          set_has_num_attempts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_delay_until;
        break;
      }

      // required int64 delay_until = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delay_until:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &delay_until_)));
          set_has_delay_until();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BackgroundSyncRegistrationProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required string tag = 2;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tag(), output);
  }

  // required .content.SyncNetworkState network_state = 5;
  if (has_network_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->network_state(), output);
  }

  // required int32 num_attempts = 7;
  if (has_num_attempts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->num_attempts(), output);
  }

  // required int64 delay_until = 8;
  if (has_delay_until()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->delay_until(), output);
  }

}

int BackgroundSyncRegistrationProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // required string tag = 2;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // required .content.SyncNetworkState network_state = 5;
    if (has_network_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->network_state());
    }

    // required int32 num_attempts = 7;
    if (has_num_attempts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_attempts());
    }

    // required int64 delay_until = 8;
    if (has_delay_until()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->delay_until());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackgroundSyncRegistrationProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BackgroundSyncRegistrationProto*>(&from));
}

void BackgroundSyncRegistrationProto::MergeFrom(const BackgroundSyncRegistrationProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_network_state()) {
      set_network_state(from.network_state());
    }
    if (from.has_num_attempts()) {
      set_num_attempts(from.num_attempts());
    }
    if (from.has_delay_until()) {
      set_delay_until(from.delay_until());
    }
  }
}

void BackgroundSyncRegistrationProto::CopyFrom(const BackgroundSyncRegistrationProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackgroundSyncRegistrationProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void BackgroundSyncRegistrationProto::Swap(BackgroundSyncRegistrationProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(tag_, other->tag_);
    std::swap(network_state_, other->network_state_);
    std::swap(num_attempts_, other->num_attempts_);
    std::swap(delay_until_, other->delay_until_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BackgroundSyncRegistrationProto::GetTypeName() const {
  return "content.BackgroundSyncRegistrationProto";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BackgroundSyncRegistrationsProto::kRegistrationFieldNumber;
const int BackgroundSyncRegistrationsProto::kNextRegistrationIdFieldNumber;
const int BackgroundSyncRegistrationsProto::kOriginFieldNumber;
#endif  // !_MSC_VER

BackgroundSyncRegistrationsProto::BackgroundSyncRegistrationsProto()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BackgroundSyncRegistrationsProto::InitAsDefaultInstance() {
}

BackgroundSyncRegistrationsProto::BackgroundSyncRegistrationsProto(const BackgroundSyncRegistrationsProto& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BackgroundSyncRegistrationsProto::SharedCtor() {
  _cached_size_ = 0;
  next_registration_id_ = GOOGLE_LONGLONG(0);
  origin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BackgroundSyncRegistrationsProto::~BackgroundSyncRegistrationsProto() {
  SharedDtor();
}

void BackgroundSyncRegistrationsProto::SharedDtor() {
  if (origin_ != &::google::protobuf::internal::GetEmptyString()) {
    delete origin_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BackgroundSyncRegistrationsProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BackgroundSyncRegistrationsProto& BackgroundSyncRegistrationsProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_background_5fsync_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_background_5fsync_2eproto();
#endif
  return *default_instance_;
}

BackgroundSyncRegistrationsProto* BackgroundSyncRegistrationsProto::default_instance_ = NULL;

BackgroundSyncRegistrationsProto* BackgroundSyncRegistrationsProto::New() const {
  return new BackgroundSyncRegistrationsProto;
}

void BackgroundSyncRegistrationsProto::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    next_registration_id_ = GOOGLE_LONGLONG(0);
    if (has_origin()) {
      if (origin_ != &::google::protobuf::internal::GetEmptyString()) {
        origin_->clear();
      }
    }
  }
  registration_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BackgroundSyncRegistrationsProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .content.BackgroundSyncRegistrationProto registration = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_registration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_registration()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_registration;
        if (input->ExpectTag(16)) goto parse_next_registration_id;
        break;
      }

      // required int64 next_registration_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_registration_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &next_registration_id_)));
          set_has_next_registration_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_origin;
        break;
      }

      // required string origin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_origin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_origin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BackgroundSyncRegistrationsProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .content.BackgroundSyncRegistrationProto registration = 1;
  for (int i = 0; i < this->registration_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->registration(i), output);
  }

  // required int64 next_registration_id = 2;
  if (has_next_registration_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->next_registration_id(), output);
  }

  // required string origin = 3;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->origin(), output);
  }

}

int BackgroundSyncRegistrationsProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int64 next_registration_id = 2;
    if (has_next_registration_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->next_registration_id());
    }

    // required string origin = 3;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->origin());
    }

  }
  // repeated .content.BackgroundSyncRegistrationProto registration = 1;
  total_size += 1 * this->registration_size();
  for (int i = 0; i < this->registration_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->registration(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackgroundSyncRegistrationsProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BackgroundSyncRegistrationsProto*>(&from));
}

void BackgroundSyncRegistrationsProto::MergeFrom(const BackgroundSyncRegistrationsProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  registration_.MergeFrom(from.registration_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_next_registration_id()) {
      set_next_registration_id(from.next_registration_id());
    }
    if (from.has_origin()) {
      set_origin(from.origin());
    }
  }
}

void BackgroundSyncRegistrationsProto::CopyFrom(const BackgroundSyncRegistrationsProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackgroundSyncRegistrationsProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  for (int i = 0; i < registration_size(); i++) {
    if (!this->registration(i).IsInitialized()) return false;
  }
  return true;
}

void BackgroundSyncRegistrationsProto::Swap(BackgroundSyncRegistrationsProto* other) {
  if (other != this) {
    registration_.Swap(&other->registration_);
    std::swap(next_registration_id_, other->next_registration_id_);
    std::swap(origin_, other->origin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BackgroundSyncRegistrationsProto::GetTypeName() const {
  return "content.BackgroundSyncRegistrationsProto";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace content

// @@protoc_insertion_point(global_scope)
