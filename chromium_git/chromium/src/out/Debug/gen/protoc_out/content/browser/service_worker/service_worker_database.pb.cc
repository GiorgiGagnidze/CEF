// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service_worker_database.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service_worker_database.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace content {

void protobuf_ShutdownFile_service_5fworker_5fdatabase_2eproto() {
  delete ServiceWorkerRegistrationData::default_instance_;
  delete ServiceWorkerResourceRecord::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_service_5fworker_5fdatabase_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_service_5fworker_5fdatabase_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ServiceWorkerRegistrationData::default_instance_ = new ServiceWorkerRegistrationData();
  ServiceWorkerResourceRecord::default_instance_ = new ServiceWorkerResourceRecord();
  ServiceWorkerRegistrationData::default_instance_->InitAsDefaultInstance();
  ServiceWorkerResourceRecord::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_service_5fworker_5fdatabase_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_service_5fworker_5fdatabase_2eproto_once_);
void protobuf_AddDesc_service_5fworker_5fdatabase_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_service_5fworker_5fdatabase_2eproto_once_,
                 &protobuf_AddDesc_service_5fworker_5fdatabase_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_service_5fworker_5fdatabase_2eproto {
  StaticDescriptorInitializer_service_5fworker_5fdatabase_2eproto() {
    protobuf_AddDesc_service_5fworker_5fdatabase_2eproto();
  }
} static_descriptor_initializer_service_5fworker_5fdatabase_2eproto_;
#endif

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceWorkerRegistrationData::kRegistrationIdFieldNumber;
const int ServiceWorkerRegistrationData::kScopeUrlFieldNumber;
const int ServiceWorkerRegistrationData::kScriptUrlFieldNumber;
const int ServiceWorkerRegistrationData::kVersionIdFieldNumber;
const int ServiceWorkerRegistrationData::kIsActiveFieldNumber;
const int ServiceWorkerRegistrationData::kHasFetchHandlerFieldNumber;
const int ServiceWorkerRegistrationData::kLastUpdateCheckTimeFieldNumber;
const int ServiceWorkerRegistrationData::kResourcesTotalSizeBytesFieldNumber;
const int ServiceWorkerRegistrationData::kForeignFetchScopeFieldNumber;
#endif  // !_MSC_VER

ServiceWorkerRegistrationData::ServiceWorkerRegistrationData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ServiceWorkerRegistrationData::InitAsDefaultInstance() {
}

ServiceWorkerRegistrationData::ServiceWorkerRegistrationData(const ServiceWorkerRegistrationData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ServiceWorkerRegistrationData::SharedCtor() {
  _cached_size_ = 0;
  registration_id_ = GOOGLE_LONGLONG(0);
  scope_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  script_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  version_id_ = GOOGLE_LONGLONG(0);
  is_active_ = false;
  has_fetch_handler_ = false;
  last_update_check_time_ = GOOGLE_LONGLONG(0);
  resources_total_size_bytes_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceWorkerRegistrationData::~ServiceWorkerRegistrationData() {
  SharedDtor();
}

void ServiceWorkerRegistrationData::SharedDtor() {
  if (scope_url_ != &::google::protobuf::internal::GetEmptyString()) {
    delete scope_url_;
  }
  if (script_url_ != &::google::protobuf::internal::GetEmptyString()) {
    delete script_url_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ServiceWorkerRegistrationData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServiceWorkerRegistrationData& ServiceWorkerRegistrationData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_service_5fworker_5fdatabase_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_service_5fworker_5fdatabase_2eproto();
#endif
  return *default_instance_;
}

ServiceWorkerRegistrationData* ServiceWorkerRegistrationData::default_instance_ = NULL;

ServiceWorkerRegistrationData* ServiceWorkerRegistrationData::New() const {
  return new ServiceWorkerRegistrationData;
}

void ServiceWorkerRegistrationData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    registration_id_ = GOOGLE_LONGLONG(0);
    if (has_scope_url()) {
      if (scope_url_ != &::google::protobuf::internal::GetEmptyString()) {
        scope_url_->clear();
      }
    }
    if (has_script_url()) {
      if (script_url_ != &::google::protobuf::internal::GetEmptyString()) {
        script_url_->clear();
      }
    }
    version_id_ = GOOGLE_LONGLONG(0);
    is_active_ = false;
    has_fetch_handler_ = false;
    last_update_check_time_ = GOOGLE_LONGLONG(0);
    resources_total_size_bytes_ = GOOGLE_ULONGLONG(0);
  }
  foreign_fetch_scope_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ServiceWorkerRegistrationData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 registration_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &registration_id_)));
          set_has_registration_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_scope_url;
        break;
      }

      // required string scope_url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scope_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scope_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_script_url;
        break;
      }

      // required string script_url = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_script_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_script_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_version_id;
        break;
      }

      // required int64 version_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_id_)));
          set_has_version_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_active;
        break;
      }

      // required bool is_active = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_active_)));
          set_has_is_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_has_fetch_handler;
        break;
      }

      // required bool has_fetch_handler = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_fetch_handler:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_fetch_handler_)));
          set_has_has_fetch_handler();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_last_update_check_time;
        break;
      }

      // required int64 last_update_check_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_update_check_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_update_check_time_)));
          set_has_last_update_check_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_resources_total_size_bytes;
        break;
      }

      // optional uint64 resources_total_size_bytes = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resources_total_size_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &resources_total_size_bytes_)));
          set_has_resources_total_size_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_foreign_fetch_scope;
        break;
      }

      // repeated string foreign_fetch_scope = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_foreign_fetch_scope:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_foreign_fetch_scope()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_foreign_fetch_scope;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServiceWorkerRegistrationData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 registration_id = 1;
  if (has_registration_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->registration_id(), output);
  }

  // required string scope_url = 2;
  if (has_scope_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->scope_url(), output);
  }

  // required string script_url = 3;
  if (has_script_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->script_url(), output);
  }

  // required int64 version_id = 4;
  if (has_version_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->version_id(), output);
  }

  // required bool is_active = 5;
  if (has_is_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_active(), output);
  }

  // required bool has_fetch_handler = 6;
  if (has_has_fetch_handler()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->has_fetch_handler(), output);
  }

  // required int64 last_update_check_time = 7;
  if (has_last_update_check_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->last_update_check_time(), output);
  }

  // optional uint64 resources_total_size_bytes = 8;
  if (has_resources_total_size_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->resources_total_size_bytes(), output);
  }

  // repeated string foreign_fetch_scope = 9;
  for (int i = 0; i < this->foreign_fetch_scope_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->foreign_fetch_scope(i), output);
  }

}

int ServiceWorkerRegistrationData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 registration_id = 1;
    if (has_registration_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->registration_id());
    }

    // required string scope_url = 2;
    if (has_scope_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scope_url());
    }

    // required string script_url = 3;
    if (has_script_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->script_url());
    }

    // required int64 version_id = 4;
    if (has_version_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->version_id());
    }

    // required bool is_active = 5;
    if (has_is_active()) {
      total_size += 1 + 1;
    }

    // required bool has_fetch_handler = 6;
    if (has_has_fetch_handler()) {
      total_size += 1 + 1;
    }

    // required int64 last_update_check_time = 7;
    if (has_last_update_check_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_update_check_time());
    }

    // optional uint64 resources_total_size_bytes = 8;
    if (has_resources_total_size_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->resources_total_size_bytes());
    }

  }
  // repeated string foreign_fetch_scope = 9;
  total_size += 1 * this->foreign_fetch_scope_size();
  for (int i = 0; i < this->foreign_fetch_scope_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->foreign_fetch_scope(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceWorkerRegistrationData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServiceWorkerRegistrationData*>(&from));
}

void ServiceWorkerRegistrationData::MergeFrom(const ServiceWorkerRegistrationData& from) {
  GOOGLE_CHECK_NE(&from, this);
  foreign_fetch_scope_.MergeFrom(from.foreign_fetch_scope_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_registration_id()) {
      set_registration_id(from.registration_id());
    }
    if (from.has_scope_url()) {
      set_scope_url(from.scope_url());
    }
    if (from.has_script_url()) {
      set_script_url(from.script_url());
    }
    if (from.has_version_id()) {
      set_version_id(from.version_id());
    }
    if (from.has_is_active()) {
      set_is_active(from.is_active());
    }
    if (from.has_has_fetch_handler()) {
      set_has_fetch_handler(from.has_fetch_handler());
    }
    if (from.has_last_update_check_time()) {
      set_last_update_check_time(from.last_update_check_time());
    }
    if (from.has_resources_total_size_bytes()) {
      set_resources_total_size_bytes(from.resources_total_size_bytes());
    }
  }
}

void ServiceWorkerRegistrationData::CopyFrom(const ServiceWorkerRegistrationData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceWorkerRegistrationData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void ServiceWorkerRegistrationData::Swap(ServiceWorkerRegistrationData* other) {
  if (other != this) {
    std::swap(registration_id_, other->registration_id_);
    std::swap(scope_url_, other->scope_url_);
    std::swap(script_url_, other->script_url_);
    std::swap(version_id_, other->version_id_);
    std::swap(is_active_, other->is_active_);
    std::swap(has_fetch_handler_, other->has_fetch_handler_);
    std::swap(last_update_check_time_, other->last_update_check_time_);
    std::swap(resources_total_size_bytes_, other->resources_total_size_bytes_);
    foreign_fetch_scope_.Swap(&other->foreign_fetch_scope_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ServiceWorkerRegistrationData::GetTypeName() const {
  return "content.ServiceWorkerRegistrationData";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceWorkerResourceRecord::kResourceIdFieldNumber;
const int ServiceWorkerResourceRecord::kUrlFieldNumber;
const int ServiceWorkerResourceRecord::kSizeBytesFieldNumber;
#endif  // !_MSC_VER

ServiceWorkerResourceRecord::ServiceWorkerResourceRecord()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ServiceWorkerResourceRecord::InitAsDefaultInstance() {
}

ServiceWorkerResourceRecord::ServiceWorkerResourceRecord(const ServiceWorkerResourceRecord& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ServiceWorkerResourceRecord::SharedCtor() {
  _cached_size_ = 0;
  resource_id_ = GOOGLE_LONGLONG(0);
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  size_bytes_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceWorkerResourceRecord::~ServiceWorkerResourceRecord() {
  SharedDtor();
}

void ServiceWorkerResourceRecord::SharedDtor() {
  if (url_ != &::google::protobuf::internal::GetEmptyString()) {
    delete url_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ServiceWorkerResourceRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServiceWorkerResourceRecord& ServiceWorkerResourceRecord::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_service_5fworker_5fdatabase_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_service_5fworker_5fdatabase_2eproto();
#endif
  return *default_instance_;
}

ServiceWorkerResourceRecord* ServiceWorkerResourceRecord::default_instance_ = NULL;

ServiceWorkerResourceRecord* ServiceWorkerResourceRecord::New() const {
  return new ServiceWorkerResourceRecord;
}

void ServiceWorkerResourceRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    resource_id_ = GOOGLE_LONGLONG(0);
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyString()) {
        url_->clear();
      }
    }
    size_bytes_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ServiceWorkerResourceRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 resource_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &resource_id_)));
          set_has_resource_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }

      // required string url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_size_bytes;
        break;
      }

      // optional uint64 size_bytes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_bytes_)));
          set_has_size_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServiceWorkerResourceRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 resource_id = 1;
  if (has_resource_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->resource_id(), output);
  }

  // required string url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->url(), output);
  }

  // optional uint64 size_bytes = 3;
  if (has_size_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->size_bytes(), output);
  }

}

int ServiceWorkerResourceRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 resource_id = 1;
    if (has_resource_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->resource_id());
    }

    // required string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional uint64 size_bytes = 3;
    if (has_size_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size_bytes());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceWorkerResourceRecord::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServiceWorkerResourceRecord*>(&from));
}

void ServiceWorkerResourceRecord::MergeFrom(const ServiceWorkerResourceRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resource_id()) {
      set_resource_id(from.resource_id());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_size_bytes()) {
      set_size_bytes(from.size_bytes());
    }
  }
}

void ServiceWorkerResourceRecord::CopyFrom(const ServiceWorkerResourceRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceWorkerResourceRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ServiceWorkerResourceRecord::Swap(ServiceWorkerResourceRecord* other) {
  if (other != this) {
    std::swap(resource_id_, other->resource_id_);
    std::swap(url_, other->url_);
    std::swap(size_bytes_, other->size_bytes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ServiceWorkerResourceRecord::GetTypeName() const {
  return "content.ServiceWorkerResourceRecord";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace content

// @@protoc_insertion_point(global_scope)
