// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notification_database_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "notification_database_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace content {

void protobuf_ShutdownFile_notification_5fdatabase_5fdata_2eproto() {
  delete NotificationDatabaseDataProto::default_instance_;
  delete NotificationDatabaseDataProto_NotificationAction::default_instance_;
  delete NotificationDatabaseDataProto_NotificationData::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_notification_5fdatabase_5fdata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_notification_5fdatabase_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  NotificationDatabaseDataProto::default_instance_ = new NotificationDatabaseDataProto();
  NotificationDatabaseDataProto_NotificationAction::default_instance_ = new NotificationDatabaseDataProto_NotificationAction();
  NotificationDatabaseDataProto_NotificationData::default_instance_ = new NotificationDatabaseDataProto_NotificationData();
  NotificationDatabaseDataProto::default_instance_->InitAsDefaultInstance();
  NotificationDatabaseDataProto_NotificationAction::default_instance_->InitAsDefaultInstance();
  NotificationDatabaseDataProto_NotificationData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_notification_5fdatabase_5fdata_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_notification_5fdatabase_5fdata_2eproto_once_);
void protobuf_AddDesc_notification_5fdatabase_5fdata_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_notification_5fdatabase_5fdata_2eproto_once_,
                 &protobuf_AddDesc_notification_5fdatabase_5fdata_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_notification_5fdatabase_5fdata_2eproto {
  StaticDescriptorInitializer_notification_5fdatabase_5fdata_2eproto() {
    protobuf_AddDesc_notification_5fdatabase_5fdata_2eproto();
  }
} static_descriptor_initializer_notification_5fdatabase_5fdata_2eproto_;
#endif

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotificationDatabaseDataProto_NotificationAction::kActionFieldNumber;
const int NotificationDatabaseDataProto_NotificationAction::kTitleFieldNumber;
#endif  // !_MSC_VER

NotificationDatabaseDataProto_NotificationAction::NotificationDatabaseDataProto_NotificationAction()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NotificationDatabaseDataProto_NotificationAction::InitAsDefaultInstance() {
}

NotificationDatabaseDataProto_NotificationAction::NotificationDatabaseDataProto_NotificationAction(const NotificationDatabaseDataProto_NotificationAction& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NotificationDatabaseDataProto_NotificationAction::SharedCtor() {
  _cached_size_ = 0;
  action_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotificationDatabaseDataProto_NotificationAction::~NotificationDatabaseDataProto_NotificationAction() {
  SharedDtor();
}

void NotificationDatabaseDataProto_NotificationAction::SharedDtor() {
  if (action_ != &::google::protobuf::internal::GetEmptyString()) {
    delete action_;
  }
  if (title_ != &::google::protobuf::internal::GetEmptyString()) {
    delete title_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NotificationDatabaseDataProto_NotificationAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NotificationDatabaseDataProto_NotificationAction& NotificationDatabaseDataProto_NotificationAction::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_notification_5fdatabase_5fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_notification_5fdatabase_5fdata_2eproto();
#endif
  return *default_instance_;
}

NotificationDatabaseDataProto_NotificationAction* NotificationDatabaseDataProto_NotificationAction::default_instance_ = NULL;

NotificationDatabaseDataProto_NotificationAction* NotificationDatabaseDataProto_NotificationAction::New() const {
  return new NotificationDatabaseDataProto_NotificationAction;
}

void NotificationDatabaseDataProto_NotificationAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_action()) {
      if (action_ != &::google::protobuf::internal::GetEmptyString()) {
        action_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyString()) {
        title_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NotificationDatabaseDataProto_NotificationAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string action = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional string title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotificationDatabaseDataProto_NotificationAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->action(), output);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->title(), output);
  }

}

int NotificationDatabaseDataProto_NotificationAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->action());
    }

    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotificationDatabaseDataProto_NotificationAction::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NotificationDatabaseDataProto_NotificationAction*>(&from));
}

void NotificationDatabaseDataProto_NotificationAction::MergeFrom(const NotificationDatabaseDataProto_NotificationAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
  }
}

void NotificationDatabaseDataProto_NotificationAction::CopyFrom(const NotificationDatabaseDataProto_NotificationAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotificationDatabaseDataProto_NotificationAction::IsInitialized() const {

  return true;
}

void NotificationDatabaseDataProto_NotificationAction::Swap(NotificationDatabaseDataProto_NotificationAction* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    std::swap(title_, other->title_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NotificationDatabaseDataProto_NotificationAction::GetTypeName() const {
  return "content.NotificationDatabaseDataProto.NotificationAction";
}


// -------------------------------------------------------------------

bool NotificationDatabaseDataProto_NotificationData_Direction_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NotificationDatabaseDataProto_NotificationData_Direction NotificationDatabaseDataProto_NotificationData::LEFT_TO_RIGHT;
const NotificationDatabaseDataProto_NotificationData_Direction NotificationDatabaseDataProto_NotificationData::RIGHT_TO_LEFT;
const NotificationDatabaseDataProto_NotificationData_Direction NotificationDatabaseDataProto_NotificationData::AUTO;
const NotificationDatabaseDataProto_NotificationData_Direction NotificationDatabaseDataProto_NotificationData::Direction_MIN;
const NotificationDatabaseDataProto_NotificationData_Direction NotificationDatabaseDataProto_NotificationData::Direction_MAX;
const int NotificationDatabaseDataProto_NotificationData::Direction_ARRAYSIZE;
#endif  // _MSC_VER
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotificationDatabaseDataProto_NotificationData::kTitleFieldNumber;
const int NotificationDatabaseDataProto_NotificationData::kDirectionFieldNumber;
const int NotificationDatabaseDataProto_NotificationData::kLangFieldNumber;
const int NotificationDatabaseDataProto_NotificationData::kBodyFieldNumber;
const int NotificationDatabaseDataProto_NotificationData::kTagFieldNumber;
const int NotificationDatabaseDataProto_NotificationData::kIconFieldNumber;
const int NotificationDatabaseDataProto_NotificationData::kVibrationPatternFieldNumber;
const int NotificationDatabaseDataProto_NotificationData::kTimestampFieldNumber;
const int NotificationDatabaseDataProto_NotificationData::kSilentFieldNumber;
const int NotificationDatabaseDataProto_NotificationData::kRequireInteractionFieldNumber;
const int NotificationDatabaseDataProto_NotificationData::kDataFieldNumber;
const int NotificationDatabaseDataProto_NotificationData::kActionsFieldNumber;
#endif  // !_MSC_VER

NotificationDatabaseDataProto_NotificationData::NotificationDatabaseDataProto_NotificationData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NotificationDatabaseDataProto_NotificationData::InitAsDefaultInstance() {
}

NotificationDatabaseDataProto_NotificationData::NotificationDatabaseDataProto_NotificationData(const NotificationDatabaseDataProto_NotificationData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NotificationDatabaseDataProto_NotificationData::SharedCtor() {
  _cached_size_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  direction_ = 0;
  lang_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  timestamp_ = GOOGLE_LONGLONG(0);
  silent_ = false;
  require_interaction_ = false;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotificationDatabaseDataProto_NotificationData::~NotificationDatabaseDataProto_NotificationData() {
  SharedDtor();
}

void NotificationDatabaseDataProto_NotificationData::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyString()) {
    delete title_;
  }
  if (lang_ != &::google::protobuf::internal::GetEmptyString()) {
    delete lang_;
  }
  if (body_ != &::google::protobuf::internal::GetEmptyString()) {
    delete body_;
  }
  if (tag_ != &::google::protobuf::internal::GetEmptyString()) {
    delete tag_;
  }
  if (icon_ != &::google::protobuf::internal::GetEmptyString()) {
    delete icon_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyString()) {
    delete data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NotificationDatabaseDataProto_NotificationData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NotificationDatabaseDataProto_NotificationData& NotificationDatabaseDataProto_NotificationData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_notification_5fdatabase_5fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_notification_5fdatabase_5fdata_2eproto();
#endif
  return *default_instance_;
}

NotificationDatabaseDataProto_NotificationData* NotificationDatabaseDataProto_NotificationData::default_instance_ = NULL;

NotificationDatabaseDataProto_NotificationData* NotificationDatabaseDataProto_NotificationData::New() const {
  return new NotificationDatabaseDataProto_NotificationData;
}

void NotificationDatabaseDataProto_NotificationData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyString()) {
        title_->clear();
      }
    }
    direction_ = 0;
    if (has_lang()) {
      if (lang_ != &::google::protobuf::internal::GetEmptyString()) {
        lang_->clear();
      }
    }
    if (has_body()) {
      if (body_ != &::google::protobuf::internal::GetEmptyString()) {
        body_->clear();
      }
    }
    if (has_tag()) {
      if (tag_ != &::google::protobuf::internal::GetEmptyString()) {
        tag_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::GetEmptyString()) {
        icon_->clear();
      }
    }
    timestamp_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    silent_ = false;
    require_interaction_ = false;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyString()) {
        data_->clear();
      }
    }
  }
  vibration_pattern_.Clear();
  actions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NotificationDatabaseDataProto_NotificationData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string title = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_direction;
        break;
      }

      // optional .content.NotificationDatabaseDataProto.NotificationData.Direction direction = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::content::NotificationDatabaseDataProto_NotificationData_Direction_IsValid(value)) {
            set_direction(static_cast< ::content::NotificationDatabaseDataProto_NotificationData_Direction >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_lang;
        break;
      }

      // optional string lang = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lang()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_body;
        break;
      }

      // optional string body = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_tag;
        break;
      }

      // optional string tag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_icon;
        break;
      }

      // optional string icon = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_silent;
        break;
      }

      // optional bool silent = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_silent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &silent_)));
          set_has_silent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_data;
        break;
      }

      // optional bytes data = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_vibration_pattern;
        break;
      }

      // repeated int32 vibration_pattern = 9 [packed = true];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vibration_pattern:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_vibration_pattern())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 74, input, this->mutable_vibration_pattern())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_actions;
        break;
      }

      // repeated .content.NotificationDatabaseDataProto.NotificationAction actions = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_actions;
        if (input->ExpectTag(88)) goto parse_require_interaction;
        break;
      }

      // optional bool require_interaction = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_require_interaction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &require_interaction_)));
          set_has_require_interaction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotificationDatabaseDataProto_NotificationData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->title(), output);
  }

  // optional .content.NotificationDatabaseDataProto.NotificationData.Direction direction = 2;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->direction(), output);
  }

  // optional string lang = 3;
  if (has_lang()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lang(), output);
  }

  // optional string body = 4;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->body(), output);
  }

  // optional string tag = 5;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->tag(), output);
  }

  // optional string icon = 6;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->icon(), output);
  }

  // optional bool silent = 7;
  if (has_silent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->silent(), output);
  }

  // optional bytes data = 8;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->data(), output);
  }

  // repeated int32 vibration_pattern = 9 [packed = true];
  if (this->vibration_pattern_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_vibration_pattern_cached_byte_size_);
  }
  for (int i = 0; i < this->vibration_pattern_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->vibration_pattern(i), output);
  }

  // repeated .content.NotificationDatabaseDataProto.NotificationAction actions = 10;
  for (int i = 0; i < this->actions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->actions(i), output);
  }

  // optional bool require_interaction = 11;
  if (has_require_interaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->require_interaction(), output);
  }

  // optional int64 timestamp = 12;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->timestamp(), output);
  }

}

int NotificationDatabaseDataProto_NotificationData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional .content.NotificationDatabaseDataProto.NotificationData.Direction direction = 2;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
    }

    // optional string lang = 3;
    if (has_lang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lang());
    }

    // optional string body = 4;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->body());
    }

    // optional string tag = 5;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional string icon = 6;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // optional int64 timestamp = 12;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool silent = 7;
    if (has_silent()) {
      total_size += 1 + 1;
    }

    // optional bool require_interaction = 11;
    if (has_require_interaction()) {
      total_size += 1 + 1;
    }

    // optional bytes data = 8;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  // repeated int32 vibration_pattern = 9 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->vibration_pattern_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->vibration_pattern(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _vibration_pattern_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .content.NotificationDatabaseDataProto.NotificationAction actions = 10;
  total_size += 1 * this->actions_size();
  for (int i = 0; i < this->actions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actions(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotificationDatabaseDataProto_NotificationData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NotificationDatabaseDataProto_NotificationData*>(&from));
}

void NotificationDatabaseDataProto_NotificationData::MergeFrom(const NotificationDatabaseDataProto_NotificationData& from) {
  GOOGLE_CHECK_NE(&from, this);
  vibration_pattern_.MergeFrom(from.vibration_pattern_);
  actions_.MergeFrom(from.actions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_lang()) {
      set_lang(from.lang());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_silent()) {
      set_silent(from.silent());
    }
    if (from.has_require_interaction()) {
      set_require_interaction(from.require_interaction());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
}

void NotificationDatabaseDataProto_NotificationData::CopyFrom(const NotificationDatabaseDataProto_NotificationData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotificationDatabaseDataProto_NotificationData::IsInitialized() const {

  return true;
}

void NotificationDatabaseDataProto_NotificationData::Swap(NotificationDatabaseDataProto_NotificationData* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    std::swap(direction_, other->direction_);
    std::swap(lang_, other->lang_);
    std::swap(body_, other->body_);
    std::swap(tag_, other->tag_);
    std::swap(icon_, other->icon_);
    vibration_pattern_.Swap(&other->vibration_pattern_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(silent_, other->silent_);
    std::swap(require_interaction_, other->require_interaction_);
    std::swap(data_, other->data_);
    actions_.Swap(&other->actions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NotificationDatabaseDataProto_NotificationData::GetTypeName() const {
  return "content.NotificationDatabaseDataProto.NotificationData";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotificationDatabaseDataProto::kNotificationIdFieldNumber;
const int NotificationDatabaseDataProto::kOriginFieldNumber;
const int NotificationDatabaseDataProto::kServiceWorkerRegistrationIdFieldNumber;
const int NotificationDatabaseDataProto::kNotificationDataFieldNumber;
#endif  // !_MSC_VER

NotificationDatabaseDataProto::NotificationDatabaseDataProto()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NotificationDatabaseDataProto::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  notification_data_ = const_cast< ::content::NotificationDatabaseDataProto_NotificationData*>(
      ::content::NotificationDatabaseDataProto_NotificationData::internal_default_instance());
#else
  notification_data_ = const_cast< ::content::NotificationDatabaseDataProto_NotificationData*>(&::content::NotificationDatabaseDataProto_NotificationData::default_instance());
#endif
}

NotificationDatabaseDataProto::NotificationDatabaseDataProto(const NotificationDatabaseDataProto& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NotificationDatabaseDataProto::SharedCtor() {
  _cached_size_ = 0;
  notification_id_ = GOOGLE_LONGLONG(0);
  origin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  service_worker_registration_id_ = GOOGLE_LONGLONG(0);
  notification_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotificationDatabaseDataProto::~NotificationDatabaseDataProto() {
  SharedDtor();
}

void NotificationDatabaseDataProto::SharedDtor() {
  if (origin_ != &::google::protobuf::internal::GetEmptyString()) {
    delete origin_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete notification_data_;
  }
}

void NotificationDatabaseDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NotificationDatabaseDataProto& NotificationDatabaseDataProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_notification_5fdatabase_5fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_notification_5fdatabase_5fdata_2eproto();
#endif
  return *default_instance_;
}

NotificationDatabaseDataProto* NotificationDatabaseDataProto::default_instance_ = NULL;

NotificationDatabaseDataProto* NotificationDatabaseDataProto::New() const {
  return new NotificationDatabaseDataProto;
}

void NotificationDatabaseDataProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    notification_id_ = GOOGLE_LONGLONG(0);
    if (has_origin()) {
      if (origin_ != &::google::protobuf::internal::GetEmptyString()) {
        origin_->clear();
      }
    }
    service_worker_registration_id_ = GOOGLE_LONGLONG(0);
    if (has_notification_data()) {
      if (notification_data_ != NULL) notification_data_->::content::NotificationDatabaseDataProto_NotificationData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NotificationDatabaseDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 notification_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &notification_id_)));
          set_has_notification_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_origin;
        break;
      }

      // optional string origin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_origin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_origin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_service_worker_registration_id;
        break;
      }

      // optional int64 service_worker_registration_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_service_worker_registration_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &service_worker_registration_id_)));
          set_has_service_worker_registration_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_notification_data;
        break;
      }

      // optional .content.NotificationDatabaseDataProto.NotificationData notification_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notification_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notification_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotificationDatabaseDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 notification_id = 1;
  if (has_notification_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->notification_id(), output);
  }

  // optional string origin = 2;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->origin(), output);
  }

  // optional int64 service_worker_registration_id = 3;
  if (has_service_worker_registration_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->service_worker_registration_id(), output);
  }

  // optional .content.NotificationDatabaseDataProto.NotificationData notification_data = 4;
  if (has_notification_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->notification_data(), output);
  }

}

int NotificationDatabaseDataProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 notification_id = 1;
    if (has_notification_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->notification_id());
    }

    // optional string origin = 2;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->origin());
    }

    // optional int64 service_worker_registration_id = 3;
    if (has_service_worker_registration_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->service_worker_registration_id());
    }

    // optional .content.NotificationDatabaseDataProto.NotificationData notification_data = 4;
    if (has_notification_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->notification_data());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotificationDatabaseDataProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NotificationDatabaseDataProto*>(&from));
}

void NotificationDatabaseDataProto::MergeFrom(const NotificationDatabaseDataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notification_id()) {
      set_notification_id(from.notification_id());
    }
    if (from.has_origin()) {
      set_origin(from.origin());
    }
    if (from.has_service_worker_registration_id()) {
      set_service_worker_registration_id(from.service_worker_registration_id());
    }
    if (from.has_notification_data()) {
      mutable_notification_data()->::content::NotificationDatabaseDataProto_NotificationData::MergeFrom(from.notification_data());
    }
  }
}

void NotificationDatabaseDataProto::CopyFrom(const NotificationDatabaseDataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotificationDatabaseDataProto::IsInitialized() const {

  return true;
}

void NotificationDatabaseDataProto::Swap(NotificationDatabaseDataProto* other) {
  if (other != this) {
    std::swap(notification_id_, other->notification_id_);
    std::swap(origin_, other->origin_);
    std::swap(service_worker_registration_id_, other->service_worker_registration_id_);
    std::swap(notification_data_, other->notification_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NotificationDatabaseDataProto::GetTypeName() const {
  return "content.NotificationDatabaseDataProto";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace content

// @@protoc_insertion_point(global_scope)
