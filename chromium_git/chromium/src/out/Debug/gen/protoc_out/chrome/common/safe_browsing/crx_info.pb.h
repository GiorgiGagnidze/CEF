// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crx_info.proto

#ifndef PROTOBUF_crx_5finfo_2eproto__INCLUDED
#define PROTOBUF_crx_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace extensions {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_crx_5finfo_2eproto();
void protobuf_AssignDesc_crx_5finfo_2eproto();
void protobuf_ShutdownFile_crx_5finfo_2eproto();

class ClientCRXListInfoRequest;
class ClientCRXListInfoResponse;
class ClientCRXListInfoResponse_UserMessage;

enum ClientCRXListInfoResponse_Verdict {
  ClientCRXListInfoResponse_Verdict_NOT_IN_BLACKLIST = 0,
  ClientCRXListInfoResponse_Verdict_MALWARE = 1,
  ClientCRXListInfoResponse_Verdict_SECURITY_VULNERABILITY = 2,
  ClientCRXListInfoResponse_Verdict_CWS_POLICY_VIOLATION = 3,
  ClientCRXListInfoResponse_Verdict_POTENTIALLY_UNWANTED = 4
};
bool ClientCRXListInfoResponse_Verdict_IsValid(int value);
const ClientCRXListInfoResponse_Verdict ClientCRXListInfoResponse_Verdict_Verdict_MIN = ClientCRXListInfoResponse_Verdict_NOT_IN_BLACKLIST;
const ClientCRXListInfoResponse_Verdict ClientCRXListInfoResponse_Verdict_Verdict_MAX = ClientCRXListInfoResponse_Verdict_POTENTIALLY_UNWANTED;
const int ClientCRXListInfoResponse_Verdict_Verdict_ARRAYSIZE = ClientCRXListInfoResponse_Verdict_Verdict_MAX + 1;

// ===================================================================

class ClientCRXListInfoRequest : public ::google::protobuf::MessageLite {
 public:
  ClientCRXListInfoRequest();
  virtual ~ClientCRXListInfoRequest();

  ClientCRXListInfoRequest(const ClientCRXListInfoRequest& from);

  inline ClientCRXListInfoRequest& operator=(const ClientCRXListInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ClientCRXListInfoRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ClientCRXListInfoRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ClientCRXListInfoRequest* other);

  // implements Message ----------------------------------------------

  ClientCRXListInfoRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ClientCRXListInfoRequest& from);
  void MergeFrom(const ClientCRXListInfoRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string locale = 2;
  inline bool has_locale() const;
  inline void clear_locale();
  static const int kLocaleFieldNumber = 2;
  inline const ::std::string& locale() const;
  inline void set_locale(const ::std::string& value);
  inline void set_locale(const char* value);
  inline void set_locale(const char* value, size_t size);
  inline ::std::string* mutable_locale();
  inline ::std::string* release_locale();
  inline void set_allocated_locale(::std::string* locale);

  // @@protoc_insertion_point(class_scope:extensions.ClientCRXListInfoRequest)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_locale();
  inline void clear_has_locale();

  ::std::string* id_;
  ::std::string* locale_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_crx_5finfo_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_crx_5finfo_2eproto();
  #endif
  friend void protobuf_AssignDesc_crx_5finfo_2eproto();
  friend void protobuf_ShutdownFile_crx_5finfo_2eproto();

  void InitAsDefaultInstance();
  static ClientCRXListInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class ClientCRXListInfoResponse_UserMessage : public ::google::protobuf::MessageLite {
 public:
  ClientCRXListInfoResponse_UserMessage();
  virtual ~ClientCRXListInfoResponse_UserMessage();

  ClientCRXListInfoResponse_UserMessage(const ClientCRXListInfoResponse_UserMessage& from);

  inline ClientCRXListInfoResponse_UserMessage& operator=(const ClientCRXListInfoResponse_UserMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ClientCRXListInfoResponse_UserMessage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ClientCRXListInfoResponse_UserMessage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ClientCRXListInfoResponse_UserMessage* other);

  // implements Message ----------------------------------------------

  ClientCRXListInfoResponse_UserMessage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ClientCRXListInfoResponse_UserMessage& from);
  void MergeFrom(const ClientCRXListInfoResponse_UserMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string detail_message = 1;
  inline bool has_detail_message() const;
  inline void clear_detail_message();
  static const int kDetailMessageFieldNumber = 1;
  inline const ::std::string& detail_message() const;
  inline void set_detail_message(const ::std::string& value);
  inline void set_detail_message(const char* value);
  inline void set_detail_message(const char* value, size_t size);
  inline ::std::string* mutable_detail_message();
  inline ::std::string* release_detail_message();
  inline void set_allocated_detail_message(::std::string* detail_message);

  // @@protoc_insertion_point(class_scope:extensions.ClientCRXListInfoResponse.UserMessage)
 private:
  inline void set_has_detail_message();
  inline void clear_has_detail_message();

  ::std::string* detail_message_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_crx_5finfo_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_crx_5finfo_2eproto();
  #endif
  friend void protobuf_AssignDesc_crx_5finfo_2eproto();
  friend void protobuf_ShutdownFile_crx_5finfo_2eproto();

  void InitAsDefaultInstance();
  static ClientCRXListInfoResponse_UserMessage* default_instance_;
};
// -------------------------------------------------------------------

class ClientCRXListInfoResponse : public ::google::protobuf::MessageLite {
 public:
  ClientCRXListInfoResponse();
  virtual ~ClientCRXListInfoResponse();

  ClientCRXListInfoResponse(const ClientCRXListInfoResponse& from);

  inline ClientCRXListInfoResponse& operator=(const ClientCRXListInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ClientCRXListInfoResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ClientCRXListInfoResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ClientCRXListInfoResponse* other);

  // implements Message ----------------------------------------------

  ClientCRXListInfoResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ClientCRXListInfoResponse& from);
  void MergeFrom(const ClientCRXListInfoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef ClientCRXListInfoResponse_UserMessage UserMessage;

  typedef ClientCRXListInfoResponse_Verdict Verdict;
  static const Verdict NOT_IN_BLACKLIST = ClientCRXListInfoResponse_Verdict_NOT_IN_BLACKLIST;
  static const Verdict MALWARE = ClientCRXListInfoResponse_Verdict_MALWARE;
  static const Verdict SECURITY_VULNERABILITY = ClientCRXListInfoResponse_Verdict_SECURITY_VULNERABILITY;
  static const Verdict CWS_POLICY_VIOLATION = ClientCRXListInfoResponse_Verdict_CWS_POLICY_VIOLATION;
  static const Verdict POTENTIALLY_UNWANTED = ClientCRXListInfoResponse_Verdict_POTENTIALLY_UNWANTED;
  static inline bool Verdict_IsValid(int value) {
    return ClientCRXListInfoResponse_Verdict_IsValid(value);
  }
  static const Verdict Verdict_MIN =
    ClientCRXListInfoResponse_Verdict_Verdict_MIN;
  static const Verdict Verdict_MAX =
    ClientCRXListInfoResponse_Verdict_Verdict_MAX;
  static const int Verdict_ARRAYSIZE =
    ClientCRXListInfoResponse_Verdict_Verdict_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional .extensions.ClientCRXListInfoResponse.Verdict verdict = 1 [default = NOT_IN_BLACKLIST];
  inline bool has_verdict() const;
  inline void clear_verdict();
  static const int kVerdictFieldNumber = 1;
  inline ::extensions::ClientCRXListInfoResponse_Verdict verdict() const;
  inline void set_verdict(::extensions::ClientCRXListInfoResponse_Verdict value);

  // optional .extensions.ClientCRXListInfoResponse.UserMessage user_message = 2;
  inline bool has_user_message() const;
  inline void clear_user_message();
  static const int kUserMessageFieldNumber = 2;
  inline const ::extensions::ClientCRXListInfoResponse_UserMessage& user_message() const;
  inline ::extensions::ClientCRXListInfoResponse_UserMessage* mutable_user_message();
  inline ::extensions::ClientCRXListInfoResponse_UserMessage* release_user_message();
  inline void set_allocated_user_message(::extensions::ClientCRXListInfoResponse_UserMessage* user_message);

  // @@protoc_insertion_point(class_scope:extensions.ClientCRXListInfoResponse)
 private:
  inline void set_has_verdict();
  inline void clear_has_verdict();
  inline void set_has_user_message();
  inline void clear_has_user_message();

  ::extensions::ClientCRXListInfoResponse_UserMessage* user_message_;
  int verdict_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_crx_5finfo_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_crx_5finfo_2eproto();
  #endif
  friend void protobuf_AssignDesc_crx_5finfo_2eproto();
  friend void protobuf_ShutdownFile_crx_5finfo_2eproto();

  void InitAsDefaultInstance();
  static ClientCRXListInfoResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// ClientCRXListInfoRequest

// required string id = 1;
inline bool ClientCRXListInfoRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientCRXListInfoRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientCRXListInfoRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientCRXListInfoRequest::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyString()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& ClientCRXListInfoRequest::id() const {
  return *id_;
}
inline void ClientCRXListInfoRequest::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyString()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void ClientCRXListInfoRequest::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyString()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void ClientCRXListInfoRequest::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyString()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientCRXListInfoRequest::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyString()) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* ClientCRXListInfoRequest::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void ClientCRXListInfoRequest::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string locale = 2;
inline bool ClientCRXListInfoRequest::has_locale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientCRXListInfoRequest::set_has_locale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientCRXListInfoRequest::clear_has_locale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientCRXListInfoRequest::clear_locale() {
  if (locale_ != &::google::protobuf::internal::GetEmptyString()) {
    locale_->clear();
  }
  clear_has_locale();
}
inline const ::std::string& ClientCRXListInfoRequest::locale() const {
  return *locale_;
}
inline void ClientCRXListInfoRequest::set_locale(const ::std::string& value) {
  set_has_locale();
  if (locale_ == &::google::protobuf::internal::GetEmptyString()) {
    locale_ = new ::std::string;
  }
  locale_->assign(value);
}
inline void ClientCRXListInfoRequest::set_locale(const char* value) {
  set_has_locale();
  if (locale_ == &::google::protobuf::internal::GetEmptyString()) {
    locale_ = new ::std::string;
  }
  locale_->assign(value);
}
inline void ClientCRXListInfoRequest::set_locale(const char* value, size_t size) {
  set_has_locale();
  if (locale_ == &::google::protobuf::internal::GetEmptyString()) {
    locale_ = new ::std::string;
  }
  locale_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientCRXListInfoRequest::mutable_locale() {
  set_has_locale();
  if (locale_ == &::google::protobuf::internal::GetEmptyString()) {
    locale_ = new ::std::string;
  }
  return locale_;
}
inline ::std::string* ClientCRXListInfoRequest::release_locale() {
  clear_has_locale();
  if (locale_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = locale_;
    locale_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void ClientCRXListInfoRequest::set_allocated_locale(::std::string* locale) {
  if (locale_ != &::google::protobuf::internal::GetEmptyString()) {
    delete locale_;
  }
  if (locale) {
    set_has_locale();
    locale_ = locale;
  } else {
    clear_has_locale();
    locale_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// ClientCRXListInfoResponse_UserMessage

// optional string detail_message = 1;
inline bool ClientCRXListInfoResponse_UserMessage::has_detail_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientCRXListInfoResponse_UserMessage::set_has_detail_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientCRXListInfoResponse_UserMessage::clear_has_detail_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientCRXListInfoResponse_UserMessage::clear_detail_message() {
  if (detail_message_ != &::google::protobuf::internal::GetEmptyString()) {
    detail_message_->clear();
  }
  clear_has_detail_message();
}
inline const ::std::string& ClientCRXListInfoResponse_UserMessage::detail_message() const {
  return *detail_message_;
}
inline void ClientCRXListInfoResponse_UserMessage::set_detail_message(const ::std::string& value) {
  set_has_detail_message();
  if (detail_message_ == &::google::protobuf::internal::GetEmptyString()) {
    detail_message_ = new ::std::string;
  }
  detail_message_->assign(value);
}
inline void ClientCRXListInfoResponse_UserMessage::set_detail_message(const char* value) {
  set_has_detail_message();
  if (detail_message_ == &::google::protobuf::internal::GetEmptyString()) {
    detail_message_ = new ::std::string;
  }
  detail_message_->assign(value);
}
inline void ClientCRXListInfoResponse_UserMessage::set_detail_message(const char* value, size_t size) {
  set_has_detail_message();
  if (detail_message_ == &::google::protobuf::internal::GetEmptyString()) {
    detail_message_ = new ::std::string;
  }
  detail_message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientCRXListInfoResponse_UserMessage::mutable_detail_message() {
  set_has_detail_message();
  if (detail_message_ == &::google::protobuf::internal::GetEmptyString()) {
    detail_message_ = new ::std::string;
  }
  return detail_message_;
}
inline ::std::string* ClientCRXListInfoResponse_UserMessage::release_detail_message() {
  clear_has_detail_message();
  if (detail_message_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = detail_message_;
    detail_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void ClientCRXListInfoResponse_UserMessage::set_allocated_detail_message(::std::string* detail_message) {
  if (detail_message_ != &::google::protobuf::internal::GetEmptyString()) {
    delete detail_message_;
  }
  if (detail_message) {
    set_has_detail_message();
    detail_message_ = detail_message;
  } else {
    clear_has_detail_message();
    detail_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// ClientCRXListInfoResponse

// optional .extensions.ClientCRXListInfoResponse.Verdict verdict = 1 [default = NOT_IN_BLACKLIST];
inline bool ClientCRXListInfoResponse::has_verdict() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientCRXListInfoResponse::set_has_verdict() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientCRXListInfoResponse::clear_has_verdict() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientCRXListInfoResponse::clear_verdict() {
  verdict_ = 0;
  clear_has_verdict();
}
inline ::extensions::ClientCRXListInfoResponse_Verdict ClientCRXListInfoResponse::verdict() const {
  return static_cast< ::extensions::ClientCRXListInfoResponse_Verdict >(verdict_);
}
inline void ClientCRXListInfoResponse::set_verdict(::extensions::ClientCRXListInfoResponse_Verdict value) {
  assert(::extensions::ClientCRXListInfoResponse_Verdict_IsValid(value));
  set_has_verdict();
  verdict_ = value;
}

// optional .extensions.ClientCRXListInfoResponse.UserMessage user_message = 2;
inline bool ClientCRXListInfoResponse::has_user_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientCRXListInfoResponse::set_has_user_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientCRXListInfoResponse::clear_has_user_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientCRXListInfoResponse::clear_user_message() {
  if (user_message_ != NULL) user_message_->::extensions::ClientCRXListInfoResponse_UserMessage::Clear();
  clear_has_user_message();
}
inline const ::extensions::ClientCRXListInfoResponse_UserMessage& ClientCRXListInfoResponse::user_message() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return user_message_ != NULL ? *user_message_ : *default_instance().user_message_;
#else
  return user_message_ != NULL ? *user_message_ : *default_instance_->user_message_;
#endif
}
inline ::extensions::ClientCRXListInfoResponse_UserMessage* ClientCRXListInfoResponse::mutable_user_message() {
  set_has_user_message();
  if (user_message_ == NULL) user_message_ = new ::extensions::ClientCRXListInfoResponse_UserMessage;
  return user_message_;
}
inline ::extensions::ClientCRXListInfoResponse_UserMessage* ClientCRXListInfoResponse::release_user_message() {
  clear_has_user_message();
  ::extensions::ClientCRXListInfoResponse_UserMessage* temp = user_message_;
  user_message_ = NULL;
  return temp;
}
inline void ClientCRXListInfoResponse::set_allocated_user_message(::extensions::ClientCRXListInfoResponse_UserMessage* user_message) {
  delete user_message_;
  user_message_ = user_message;
  if (user_message) {
    set_has_user_message();
  } else {
    clear_has_user_message();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace extensions

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_crx_5finfo_2eproto__INCLUDED
