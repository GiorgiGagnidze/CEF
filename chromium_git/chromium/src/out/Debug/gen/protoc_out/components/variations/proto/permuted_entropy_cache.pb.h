// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: permuted_entropy_cache.proto

#ifndef PROTOBUF_permuted_5fentropy_5fcache_2eproto__INCLUDED
#define PROTOBUF_permuted_5fentropy_5fcache_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace metrics {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_permuted_5fentropy_5fcache_2eproto();
void protobuf_AssignDesc_permuted_5fentropy_5fcache_2eproto();
void protobuf_ShutdownFile_permuted_5fentropy_5fcache_2eproto();

class PermutedEntropyCache;
class PermutedEntropyCache_Entry;

// ===================================================================

class PermutedEntropyCache_Entry : public ::google::protobuf::MessageLite {
 public:
  PermutedEntropyCache_Entry();
  virtual ~PermutedEntropyCache_Entry();

  PermutedEntropyCache_Entry(const PermutedEntropyCache_Entry& from);

  inline PermutedEntropyCache_Entry& operator=(const PermutedEntropyCache_Entry& from) {
    CopyFrom(from);
    return *this;
  }

  static const PermutedEntropyCache_Entry& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PermutedEntropyCache_Entry* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PermutedEntropyCache_Entry* other);

  // implements Message ----------------------------------------------

  PermutedEntropyCache_Entry* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PermutedEntropyCache_Entry& from);
  void MergeFrom(const PermutedEntropyCache_Entry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 randomization_seed = 1;
  inline bool has_randomization_seed() const;
  inline void clear_randomization_seed();
  static const int kRandomizationSeedFieldNumber = 1;
  inline ::google::protobuf::uint32 randomization_seed() const;
  inline void set_randomization_seed(::google::protobuf::uint32 value);

  // required uint32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:metrics.PermutedEntropyCache.Entry)
 private:
  inline void set_has_randomization_seed();
  inline void clear_has_randomization_seed();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::uint32 randomization_seed_;
  ::google::protobuf::uint32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_permuted_5fentropy_5fcache_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_permuted_5fentropy_5fcache_2eproto();
  #endif
  friend void protobuf_AssignDesc_permuted_5fentropy_5fcache_2eproto();
  friend void protobuf_ShutdownFile_permuted_5fentropy_5fcache_2eproto();

  void InitAsDefaultInstance();
  static PermutedEntropyCache_Entry* default_instance_;
};
// -------------------------------------------------------------------

class PermutedEntropyCache : public ::google::protobuf::MessageLite {
 public:
  PermutedEntropyCache();
  virtual ~PermutedEntropyCache();

  PermutedEntropyCache(const PermutedEntropyCache& from);

  inline PermutedEntropyCache& operator=(const PermutedEntropyCache& from) {
    CopyFrom(from);
    return *this;
  }

  static const PermutedEntropyCache& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PermutedEntropyCache* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PermutedEntropyCache* other);

  // implements Message ----------------------------------------------

  PermutedEntropyCache* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PermutedEntropyCache& from);
  void MergeFrom(const PermutedEntropyCache& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef PermutedEntropyCache_Entry Entry;

  // accessors -------------------------------------------------------

  // repeated .metrics.PermutedEntropyCache.Entry entry = 1;
  inline int entry_size() const;
  inline void clear_entry();
  static const int kEntryFieldNumber = 1;
  inline const ::metrics::PermutedEntropyCache_Entry& entry(int index) const;
  inline ::metrics::PermutedEntropyCache_Entry* mutable_entry(int index);
  inline ::metrics::PermutedEntropyCache_Entry* add_entry();
  inline const ::google::protobuf::RepeatedPtrField< ::metrics::PermutedEntropyCache_Entry >&
      entry() const;
  inline ::google::protobuf::RepeatedPtrField< ::metrics::PermutedEntropyCache_Entry >*
      mutable_entry();

  // @@protoc_insertion_point(class_scope:metrics.PermutedEntropyCache)
 private:

  ::google::protobuf::RepeatedPtrField< ::metrics::PermutedEntropyCache_Entry > entry_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_permuted_5fentropy_5fcache_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_permuted_5fentropy_5fcache_2eproto();
  #endif
  friend void protobuf_AssignDesc_permuted_5fentropy_5fcache_2eproto();
  friend void protobuf_ShutdownFile_permuted_5fentropy_5fcache_2eproto();

  void InitAsDefaultInstance();
  static PermutedEntropyCache* default_instance_;
};
// ===================================================================


// ===================================================================

// PermutedEntropyCache_Entry

// required uint32 randomization_seed = 1;
inline bool PermutedEntropyCache_Entry::has_randomization_seed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PermutedEntropyCache_Entry::set_has_randomization_seed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PermutedEntropyCache_Entry::clear_has_randomization_seed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PermutedEntropyCache_Entry::clear_randomization_seed() {
  randomization_seed_ = 0u;
  clear_has_randomization_seed();
}
inline ::google::protobuf::uint32 PermutedEntropyCache_Entry::randomization_seed() const {
  return randomization_seed_;
}
inline void PermutedEntropyCache_Entry::set_randomization_seed(::google::protobuf::uint32 value) {
  set_has_randomization_seed();
  randomization_seed_ = value;
}

// required uint32 value = 2;
inline bool PermutedEntropyCache_Entry::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PermutedEntropyCache_Entry::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PermutedEntropyCache_Entry::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PermutedEntropyCache_Entry::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 PermutedEntropyCache_Entry::value() const {
  return value_;
}
inline void PermutedEntropyCache_Entry::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// PermutedEntropyCache

// repeated .metrics.PermutedEntropyCache.Entry entry = 1;
inline int PermutedEntropyCache::entry_size() const {
  return entry_.size();
}
inline void PermutedEntropyCache::clear_entry() {
  entry_.Clear();
}
inline const ::metrics::PermutedEntropyCache_Entry& PermutedEntropyCache::entry(int index) const {
  return entry_.Get(index);
}
inline ::metrics::PermutedEntropyCache_Entry* PermutedEntropyCache::mutable_entry(int index) {
  return entry_.Mutable(index);
}
inline ::metrics::PermutedEntropyCache_Entry* PermutedEntropyCache::add_entry() {
  return entry_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metrics::PermutedEntropyCache_Entry >&
PermutedEntropyCache::entry() const {
  return entry_;
}
inline ::google::protobuf::RepeatedPtrField< ::metrics::PermutedEntropyCache_Entry >*
PermutedEntropyCache::mutable_entry() {
  return &entry_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace metrics

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_permuted_5fentropy_5fcache_2eproto__INCLUDED
