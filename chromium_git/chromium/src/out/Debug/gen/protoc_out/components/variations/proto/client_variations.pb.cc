// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_variations.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client_variations.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace variations {

void protobuf_ShutdownFile_client_5fvariations_2eproto() {
  delete ClientVariations::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_client_5fvariations_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_client_5fvariations_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ClientVariations::default_instance_ = new ClientVariations();
  ClientVariations::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_5fvariations_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_client_5fvariations_2eproto_once_);
void protobuf_AddDesc_client_5fvariations_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_client_5fvariations_2eproto_once_,
                 &protobuf_AddDesc_client_5fvariations_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_5fvariations_2eproto {
  StaticDescriptorInitializer_client_5fvariations_2eproto() {
    protobuf_AddDesc_client_5fvariations_2eproto();
  }
} static_descriptor_initializer_client_5fvariations_2eproto_;
#endif

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientVariations::kVariationIdFieldNumber;
const int ClientVariations::kTriggerVariationIdFieldNumber;
#endif  // !_MSC_VER

ClientVariations::ClientVariations()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ClientVariations::InitAsDefaultInstance() {
}

ClientVariations::ClientVariations(const ClientVariations& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ClientVariations::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientVariations::~ClientVariations() {
  SharedDtor();
}

void ClientVariations::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ClientVariations::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientVariations& ClientVariations::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_client_5fvariations_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_client_5fvariations_2eproto();
#endif
  return *default_instance_;
}

ClientVariations* ClientVariations::default_instance_ = NULL;

ClientVariations* ClientVariations::New() const {
  return new ClientVariations;
}

void ClientVariations::Clear() {
  variation_id_.Clear();
  trigger_variation_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ClientVariations::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 variation_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_variation_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_variation_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_variation_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_variation_id;
        if (input->ExpectTag(24)) goto parse_trigger_variation_id;
        break;
      }

      // repeated int32 trigger_variation_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trigger_variation_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_trigger_variation_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_trigger_variation_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_trigger_variation_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientVariations::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 variation_id = 1;
  for (int i = 0; i < this->variation_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->variation_id(i), output);
  }

  // repeated int32 trigger_variation_id = 3;
  for (int i = 0; i < this->trigger_variation_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->trigger_variation_id(i), output);
  }

}

int ClientVariations::ByteSize() const {
  int total_size = 0;

  // repeated int32 variation_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->variation_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->variation_id(i));
    }
    total_size += 1 * this->variation_id_size() + data_size;
  }

  // repeated int32 trigger_variation_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->trigger_variation_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->trigger_variation_id(i));
    }
    total_size += 1 * this->trigger_variation_id_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientVariations::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientVariations*>(&from));
}

void ClientVariations::MergeFrom(const ClientVariations& from) {
  GOOGLE_CHECK_NE(&from, this);
  variation_id_.MergeFrom(from.variation_id_);
  trigger_variation_id_.MergeFrom(from.trigger_variation_id_);
}

void ClientVariations::CopyFrom(const ClientVariations& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientVariations::IsInitialized() const {

  return true;
}

void ClientVariations::Swap(ClientVariations* other) {
  if (other != this) {
    variation_id_.Swap(&other->variation_id_);
    trigger_variation_id_.Swap(&other->trigger_variation_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClientVariations::GetTypeName() const {
  return "variations.ClientVariations";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace variations

// @@protoc_insertion_point(global_scope)
