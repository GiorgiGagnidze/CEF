// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: study.proto

#ifndef PROTOBUF_study_2eproto__INCLUDED
#define PROTOBUF_study_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace variations {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_study_2eproto();
void protobuf_AssignDesc_study_2eproto();
void protobuf_ShutdownFile_study_2eproto();

class Study;
class Study_Experiment;
class Study_Experiment_Param;
class Study_Experiment_FeatureAssociation;
class Study_Experiment_OverrideUIString;
class Study_Filter;

enum Study_Experiment_Type {
  Study_Experiment_Type_NORMAL = 0,
  Study_Experiment_Type_IGNORE_CHANGE = 1,
  Study_Experiment_Type_KILL_BEST_EFFORT = 2,
  Study_Experiment_Type_KILL_CRITICAL = 3
};
bool Study_Experiment_Type_IsValid(int value);
const Study_Experiment_Type Study_Experiment_Type_Type_MIN = Study_Experiment_Type_NORMAL;
const Study_Experiment_Type Study_Experiment_Type_Type_MAX = Study_Experiment_Type_KILL_CRITICAL;
const int Study_Experiment_Type_Type_ARRAYSIZE = Study_Experiment_Type_Type_MAX + 1;

enum Study_Consistency {
  Study_Consistency_SESSION = 0,
  Study_Consistency_PERMANENT = 1
};
bool Study_Consistency_IsValid(int value);
const Study_Consistency Study_Consistency_Consistency_MIN = Study_Consistency_SESSION;
const Study_Consistency Study_Consistency_Consistency_MAX = Study_Consistency_PERMANENT;
const int Study_Consistency_Consistency_ARRAYSIZE = Study_Consistency_Consistency_MAX + 1;

enum Study_Channel {
  Study_Channel_UNKNOWN = -1,
  Study_Channel_CANARY = 0,
  Study_Channel_DEV = 1,
  Study_Channel_BETA = 2,
  Study_Channel_STABLE = 3
};
bool Study_Channel_IsValid(int value);
const Study_Channel Study_Channel_Channel_MIN = Study_Channel_UNKNOWN;
const Study_Channel Study_Channel_Channel_MAX = Study_Channel_STABLE;
const int Study_Channel_Channel_ARRAYSIZE = Study_Channel_Channel_MAX + 1;

enum Study_Platform {
  Study_Platform_PLATFORM_WINDOWS = 0,
  Study_Platform_PLATFORM_MAC = 1,
  Study_Platform_PLATFORM_LINUX = 2,
  Study_Platform_PLATFORM_CHROMEOS = 3,
  Study_Platform_PLATFORM_ANDROID = 4,
  Study_Platform_PLATFORM_IOS = 5
};
bool Study_Platform_IsValid(int value);
const Study_Platform Study_Platform_Platform_MIN = Study_Platform_PLATFORM_WINDOWS;
const Study_Platform Study_Platform_Platform_MAX = Study_Platform_PLATFORM_IOS;
const int Study_Platform_Platform_ARRAYSIZE = Study_Platform_Platform_MAX + 1;

enum Study_FormFactor {
  Study_FormFactor_DESKTOP = 0,
  Study_FormFactor_PHONE = 1,
  Study_FormFactor_TABLET = 2
};
bool Study_FormFactor_IsValid(int value);
const Study_FormFactor Study_FormFactor_FormFactor_MIN = Study_FormFactor_DESKTOP;
const Study_FormFactor Study_FormFactor_FormFactor_MAX = Study_FormFactor_TABLET;
const int Study_FormFactor_FormFactor_ARRAYSIZE = Study_FormFactor_FormFactor_MAX + 1;

enum Study_ActivationType {
  Study_ActivationType_ACTIVATION_EXPLICIT = 0,
  Study_ActivationType_ACTIVATION_AUTO = 1
};
bool Study_ActivationType_IsValid(int value);
const Study_ActivationType Study_ActivationType_ActivationType_MIN = Study_ActivationType_ACTIVATION_EXPLICIT;
const Study_ActivationType Study_ActivationType_ActivationType_MAX = Study_ActivationType_ACTIVATION_AUTO;
const int Study_ActivationType_ActivationType_ARRAYSIZE = Study_ActivationType_ActivationType_MAX + 1;

// ===================================================================

class Study_Experiment_Param : public ::google::protobuf::MessageLite {
 public:
  Study_Experiment_Param();
  virtual ~Study_Experiment_Param();

  Study_Experiment_Param(const Study_Experiment_Param& from);

  inline Study_Experiment_Param& operator=(const Study_Experiment_Param& from) {
    CopyFrom(from);
    return *this;
  }

  static const Study_Experiment_Param& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Study_Experiment_Param* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Study_Experiment_Param* other);

  // implements Message ----------------------------------------------

  Study_Experiment_Param* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Study_Experiment_Param& from);
  void MergeFrom(const Study_Experiment_Param& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:variations.Study.Experiment.Param)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();

  ::std::string* name_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_study_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_study_2eproto();
  #endif
  friend void protobuf_AssignDesc_study_2eproto();
  friend void protobuf_ShutdownFile_study_2eproto();

  void InitAsDefaultInstance();
  static Study_Experiment_Param* default_instance_;
};
// -------------------------------------------------------------------

class Study_Experiment_FeatureAssociation : public ::google::protobuf::MessageLite {
 public:
  Study_Experiment_FeatureAssociation();
  virtual ~Study_Experiment_FeatureAssociation();

  Study_Experiment_FeatureAssociation(const Study_Experiment_FeatureAssociation& from);

  inline Study_Experiment_FeatureAssociation& operator=(const Study_Experiment_FeatureAssociation& from) {
    CopyFrom(from);
    return *this;
  }

  static const Study_Experiment_FeatureAssociation& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Study_Experiment_FeatureAssociation* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Study_Experiment_FeatureAssociation* other);

  // implements Message ----------------------------------------------

  Study_Experiment_FeatureAssociation* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Study_Experiment_FeatureAssociation& from);
  void MergeFrom(const Study_Experiment_FeatureAssociation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string enable_feature = 1;
  inline int enable_feature_size() const;
  inline void clear_enable_feature();
  static const int kEnableFeatureFieldNumber = 1;
  inline const ::std::string& enable_feature(int index) const;
  inline ::std::string* mutable_enable_feature(int index);
  inline void set_enable_feature(int index, const ::std::string& value);
  inline void set_enable_feature(int index, const char* value);
  inline void set_enable_feature(int index, const char* value, size_t size);
  inline ::std::string* add_enable_feature();
  inline void add_enable_feature(const ::std::string& value);
  inline void add_enable_feature(const char* value);
  inline void add_enable_feature(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& enable_feature() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_enable_feature();

  // repeated string disable_feature = 2;
  inline int disable_feature_size() const;
  inline void clear_disable_feature();
  static const int kDisableFeatureFieldNumber = 2;
  inline const ::std::string& disable_feature(int index) const;
  inline ::std::string* mutable_disable_feature(int index);
  inline void set_disable_feature(int index, const ::std::string& value);
  inline void set_disable_feature(int index, const char* value);
  inline void set_disable_feature(int index, const char* value, size_t size);
  inline ::std::string* add_disable_feature();
  inline void add_disable_feature(const ::std::string& value);
  inline void add_disable_feature(const char* value);
  inline void add_disable_feature(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& disable_feature() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_disable_feature();

  // optional string forcing_feature_on = 3;
  inline bool has_forcing_feature_on() const;
  inline void clear_forcing_feature_on();
  static const int kForcingFeatureOnFieldNumber = 3;
  inline const ::std::string& forcing_feature_on() const;
  inline void set_forcing_feature_on(const ::std::string& value);
  inline void set_forcing_feature_on(const char* value);
  inline void set_forcing_feature_on(const char* value, size_t size);
  inline ::std::string* mutable_forcing_feature_on();
  inline ::std::string* release_forcing_feature_on();
  inline void set_allocated_forcing_feature_on(::std::string* forcing_feature_on);

  // optional string forcing_feature_off = 4;
  inline bool has_forcing_feature_off() const;
  inline void clear_forcing_feature_off();
  static const int kForcingFeatureOffFieldNumber = 4;
  inline const ::std::string& forcing_feature_off() const;
  inline void set_forcing_feature_off(const ::std::string& value);
  inline void set_forcing_feature_off(const char* value);
  inline void set_forcing_feature_off(const char* value, size_t size);
  inline ::std::string* mutable_forcing_feature_off();
  inline ::std::string* release_forcing_feature_off();
  inline void set_allocated_forcing_feature_off(::std::string* forcing_feature_off);

  // @@protoc_insertion_point(class_scope:variations.Study.Experiment.FeatureAssociation)
 private:
  inline void set_has_forcing_feature_on();
  inline void clear_has_forcing_feature_on();
  inline void set_has_forcing_feature_off();
  inline void clear_has_forcing_feature_off();

  ::google::protobuf::RepeatedPtrField< ::std::string> enable_feature_;
  ::google::protobuf::RepeatedPtrField< ::std::string> disable_feature_;
  ::std::string* forcing_feature_on_;
  ::std::string* forcing_feature_off_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_study_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_study_2eproto();
  #endif
  friend void protobuf_AssignDesc_study_2eproto();
  friend void protobuf_ShutdownFile_study_2eproto();

  void InitAsDefaultInstance();
  static Study_Experiment_FeatureAssociation* default_instance_;
};
// -------------------------------------------------------------------

class Study_Experiment_OverrideUIString : public ::google::protobuf::MessageLite {
 public:
  Study_Experiment_OverrideUIString();
  virtual ~Study_Experiment_OverrideUIString();

  Study_Experiment_OverrideUIString(const Study_Experiment_OverrideUIString& from);

  inline Study_Experiment_OverrideUIString& operator=(const Study_Experiment_OverrideUIString& from) {
    CopyFrom(from);
    return *this;
  }

  static const Study_Experiment_OverrideUIString& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Study_Experiment_OverrideUIString* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Study_Experiment_OverrideUIString* other);

  // implements Message ----------------------------------------------

  Study_Experiment_OverrideUIString* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Study_Experiment_OverrideUIString& from);
  void MergeFrom(const Study_Experiment_OverrideUIString& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 name_hash = 1;
  inline bool has_name_hash() const;
  inline void clear_name_hash();
  static const int kNameHashFieldNumber = 1;
  inline ::google::protobuf::uint32 name_hash() const;
  inline void set_name_hash(::google::protobuf::uint32 value);

  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:variations.Study.Experiment.OverrideUIString)
 private:
  inline void set_has_name_hash();
  inline void clear_has_name_hash();
  inline void set_has_value();
  inline void clear_has_value();

  ::std::string* value_;
  ::google::protobuf::uint32 name_hash_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_study_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_study_2eproto();
  #endif
  friend void protobuf_AssignDesc_study_2eproto();
  friend void protobuf_ShutdownFile_study_2eproto();

  void InitAsDefaultInstance();
  static Study_Experiment_OverrideUIString* default_instance_;
};
// -------------------------------------------------------------------

class Study_Experiment : public ::google::protobuf::MessageLite {
 public:
  Study_Experiment();
  virtual ~Study_Experiment();

  Study_Experiment(const Study_Experiment& from);

  inline Study_Experiment& operator=(const Study_Experiment& from) {
    CopyFrom(from);
    return *this;
  }

  static const Study_Experiment& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Study_Experiment* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Study_Experiment* other);

  // implements Message ----------------------------------------------

  Study_Experiment* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Study_Experiment& from);
  void MergeFrom(const Study_Experiment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef Study_Experiment_Param Param;
  typedef Study_Experiment_FeatureAssociation FeatureAssociation;
  typedef Study_Experiment_OverrideUIString OverrideUIString;

  typedef Study_Experiment_Type Type;
  static const Type NORMAL = Study_Experiment_Type_NORMAL;
  static const Type IGNORE_CHANGE = Study_Experiment_Type_IGNORE_CHANGE;
  static const Type KILL_BEST_EFFORT = Study_Experiment_Type_KILL_BEST_EFFORT;
  static const Type KILL_CRITICAL = Study_Experiment_Type_KILL_CRITICAL;
  static inline bool Type_IsValid(int value) {
    return Study_Experiment_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Study_Experiment_Type_Type_MIN;
  static const Type Type_MAX =
    Study_Experiment_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Study_Experiment_Type_Type_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 probability_weight = 2;
  inline bool has_probability_weight() const;
  inline void clear_probability_weight();
  static const int kProbabilityWeightFieldNumber = 2;
  inline ::google::protobuf::uint32 probability_weight() const;
  inline void set_probability_weight(::google::protobuf::uint32 value);

  // optional uint64 google_web_experiment_id = 3;
  inline bool has_google_web_experiment_id() const;
  inline void clear_google_web_experiment_id();
  static const int kGoogleWebExperimentIdFieldNumber = 3;
  inline ::google::protobuf::uint64 google_web_experiment_id() const;
  inline void set_google_web_experiment_id(::google::protobuf::uint64 value);

  // optional uint64 google_web_trigger_experiment_id = 8;
  inline bool has_google_web_trigger_experiment_id() const;
  inline void clear_google_web_trigger_experiment_id();
  static const int kGoogleWebTriggerExperimentIdFieldNumber = 8;
  inline ::google::protobuf::uint64 google_web_trigger_experiment_id() const;
  inline void set_google_web_trigger_experiment_id(::google::protobuf::uint64 value);

  // optional uint64 google_update_experiment_id = 4;
  inline bool has_google_update_experiment_id() const;
  inline void clear_google_update_experiment_id();
  static const int kGoogleUpdateExperimentIdFieldNumber = 4;
  inline ::google::protobuf::uint64 google_update_experiment_id() const;
  inline void set_google_update_experiment_id(::google::protobuf::uint64 value);

  // optional uint64 chrome_sync_experiment_id = 10;
  inline bool has_chrome_sync_experiment_id() const;
  inline void clear_chrome_sync_experiment_id();
  static const int kChromeSyncExperimentIdFieldNumber = 10;
  inline ::google::protobuf::uint64 chrome_sync_experiment_id() const;
  inline void set_chrome_sync_experiment_id(::google::protobuf::uint64 value);

  // optional .variations.Study.Experiment.FeatureAssociation feature_association = 12;
  inline bool has_feature_association() const;
  inline void clear_feature_association();
  static const int kFeatureAssociationFieldNumber = 12;
  inline const ::variations::Study_Experiment_FeatureAssociation& feature_association() const;
  inline ::variations::Study_Experiment_FeatureAssociation* mutable_feature_association();
  inline ::variations::Study_Experiment_FeatureAssociation* release_feature_association();
  inline void set_allocated_feature_association(::variations::Study_Experiment_FeatureAssociation* feature_association);

  // optional string forcing_flag = 5;
  inline bool has_forcing_flag() const;
  inline void clear_forcing_flag();
  static const int kForcingFlagFieldNumber = 5;
  inline const ::std::string& forcing_flag() const;
  inline void set_forcing_flag(const ::std::string& value);
  inline void set_forcing_flag(const char* value);
  inline void set_forcing_flag(const char* value, size_t size);
  inline ::std::string* mutable_forcing_flag();
  inline ::std::string* release_forcing_flag();
  inline void set_allocated_forcing_flag(::std::string* forcing_flag);

  // repeated .variations.Study.Experiment.Param param = 6;
  inline int param_size() const;
  inline void clear_param();
  static const int kParamFieldNumber = 6;
  inline const ::variations::Study_Experiment_Param& param(int index) const;
  inline ::variations::Study_Experiment_Param* mutable_param(int index);
  inline ::variations::Study_Experiment_Param* add_param();
  inline const ::google::protobuf::RepeatedPtrField< ::variations::Study_Experiment_Param >&
      param() const;
  inline ::google::protobuf::RepeatedPtrField< ::variations::Study_Experiment_Param >*
      mutable_param();

  // optional .variations.Study.Experiment.Type type = 7 [default = NORMAL];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 7;
  inline ::variations::Study_Experiment_Type type() const;
  inline void set_type(::variations::Study_Experiment_Type value);

  // repeated .variations.Study.Experiment.OverrideUIString override_ui_string = 9;
  inline int override_ui_string_size() const;
  inline void clear_override_ui_string();
  static const int kOverrideUiStringFieldNumber = 9;
  inline const ::variations::Study_Experiment_OverrideUIString& override_ui_string(int index) const;
  inline ::variations::Study_Experiment_OverrideUIString* mutable_override_ui_string(int index);
  inline ::variations::Study_Experiment_OverrideUIString* add_override_ui_string();
  inline const ::google::protobuf::RepeatedPtrField< ::variations::Study_Experiment_OverrideUIString >&
      override_ui_string() const;
  inline ::google::protobuf::RepeatedPtrField< ::variations::Study_Experiment_OverrideUIString >*
      mutable_override_ui_string();

  // @@protoc_insertion_point(class_scope:variations.Study.Experiment)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_probability_weight();
  inline void clear_has_probability_weight();
  inline void set_has_google_web_experiment_id();
  inline void clear_has_google_web_experiment_id();
  inline void set_has_google_web_trigger_experiment_id();
  inline void clear_has_google_web_trigger_experiment_id();
  inline void set_has_google_update_experiment_id();
  inline void clear_has_google_update_experiment_id();
  inline void set_has_chrome_sync_experiment_id();
  inline void clear_has_chrome_sync_experiment_id();
  inline void set_has_feature_association();
  inline void clear_has_feature_association();
  inline void set_has_forcing_flag();
  inline void clear_has_forcing_flag();
  inline void set_has_type();
  inline void clear_has_type();

  ::std::string* name_;
  ::google::protobuf::uint64 google_web_experiment_id_;
  ::google::protobuf::uint64 google_web_trigger_experiment_id_;
  ::google::protobuf::uint64 google_update_experiment_id_;
  ::google::protobuf::uint64 chrome_sync_experiment_id_;
  ::google::protobuf::uint32 probability_weight_;
  int type_;
  ::variations::Study_Experiment_FeatureAssociation* feature_association_;
  ::std::string* forcing_flag_;
  ::google::protobuf::RepeatedPtrField< ::variations::Study_Experiment_Param > param_;
  ::google::protobuf::RepeatedPtrField< ::variations::Study_Experiment_OverrideUIString > override_ui_string_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_study_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_study_2eproto();
  #endif
  friend void protobuf_AssignDesc_study_2eproto();
  friend void protobuf_ShutdownFile_study_2eproto();

  void InitAsDefaultInstance();
  static Study_Experiment* default_instance_;
};
// -------------------------------------------------------------------

class Study_Filter : public ::google::protobuf::MessageLite {
 public:
  Study_Filter();
  virtual ~Study_Filter();

  Study_Filter(const Study_Filter& from);

  inline Study_Filter& operator=(const Study_Filter& from) {
    CopyFrom(from);
    return *this;
  }

  static const Study_Filter& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Study_Filter* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Study_Filter* other);

  // implements Message ----------------------------------------------

  Study_Filter* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Study_Filter& from);
  void MergeFrom(const Study_Filter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 start_date = 1;
  inline bool has_start_date() const;
  inline void clear_start_date();
  static const int kStartDateFieldNumber = 1;
  inline ::google::protobuf::int64 start_date() const;
  inline void set_start_date(::google::protobuf::int64 value);

  // optional string min_version = 2;
  inline bool has_min_version() const;
  inline void clear_min_version();
  static const int kMinVersionFieldNumber = 2;
  inline const ::std::string& min_version() const;
  inline void set_min_version(const ::std::string& value);
  inline void set_min_version(const char* value);
  inline void set_min_version(const char* value, size_t size);
  inline ::std::string* mutable_min_version();
  inline ::std::string* release_min_version();
  inline void set_allocated_min_version(::std::string* min_version);

  // optional string max_version = 3;
  inline bool has_max_version() const;
  inline void clear_max_version();
  static const int kMaxVersionFieldNumber = 3;
  inline const ::std::string& max_version() const;
  inline void set_max_version(const ::std::string& value);
  inline void set_max_version(const char* value);
  inline void set_max_version(const char* value, size_t size);
  inline ::std::string* mutable_max_version();
  inline ::std::string* release_max_version();
  inline void set_allocated_max_version(::std::string* max_version);

  // repeated .variations.Study.Channel channel = 4;
  inline int channel_size() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 4;
  inline ::variations::Study_Channel channel(int index) const;
  inline void set_channel(int index, ::variations::Study_Channel value);
  inline void add_channel(::variations::Study_Channel value);
  inline const ::google::protobuf::RepeatedField<int>& channel() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_channel();

  // repeated .variations.Study.Platform platform = 5;
  inline int platform_size() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 5;
  inline ::variations::Study_Platform platform(int index) const;
  inline void set_platform(int index, ::variations::Study_Platform value);
  inline void add_platform(::variations::Study_Platform value);
  inline const ::google::protobuf::RepeatedField<int>& platform() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_platform();

  // repeated string locale = 6;
  inline int locale_size() const;
  inline void clear_locale();
  static const int kLocaleFieldNumber = 6;
  inline const ::std::string& locale(int index) const;
  inline ::std::string* mutable_locale(int index);
  inline void set_locale(int index, const ::std::string& value);
  inline void set_locale(int index, const char* value);
  inline void set_locale(int index, const char* value, size_t size);
  inline ::std::string* add_locale();
  inline void add_locale(const ::std::string& value);
  inline void add_locale(const char* value);
  inline void add_locale(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& locale() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_locale();

  // repeated .variations.Study.FormFactor form_factor = 7;
  inline int form_factor_size() const;
  inline void clear_form_factor();
  static const int kFormFactorFieldNumber = 7;
  inline ::variations::Study_FormFactor form_factor(int index) const;
  inline void set_form_factor(int index, ::variations::Study_FormFactor value);
  inline void add_form_factor(::variations::Study_FormFactor value);
  inline const ::google::protobuf::RepeatedField<int>& form_factor() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_form_factor();

  // repeated string hardware_class = 8;
  inline int hardware_class_size() const;
  inline void clear_hardware_class();
  static const int kHardwareClassFieldNumber = 8;
  inline const ::std::string& hardware_class(int index) const;
  inline ::std::string* mutable_hardware_class(int index);
  inline void set_hardware_class(int index, const ::std::string& value);
  inline void set_hardware_class(int index, const char* value);
  inline void set_hardware_class(int index, const char* value, size_t size);
  inline ::std::string* add_hardware_class();
  inline void add_hardware_class(const ::std::string& value);
  inline void add_hardware_class(const char* value);
  inline void add_hardware_class(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& hardware_class() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_hardware_class();

  // repeated string exclude_hardware_class = 9;
  inline int exclude_hardware_class_size() const;
  inline void clear_exclude_hardware_class();
  static const int kExcludeHardwareClassFieldNumber = 9;
  inline const ::std::string& exclude_hardware_class(int index) const;
  inline ::std::string* mutable_exclude_hardware_class(int index);
  inline void set_exclude_hardware_class(int index, const ::std::string& value);
  inline void set_exclude_hardware_class(int index, const char* value);
  inline void set_exclude_hardware_class(int index, const char* value, size_t size);
  inline ::std::string* add_exclude_hardware_class();
  inline void add_exclude_hardware_class(const ::std::string& value);
  inline void add_exclude_hardware_class(const char* value);
  inline void add_exclude_hardware_class(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& exclude_hardware_class() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_exclude_hardware_class();

  // repeated string country = 10;
  inline int country_size() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 10;
  inline const ::std::string& country(int index) const;
  inline ::std::string* mutable_country(int index);
  inline void set_country(int index, const ::std::string& value);
  inline void set_country(int index, const char* value);
  inline void set_country(int index, const char* value, size_t size);
  inline ::std::string* add_country();
  inline void add_country(const ::std::string& value);
  inline void add_country(const char* value);
  inline void add_country(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& country() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_country();

  // repeated string exclude_country = 11;
  inline int exclude_country_size() const;
  inline void clear_exclude_country();
  static const int kExcludeCountryFieldNumber = 11;
  inline const ::std::string& exclude_country(int index) const;
  inline ::std::string* mutable_exclude_country(int index);
  inline void set_exclude_country(int index, const ::std::string& value);
  inline void set_exclude_country(int index, const char* value);
  inline void set_exclude_country(int index, const char* value, size_t size);
  inline ::std::string* add_exclude_country();
  inline void add_exclude_country(const ::std::string& value);
  inline void add_exclude_country(const char* value);
  inline void add_exclude_country(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& exclude_country() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_exclude_country();

  // @@protoc_insertion_point(class_scope:variations.Study.Filter)
 private:
  inline void set_has_start_date();
  inline void clear_has_start_date();
  inline void set_has_min_version();
  inline void clear_has_min_version();
  inline void set_has_max_version();
  inline void clear_has_max_version();

  ::google::protobuf::int64 start_date_;
  ::std::string* min_version_;
  ::std::string* max_version_;
  ::google::protobuf::RepeatedField<int> channel_;
  ::google::protobuf::RepeatedField<int> platform_;
  ::google::protobuf::RepeatedPtrField< ::std::string> locale_;
  ::google::protobuf::RepeatedField<int> form_factor_;
  ::google::protobuf::RepeatedPtrField< ::std::string> hardware_class_;
  ::google::protobuf::RepeatedPtrField< ::std::string> exclude_hardware_class_;
  ::google::protobuf::RepeatedPtrField< ::std::string> country_;
  ::google::protobuf::RepeatedPtrField< ::std::string> exclude_country_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_study_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_study_2eproto();
  #endif
  friend void protobuf_AssignDesc_study_2eproto();
  friend void protobuf_ShutdownFile_study_2eproto();

  void InitAsDefaultInstance();
  static Study_Filter* default_instance_;
};
// -------------------------------------------------------------------

class Study : public ::google::protobuf::MessageLite {
 public:
  Study();
  virtual ~Study();

  Study(const Study& from);

  inline Study& operator=(const Study& from) {
    CopyFrom(from);
    return *this;
  }

  static const Study& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Study* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Study* other);

  // implements Message ----------------------------------------------

  Study* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Study& from);
  void MergeFrom(const Study& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef Study_Experiment Experiment;
  typedef Study_Filter Filter;

  typedef Study_Consistency Consistency;
  static const Consistency SESSION = Study_Consistency_SESSION;
  static const Consistency PERMANENT = Study_Consistency_PERMANENT;
  static inline bool Consistency_IsValid(int value) {
    return Study_Consistency_IsValid(value);
  }
  static const Consistency Consistency_MIN =
    Study_Consistency_Consistency_MIN;
  static const Consistency Consistency_MAX =
    Study_Consistency_Consistency_MAX;
  static const int Consistency_ARRAYSIZE =
    Study_Consistency_Consistency_ARRAYSIZE;

  typedef Study_Channel Channel;
  static const Channel UNKNOWN = Study_Channel_UNKNOWN;
  static const Channel CANARY = Study_Channel_CANARY;
  static const Channel DEV = Study_Channel_DEV;
  static const Channel BETA = Study_Channel_BETA;
  static const Channel STABLE = Study_Channel_STABLE;
  static inline bool Channel_IsValid(int value) {
    return Study_Channel_IsValid(value);
  }
  static const Channel Channel_MIN =
    Study_Channel_Channel_MIN;
  static const Channel Channel_MAX =
    Study_Channel_Channel_MAX;
  static const int Channel_ARRAYSIZE =
    Study_Channel_Channel_ARRAYSIZE;

  typedef Study_Platform Platform;
  static const Platform PLATFORM_WINDOWS = Study_Platform_PLATFORM_WINDOWS;
  static const Platform PLATFORM_MAC = Study_Platform_PLATFORM_MAC;
  static const Platform PLATFORM_LINUX = Study_Platform_PLATFORM_LINUX;
  static const Platform PLATFORM_CHROMEOS = Study_Platform_PLATFORM_CHROMEOS;
  static const Platform PLATFORM_ANDROID = Study_Platform_PLATFORM_ANDROID;
  static const Platform PLATFORM_IOS = Study_Platform_PLATFORM_IOS;
  static inline bool Platform_IsValid(int value) {
    return Study_Platform_IsValid(value);
  }
  static const Platform Platform_MIN =
    Study_Platform_Platform_MIN;
  static const Platform Platform_MAX =
    Study_Platform_Platform_MAX;
  static const int Platform_ARRAYSIZE =
    Study_Platform_Platform_ARRAYSIZE;

  typedef Study_FormFactor FormFactor;
  static const FormFactor DESKTOP = Study_FormFactor_DESKTOP;
  static const FormFactor PHONE = Study_FormFactor_PHONE;
  static const FormFactor TABLET = Study_FormFactor_TABLET;
  static inline bool FormFactor_IsValid(int value) {
    return Study_FormFactor_IsValid(value);
  }
  static const FormFactor FormFactor_MIN =
    Study_FormFactor_FormFactor_MIN;
  static const FormFactor FormFactor_MAX =
    Study_FormFactor_FormFactor_MAX;
  static const int FormFactor_ARRAYSIZE =
    Study_FormFactor_FormFactor_ARRAYSIZE;

  typedef Study_ActivationType ActivationType;
  static const ActivationType ACTIVATION_EXPLICIT = Study_ActivationType_ACTIVATION_EXPLICIT;
  static const ActivationType ACTIVATION_AUTO = Study_ActivationType_ACTIVATION_AUTO;
  static inline bool ActivationType_IsValid(int value) {
    return Study_ActivationType_IsValid(value);
  }
  static const ActivationType ActivationType_MIN =
    Study_ActivationType_ActivationType_MIN;
  static const ActivationType ActivationType_MAX =
    Study_ActivationType_ActivationType_MAX;
  static const int ActivationType_ARRAYSIZE =
    Study_ActivationType_ActivationType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int64 expiry_date = 3;
  inline bool has_expiry_date() const;
  inline void clear_expiry_date();
  static const int kExpiryDateFieldNumber = 3;
  inline ::google::protobuf::int64 expiry_date() const;
  inline void set_expiry_date(::google::protobuf::int64 value);

  // optional .variations.Study.Consistency consistency = 7 [default = SESSION];
  inline bool has_consistency() const;
  inline void clear_consistency();
  static const int kConsistencyFieldNumber = 7;
  inline ::variations::Study_Consistency consistency() const;
  inline void set_consistency(::variations::Study_Consistency value);

  // optional string default_experiment_name = 8;
  inline bool has_default_experiment_name() const;
  inline void clear_default_experiment_name();
  static const int kDefaultExperimentNameFieldNumber = 8;
  inline const ::std::string& default_experiment_name() const;
  inline void set_default_experiment_name(const ::std::string& value);
  inline void set_default_experiment_name(const char* value);
  inline void set_default_experiment_name(const char* value, size_t size);
  inline ::std::string* mutable_default_experiment_name();
  inline ::std::string* release_default_experiment_name();
  inline void set_allocated_default_experiment_name(::std::string* default_experiment_name);

  // repeated .variations.Study.Experiment experiment = 9;
  inline int experiment_size() const;
  inline void clear_experiment();
  static const int kExperimentFieldNumber = 9;
  inline const ::variations::Study_Experiment& experiment(int index) const;
  inline ::variations::Study_Experiment* mutable_experiment(int index);
  inline ::variations::Study_Experiment* add_experiment();
  inline const ::google::protobuf::RepeatedPtrField< ::variations::Study_Experiment >&
      experiment() const;
  inline ::google::protobuf::RepeatedPtrField< ::variations::Study_Experiment >*
      mutable_experiment();

  // optional .variations.Study.Filter filter = 10;
  inline bool has_filter() const;
  inline void clear_filter();
  static const int kFilterFieldNumber = 10;
  inline const ::variations::Study_Filter& filter() const;
  inline ::variations::Study_Filter* mutable_filter();
  inline ::variations::Study_Filter* release_filter();
  inline void set_allocated_filter(::variations::Study_Filter* filter);

  // optional uint32 randomization_seed = 11;
  inline bool has_randomization_seed() const;
  inline void clear_randomization_seed();
  static const int kRandomizationSeedFieldNumber = 11;
  inline ::google::protobuf::uint32 randomization_seed() const;
  inline void set_randomization_seed(::google::protobuf::uint32 value);

  // optional .variations.Study.ActivationType activation_type = 12;
  inline bool has_activation_type() const;
  inline void clear_activation_type();
  static const int kActivationTypeFieldNumber = 12;
  inline ::variations::Study_ActivationType activation_type() const;
  inline void set_activation_type(::variations::Study_ActivationType value);

  // @@protoc_insertion_point(class_scope:variations.Study)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_expiry_date();
  inline void clear_has_expiry_date();
  inline void set_has_consistency();
  inline void clear_has_consistency();
  inline void set_has_default_experiment_name();
  inline void clear_has_default_experiment_name();
  inline void set_has_filter();
  inline void clear_has_filter();
  inline void set_has_randomization_seed();
  inline void clear_has_randomization_seed();
  inline void set_has_activation_type();
  inline void clear_has_activation_type();

  ::std::string* name_;
  ::google::protobuf::int64 expiry_date_;
  ::std::string* default_experiment_name_;
  ::google::protobuf::RepeatedPtrField< ::variations::Study_Experiment > experiment_;
  int consistency_;
  ::google::protobuf::uint32 randomization_seed_;
  ::variations::Study_Filter* filter_;
  int activation_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_study_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_study_2eproto();
  #endif
  friend void protobuf_AssignDesc_study_2eproto();
  friend void protobuf_ShutdownFile_study_2eproto();

  void InitAsDefaultInstance();
  static Study* default_instance_;
};
// ===================================================================


// ===================================================================

// Study_Experiment_Param

// optional string name = 1;
inline bool Study_Experiment_Param::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Study_Experiment_Param::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Study_Experiment_Param::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Study_Experiment_Param::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Study_Experiment_Param::name() const {
  return *name_;
}
inline void Study_Experiment_Param::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Study_Experiment_Param::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Study_Experiment_Param::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Study_Experiment_Param::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Study_Experiment_Param::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void Study_Experiment_Param::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string value = 2;
inline bool Study_Experiment_Param::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Study_Experiment_Param::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Study_Experiment_Param::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Study_Experiment_Param::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyString()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& Study_Experiment_Param::value() const {
  return *value_;
}
inline void Study_Experiment_Param::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Study_Experiment_Param::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Study_Experiment_Param::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Study_Experiment_Param::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* Study_Experiment_Param::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void Study_Experiment_Param::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyString()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// Study_Experiment_FeatureAssociation

// repeated string enable_feature = 1;
inline int Study_Experiment_FeatureAssociation::enable_feature_size() const {
  return enable_feature_.size();
}
inline void Study_Experiment_FeatureAssociation::clear_enable_feature() {
  enable_feature_.Clear();
}
inline const ::std::string& Study_Experiment_FeatureAssociation::enable_feature(int index) const {
  return enable_feature_.Get(index);
}
inline ::std::string* Study_Experiment_FeatureAssociation::mutable_enable_feature(int index) {
  return enable_feature_.Mutable(index);
}
inline void Study_Experiment_FeatureAssociation::set_enable_feature(int index, const ::std::string& value) {
  enable_feature_.Mutable(index)->assign(value);
}
inline void Study_Experiment_FeatureAssociation::set_enable_feature(int index, const char* value) {
  enable_feature_.Mutable(index)->assign(value);
}
inline void Study_Experiment_FeatureAssociation::set_enable_feature(int index, const char* value, size_t size) {
  enable_feature_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Study_Experiment_FeatureAssociation::add_enable_feature() {
  return enable_feature_.Add();
}
inline void Study_Experiment_FeatureAssociation::add_enable_feature(const ::std::string& value) {
  enable_feature_.Add()->assign(value);
}
inline void Study_Experiment_FeatureAssociation::add_enable_feature(const char* value) {
  enable_feature_.Add()->assign(value);
}
inline void Study_Experiment_FeatureAssociation::add_enable_feature(const char* value, size_t size) {
  enable_feature_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Study_Experiment_FeatureAssociation::enable_feature() const {
  return enable_feature_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Study_Experiment_FeatureAssociation::mutable_enable_feature() {
  return &enable_feature_;
}

// repeated string disable_feature = 2;
inline int Study_Experiment_FeatureAssociation::disable_feature_size() const {
  return disable_feature_.size();
}
inline void Study_Experiment_FeatureAssociation::clear_disable_feature() {
  disable_feature_.Clear();
}
inline const ::std::string& Study_Experiment_FeatureAssociation::disable_feature(int index) const {
  return disable_feature_.Get(index);
}
inline ::std::string* Study_Experiment_FeatureAssociation::mutable_disable_feature(int index) {
  return disable_feature_.Mutable(index);
}
inline void Study_Experiment_FeatureAssociation::set_disable_feature(int index, const ::std::string& value) {
  disable_feature_.Mutable(index)->assign(value);
}
inline void Study_Experiment_FeatureAssociation::set_disable_feature(int index, const char* value) {
  disable_feature_.Mutable(index)->assign(value);
}
inline void Study_Experiment_FeatureAssociation::set_disable_feature(int index, const char* value, size_t size) {
  disable_feature_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Study_Experiment_FeatureAssociation::add_disable_feature() {
  return disable_feature_.Add();
}
inline void Study_Experiment_FeatureAssociation::add_disable_feature(const ::std::string& value) {
  disable_feature_.Add()->assign(value);
}
inline void Study_Experiment_FeatureAssociation::add_disable_feature(const char* value) {
  disable_feature_.Add()->assign(value);
}
inline void Study_Experiment_FeatureAssociation::add_disable_feature(const char* value, size_t size) {
  disable_feature_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Study_Experiment_FeatureAssociation::disable_feature() const {
  return disable_feature_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Study_Experiment_FeatureAssociation::mutable_disable_feature() {
  return &disable_feature_;
}

// optional string forcing_feature_on = 3;
inline bool Study_Experiment_FeatureAssociation::has_forcing_feature_on() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Study_Experiment_FeatureAssociation::set_has_forcing_feature_on() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Study_Experiment_FeatureAssociation::clear_has_forcing_feature_on() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Study_Experiment_FeatureAssociation::clear_forcing_feature_on() {
  if (forcing_feature_on_ != &::google::protobuf::internal::GetEmptyString()) {
    forcing_feature_on_->clear();
  }
  clear_has_forcing_feature_on();
}
inline const ::std::string& Study_Experiment_FeatureAssociation::forcing_feature_on() const {
  return *forcing_feature_on_;
}
inline void Study_Experiment_FeatureAssociation::set_forcing_feature_on(const ::std::string& value) {
  set_has_forcing_feature_on();
  if (forcing_feature_on_ == &::google::protobuf::internal::GetEmptyString()) {
    forcing_feature_on_ = new ::std::string;
  }
  forcing_feature_on_->assign(value);
}
inline void Study_Experiment_FeatureAssociation::set_forcing_feature_on(const char* value) {
  set_has_forcing_feature_on();
  if (forcing_feature_on_ == &::google::protobuf::internal::GetEmptyString()) {
    forcing_feature_on_ = new ::std::string;
  }
  forcing_feature_on_->assign(value);
}
inline void Study_Experiment_FeatureAssociation::set_forcing_feature_on(const char* value, size_t size) {
  set_has_forcing_feature_on();
  if (forcing_feature_on_ == &::google::protobuf::internal::GetEmptyString()) {
    forcing_feature_on_ = new ::std::string;
  }
  forcing_feature_on_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Study_Experiment_FeatureAssociation::mutable_forcing_feature_on() {
  set_has_forcing_feature_on();
  if (forcing_feature_on_ == &::google::protobuf::internal::GetEmptyString()) {
    forcing_feature_on_ = new ::std::string;
  }
  return forcing_feature_on_;
}
inline ::std::string* Study_Experiment_FeatureAssociation::release_forcing_feature_on() {
  clear_has_forcing_feature_on();
  if (forcing_feature_on_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = forcing_feature_on_;
    forcing_feature_on_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void Study_Experiment_FeatureAssociation::set_allocated_forcing_feature_on(::std::string* forcing_feature_on) {
  if (forcing_feature_on_ != &::google::protobuf::internal::GetEmptyString()) {
    delete forcing_feature_on_;
  }
  if (forcing_feature_on) {
    set_has_forcing_feature_on();
    forcing_feature_on_ = forcing_feature_on;
  } else {
    clear_has_forcing_feature_on();
    forcing_feature_on_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string forcing_feature_off = 4;
inline bool Study_Experiment_FeatureAssociation::has_forcing_feature_off() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Study_Experiment_FeatureAssociation::set_has_forcing_feature_off() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Study_Experiment_FeatureAssociation::clear_has_forcing_feature_off() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Study_Experiment_FeatureAssociation::clear_forcing_feature_off() {
  if (forcing_feature_off_ != &::google::protobuf::internal::GetEmptyString()) {
    forcing_feature_off_->clear();
  }
  clear_has_forcing_feature_off();
}
inline const ::std::string& Study_Experiment_FeatureAssociation::forcing_feature_off() const {
  return *forcing_feature_off_;
}
inline void Study_Experiment_FeatureAssociation::set_forcing_feature_off(const ::std::string& value) {
  set_has_forcing_feature_off();
  if (forcing_feature_off_ == &::google::protobuf::internal::GetEmptyString()) {
    forcing_feature_off_ = new ::std::string;
  }
  forcing_feature_off_->assign(value);
}
inline void Study_Experiment_FeatureAssociation::set_forcing_feature_off(const char* value) {
  set_has_forcing_feature_off();
  if (forcing_feature_off_ == &::google::protobuf::internal::GetEmptyString()) {
    forcing_feature_off_ = new ::std::string;
  }
  forcing_feature_off_->assign(value);
}
inline void Study_Experiment_FeatureAssociation::set_forcing_feature_off(const char* value, size_t size) {
  set_has_forcing_feature_off();
  if (forcing_feature_off_ == &::google::protobuf::internal::GetEmptyString()) {
    forcing_feature_off_ = new ::std::string;
  }
  forcing_feature_off_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Study_Experiment_FeatureAssociation::mutable_forcing_feature_off() {
  set_has_forcing_feature_off();
  if (forcing_feature_off_ == &::google::protobuf::internal::GetEmptyString()) {
    forcing_feature_off_ = new ::std::string;
  }
  return forcing_feature_off_;
}
inline ::std::string* Study_Experiment_FeatureAssociation::release_forcing_feature_off() {
  clear_has_forcing_feature_off();
  if (forcing_feature_off_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = forcing_feature_off_;
    forcing_feature_off_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void Study_Experiment_FeatureAssociation::set_allocated_forcing_feature_off(::std::string* forcing_feature_off) {
  if (forcing_feature_off_ != &::google::protobuf::internal::GetEmptyString()) {
    delete forcing_feature_off_;
  }
  if (forcing_feature_off) {
    set_has_forcing_feature_off();
    forcing_feature_off_ = forcing_feature_off;
  } else {
    clear_has_forcing_feature_off();
    forcing_feature_off_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// Study_Experiment_OverrideUIString

// optional fixed32 name_hash = 1;
inline bool Study_Experiment_OverrideUIString::has_name_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Study_Experiment_OverrideUIString::set_has_name_hash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Study_Experiment_OverrideUIString::clear_has_name_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Study_Experiment_OverrideUIString::clear_name_hash() {
  name_hash_ = 0u;
  clear_has_name_hash();
}
inline ::google::protobuf::uint32 Study_Experiment_OverrideUIString::name_hash() const {
  return name_hash_;
}
inline void Study_Experiment_OverrideUIString::set_name_hash(::google::protobuf::uint32 value) {
  set_has_name_hash();
  name_hash_ = value;
}

// optional string value = 2;
inline bool Study_Experiment_OverrideUIString::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Study_Experiment_OverrideUIString::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Study_Experiment_OverrideUIString::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Study_Experiment_OverrideUIString::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyString()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& Study_Experiment_OverrideUIString::value() const {
  return *value_;
}
inline void Study_Experiment_OverrideUIString::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Study_Experiment_OverrideUIString::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Study_Experiment_OverrideUIString::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Study_Experiment_OverrideUIString::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* Study_Experiment_OverrideUIString::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void Study_Experiment_OverrideUIString::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyString()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// Study_Experiment

// required string name = 1;
inline bool Study_Experiment::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Study_Experiment::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Study_Experiment::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Study_Experiment::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Study_Experiment::name() const {
  return *name_;
}
inline void Study_Experiment::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Study_Experiment::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Study_Experiment::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Study_Experiment::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Study_Experiment::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void Study_Experiment::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// required uint32 probability_weight = 2;
inline bool Study_Experiment::has_probability_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Study_Experiment::set_has_probability_weight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Study_Experiment::clear_has_probability_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Study_Experiment::clear_probability_weight() {
  probability_weight_ = 0u;
  clear_has_probability_weight();
}
inline ::google::protobuf::uint32 Study_Experiment::probability_weight() const {
  return probability_weight_;
}
inline void Study_Experiment::set_probability_weight(::google::protobuf::uint32 value) {
  set_has_probability_weight();
  probability_weight_ = value;
}

// optional uint64 google_web_experiment_id = 3;
inline bool Study_Experiment::has_google_web_experiment_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Study_Experiment::set_has_google_web_experiment_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Study_Experiment::clear_has_google_web_experiment_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Study_Experiment::clear_google_web_experiment_id() {
  google_web_experiment_id_ = GOOGLE_ULONGLONG(0);
  clear_has_google_web_experiment_id();
}
inline ::google::protobuf::uint64 Study_Experiment::google_web_experiment_id() const {
  return google_web_experiment_id_;
}
inline void Study_Experiment::set_google_web_experiment_id(::google::protobuf::uint64 value) {
  set_has_google_web_experiment_id();
  google_web_experiment_id_ = value;
}

// optional uint64 google_web_trigger_experiment_id = 8;
inline bool Study_Experiment::has_google_web_trigger_experiment_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Study_Experiment::set_has_google_web_trigger_experiment_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Study_Experiment::clear_has_google_web_trigger_experiment_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Study_Experiment::clear_google_web_trigger_experiment_id() {
  google_web_trigger_experiment_id_ = GOOGLE_ULONGLONG(0);
  clear_has_google_web_trigger_experiment_id();
}
inline ::google::protobuf::uint64 Study_Experiment::google_web_trigger_experiment_id() const {
  return google_web_trigger_experiment_id_;
}
inline void Study_Experiment::set_google_web_trigger_experiment_id(::google::protobuf::uint64 value) {
  set_has_google_web_trigger_experiment_id();
  google_web_trigger_experiment_id_ = value;
}

// optional uint64 google_update_experiment_id = 4;
inline bool Study_Experiment::has_google_update_experiment_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Study_Experiment::set_has_google_update_experiment_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Study_Experiment::clear_has_google_update_experiment_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Study_Experiment::clear_google_update_experiment_id() {
  google_update_experiment_id_ = GOOGLE_ULONGLONG(0);
  clear_has_google_update_experiment_id();
}
inline ::google::protobuf::uint64 Study_Experiment::google_update_experiment_id() const {
  return google_update_experiment_id_;
}
inline void Study_Experiment::set_google_update_experiment_id(::google::protobuf::uint64 value) {
  set_has_google_update_experiment_id();
  google_update_experiment_id_ = value;
}

// optional uint64 chrome_sync_experiment_id = 10;
inline bool Study_Experiment::has_chrome_sync_experiment_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Study_Experiment::set_has_chrome_sync_experiment_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Study_Experiment::clear_has_chrome_sync_experiment_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Study_Experiment::clear_chrome_sync_experiment_id() {
  chrome_sync_experiment_id_ = GOOGLE_ULONGLONG(0);
  clear_has_chrome_sync_experiment_id();
}
inline ::google::protobuf::uint64 Study_Experiment::chrome_sync_experiment_id() const {
  return chrome_sync_experiment_id_;
}
inline void Study_Experiment::set_chrome_sync_experiment_id(::google::protobuf::uint64 value) {
  set_has_chrome_sync_experiment_id();
  chrome_sync_experiment_id_ = value;
}

// optional .variations.Study.Experiment.FeatureAssociation feature_association = 12;
inline bool Study_Experiment::has_feature_association() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Study_Experiment::set_has_feature_association() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Study_Experiment::clear_has_feature_association() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Study_Experiment::clear_feature_association() {
  if (feature_association_ != NULL) feature_association_->::variations::Study_Experiment_FeatureAssociation::Clear();
  clear_has_feature_association();
}
inline const ::variations::Study_Experiment_FeatureAssociation& Study_Experiment::feature_association() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return feature_association_ != NULL ? *feature_association_ : *default_instance().feature_association_;
#else
  return feature_association_ != NULL ? *feature_association_ : *default_instance_->feature_association_;
#endif
}
inline ::variations::Study_Experiment_FeatureAssociation* Study_Experiment::mutable_feature_association() {
  set_has_feature_association();
  if (feature_association_ == NULL) feature_association_ = new ::variations::Study_Experiment_FeatureAssociation;
  return feature_association_;
}
inline ::variations::Study_Experiment_FeatureAssociation* Study_Experiment::release_feature_association() {
  clear_has_feature_association();
  ::variations::Study_Experiment_FeatureAssociation* temp = feature_association_;
  feature_association_ = NULL;
  return temp;
}
inline void Study_Experiment::set_allocated_feature_association(::variations::Study_Experiment_FeatureAssociation* feature_association) {
  delete feature_association_;
  feature_association_ = feature_association;
  if (feature_association) {
    set_has_feature_association();
  } else {
    clear_has_feature_association();
  }
}

// optional string forcing_flag = 5;
inline bool Study_Experiment::has_forcing_flag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Study_Experiment::set_has_forcing_flag() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Study_Experiment::clear_has_forcing_flag() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Study_Experiment::clear_forcing_flag() {
  if (forcing_flag_ != &::google::protobuf::internal::GetEmptyString()) {
    forcing_flag_->clear();
  }
  clear_has_forcing_flag();
}
inline const ::std::string& Study_Experiment::forcing_flag() const {
  return *forcing_flag_;
}
inline void Study_Experiment::set_forcing_flag(const ::std::string& value) {
  set_has_forcing_flag();
  if (forcing_flag_ == &::google::protobuf::internal::GetEmptyString()) {
    forcing_flag_ = new ::std::string;
  }
  forcing_flag_->assign(value);
}
inline void Study_Experiment::set_forcing_flag(const char* value) {
  set_has_forcing_flag();
  if (forcing_flag_ == &::google::protobuf::internal::GetEmptyString()) {
    forcing_flag_ = new ::std::string;
  }
  forcing_flag_->assign(value);
}
inline void Study_Experiment::set_forcing_flag(const char* value, size_t size) {
  set_has_forcing_flag();
  if (forcing_flag_ == &::google::protobuf::internal::GetEmptyString()) {
    forcing_flag_ = new ::std::string;
  }
  forcing_flag_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Study_Experiment::mutable_forcing_flag() {
  set_has_forcing_flag();
  if (forcing_flag_ == &::google::protobuf::internal::GetEmptyString()) {
    forcing_flag_ = new ::std::string;
  }
  return forcing_flag_;
}
inline ::std::string* Study_Experiment::release_forcing_flag() {
  clear_has_forcing_flag();
  if (forcing_flag_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = forcing_flag_;
    forcing_flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void Study_Experiment::set_allocated_forcing_flag(::std::string* forcing_flag) {
  if (forcing_flag_ != &::google::protobuf::internal::GetEmptyString()) {
    delete forcing_flag_;
  }
  if (forcing_flag) {
    set_has_forcing_flag();
    forcing_flag_ = forcing_flag;
  } else {
    clear_has_forcing_flag();
    forcing_flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// repeated .variations.Study.Experiment.Param param = 6;
inline int Study_Experiment::param_size() const {
  return param_.size();
}
inline void Study_Experiment::clear_param() {
  param_.Clear();
}
inline const ::variations::Study_Experiment_Param& Study_Experiment::param(int index) const {
  return param_.Get(index);
}
inline ::variations::Study_Experiment_Param* Study_Experiment::mutable_param(int index) {
  return param_.Mutable(index);
}
inline ::variations::Study_Experiment_Param* Study_Experiment::add_param() {
  return param_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::variations::Study_Experiment_Param >&
Study_Experiment::param() const {
  return param_;
}
inline ::google::protobuf::RepeatedPtrField< ::variations::Study_Experiment_Param >*
Study_Experiment::mutable_param() {
  return &param_;
}

// optional .variations.Study.Experiment.Type type = 7 [default = NORMAL];
inline bool Study_Experiment::has_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Study_Experiment::set_has_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Study_Experiment::clear_has_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Study_Experiment::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::variations::Study_Experiment_Type Study_Experiment::type() const {
  return static_cast< ::variations::Study_Experiment_Type >(type_);
}
inline void Study_Experiment::set_type(::variations::Study_Experiment_Type value) {
  assert(::variations::Study_Experiment_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .variations.Study.Experiment.OverrideUIString override_ui_string = 9;
inline int Study_Experiment::override_ui_string_size() const {
  return override_ui_string_.size();
}
inline void Study_Experiment::clear_override_ui_string() {
  override_ui_string_.Clear();
}
inline const ::variations::Study_Experiment_OverrideUIString& Study_Experiment::override_ui_string(int index) const {
  return override_ui_string_.Get(index);
}
inline ::variations::Study_Experiment_OverrideUIString* Study_Experiment::mutable_override_ui_string(int index) {
  return override_ui_string_.Mutable(index);
}
inline ::variations::Study_Experiment_OverrideUIString* Study_Experiment::add_override_ui_string() {
  return override_ui_string_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::variations::Study_Experiment_OverrideUIString >&
Study_Experiment::override_ui_string() const {
  return override_ui_string_;
}
inline ::google::protobuf::RepeatedPtrField< ::variations::Study_Experiment_OverrideUIString >*
Study_Experiment::mutable_override_ui_string() {
  return &override_ui_string_;
}

// -------------------------------------------------------------------

// Study_Filter

// optional int64 start_date = 1;
inline bool Study_Filter::has_start_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Study_Filter::set_has_start_date() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Study_Filter::clear_has_start_date() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Study_Filter::clear_start_date() {
  start_date_ = GOOGLE_LONGLONG(0);
  clear_has_start_date();
}
inline ::google::protobuf::int64 Study_Filter::start_date() const {
  return start_date_;
}
inline void Study_Filter::set_start_date(::google::protobuf::int64 value) {
  set_has_start_date();
  start_date_ = value;
}

// optional string min_version = 2;
inline bool Study_Filter::has_min_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Study_Filter::set_has_min_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Study_Filter::clear_has_min_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Study_Filter::clear_min_version() {
  if (min_version_ != &::google::protobuf::internal::GetEmptyString()) {
    min_version_->clear();
  }
  clear_has_min_version();
}
inline const ::std::string& Study_Filter::min_version() const {
  return *min_version_;
}
inline void Study_Filter::set_min_version(const ::std::string& value) {
  set_has_min_version();
  if (min_version_ == &::google::protobuf::internal::GetEmptyString()) {
    min_version_ = new ::std::string;
  }
  min_version_->assign(value);
}
inline void Study_Filter::set_min_version(const char* value) {
  set_has_min_version();
  if (min_version_ == &::google::protobuf::internal::GetEmptyString()) {
    min_version_ = new ::std::string;
  }
  min_version_->assign(value);
}
inline void Study_Filter::set_min_version(const char* value, size_t size) {
  set_has_min_version();
  if (min_version_ == &::google::protobuf::internal::GetEmptyString()) {
    min_version_ = new ::std::string;
  }
  min_version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Study_Filter::mutable_min_version() {
  set_has_min_version();
  if (min_version_ == &::google::protobuf::internal::GetEmptyString()) {
    min_version_ = new ::std::string;
  }
  return min_version_;
}
inline ::std::string* Study_Filter::release_min_version() {
  clear_has_min_version();
  if (min_version_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = min_version_;
    min_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void Study_Filter::set_allocated_min_version(::std::string* min_version) {
  if (min_version_ != &::google::protobuf::internal::GetEmptyString()) {
    delete min_version_;
  }
  if (min_version) {
    set_has_min_version();
    min_version_ = min_version;
  } else {
    clear_has_min_version();
    min_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string max_version = 3;
inline bool Study_Filter::has_max_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Study_Filter::set_has_max_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Study_Filter::clear_has_max_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Study_Filter::clear_max_version() {
  if (max_version_ != &::google::protobuf::internal::GetEmptyString()) {
    max_version_->clear();
  }
  clear_has_max_version();
}
inline const ::std::string& Study_Filter::max_version() const {
  return *max_version_;
}
inline void Study_Filter::set_max_version(const ::std::string& value) {
  set_has_max_version();
  if (max_version_ == &::google::protobuf::internal::GetEmptyString()) {
    max_version_ = new ::std::string;
  }
  max_version_->assign(value);
}
inline void Study_Filter::set_max_version(const char* value) {
  set_has_max_version();
  if (max_version_ == &::google::protobuf::internal::GetEmptyString()) {
    max_version_ = new ::std::string;
  }
  max_version_->assign(value);
}
inline void Study_Filter::set_max_version(const char* value, size_t size) {
  set_has_max_version();
  if (max_version_ == &::google::protobuf::internal::GetEmptyString()) {
    max_version_ = new ::std::string;
  }
  max_version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Study_Filter::mutable_max_version() {
  set_has_max_version();
  if (max_version_ == &::google::protobuf::internal::GetEmptyString()) {
    max_version_ = new ::std::string;
  }
  return max_version_;
}
inline ::std::string* Study_Filter::release_max_version() {
  clear_has_max_version();
  if (max_version_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = max_version_;
    max_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void Study_Filter::set_allocated_max_version(::std::string* max_version) {
  if (max_version_ != &::google::protobuf::internal::GetEmptyString()) {
    delete max_version_;
  }
  if (max_version) {
    set_has_max_version();
    max_version_ = max_version;
  } else {
    clear_has_max_version();
    max_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// repeated .variations.Study.Channel channel = 4;
inline int Study_Filter::channel_size() const {
  return channel_.size();
}
inline void Study_Filter::clear_channel() {
  channel_.Clear();
}
inline ::variations::Study_Channel Study_Filter::channel(int index) const {
  return static_cast< ::variations::Study_Channel >(channel_.Get(index));
}
inline void Study_Filter::set_channel(int index, ::variations::Study_Channel value) {
  assert(::variations::Study_Channel_IsValid(value));
  channel_.Set(index, value);
}
inline void Study_Filter::add_channel(::variations::Study_Channel value) {
  assert(::variations::Study_Channel_IsValid(value));
  channel_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
Study_Filter::channel() const {
  return channel_;
}
inline ::google::protobuf::RepeatedField<int>*
Study_Filter::mutable_channel() {
  return &channel_;
}

// repeated .variations.Study.Platform platform = 5;
inline int Study_Filter::platform_size() const {
  return platform_.size();
}
inline void Study_Filter::clear_platform() {
  platform_.Clear();
}
inline ::variations::Study_Platform Study_Filter::platform(int index) const {
  return static_cast< ::variations::Study_Platform >(platform_.Get(index));
}
inline void Study_Filter::set_platform(int index, ::variations::Study_Platform value) {
  assert(::variations::Study_Platform_IsValid(value));
  platform_.Set(index, value);
}
inline void Study_Filter::add_platform(::variations::Study_Platform value) {
  assert(::variations::Study_Platform_IsValid(value));
  platform_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
Study_Filter::platform() const {
  return platform_;
}
inline ::google::protobuf::RepeatedField<int>*
Study_Filter::mutable_platform() {
  return &platform_;
}

// repeated string locale = 6;
inline int Study_Filter::locale_size() const {
  return locale_.size();
}
inline void Study_Filter::clear_locale() {
  locale_.Clear();
}
inline const ::std::string& Study_Filter::locale(int index) const {
  return locale_.Get(index);
}
inline ::std::string* Study_Filter::mutable_locale(int index) {
  return locale_.Mutable(index);
}
inline void Study_Filter::set_locale(int index, const ::std::string& value) {
  locale_.Mutable(index)->assign(value);
}
inline void Study_Filter::set_locale(int index, const char* value) {
  locale_.Mutable(index)->assign(value);
}
inline void Study_Filter::set_locale(int index, const char* value, size_t size) {
  locale_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Study_Filter::add_locale() {
  return locale_.Add();
}
inline void Study_Filter::add_locale(const ::std::string& value) {
  locale_.Add()->assign(value);
}
inline void Study_Filter::add_locale(const char* value) {
  locale_.Add()->assign(value);
}
inline void Study_Filter::add_locale(const char* value, size_t size) {
  locale_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Study_Filter::locale() const {
  return locale_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Study_Filter::mutable_locale() {
  return &locale_;
}

// repeated .variations.Study.FormFactor form_factor = 7;
inline int Study_Filter::form_factor_size() const {
  return form_factor_.size();
}
inline void Study_Filter::clear_form_factor() {
  form_factor_.Clear();
}
inline ::variations::Study_FormFactor Study_Filter::form_factor(int index) const {
  return static_cast< ::variations::Study_FormFactor >(form_factor_.Get(index));
}
inline void Study_Filter::set_form_factor(int index, ::variations::Study_FormFactor value) {
  assert(::variations::Study_FormFactor_IsValid(value));
  form_factor_.Set(index, value);
}
inline void Study_Filter::add_form_factor(::variations::Study_FormFactor value) {
  assert(::variations::Study_FormFactor_IsValid(value));
  form_factor_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
Study_Filter::form_factor() const {
  return form_factor_;
}
inline ::google::protobuf::RepeatedField<int>*
Study_Filter::mutable_form_factor() {
  return &form_factor_;
}

// repeated string hardware_class = 8;
inline int Study_Filter::hardware_class_size() const {
  return hardware_class_.size();
}
inline void Study_Filter::clear_hardware_class() {
  hardware_class_.Clear();
}
inline const ::std::string& Study_Filter::hardware_class(int index) const {
  return hardware_class_.Get(index);
}
inline ::std::string* Study_Filter::mutable_hardware_class(int index) {
  return hardware_class_.Mutable(index);
}
inline void Study_Filter::set_hardware_class(int index, const ::std::string& value) {
  hardware_class_.Mutable(index)->assign(value);
}
inline void Study_Filter::set_hardware_class(int index, const char* value) {
  hardware_class_.Mutable(index)->assign(value);
}
inline void Study_Filter::set_hardware_class(int index, const char* value, size_t size) {
  hardware_class_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Study_Filter::add_hardware_class() {
  return hardware_class_.Add();
}
inline void Study_Filter::add_hardware_class(const ::std::string& value) {
  hardware_class_.Add()->assign(value);
}
inline void Study_Filter::add_hardware_class(const char* value) {
  hardware_class_.Add()->assign(value);
}
inline void Study_Filter::add_hardware_class(const char* value, size_t size) {
  hardware_class_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Study_Filter::hardware_class() const {
  return hardware_class_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Study_Filter::mutable_hardware_class() {
  return &hardware_class_;
}

// repeated string exclude_hardware_class = 9;
inline int Study_Filter::exclude_hardware_class_size() const {
  return exclude_hardware_class_.size();
}
inline void Study_Filter::clear_exclude_hardware_class() {
  exclude_hardware_class_.Clear();
}
inline const ::std::string& Study_Filter::exclude_hardware_class(int index) const {
  return exclude_hardware_class_.Get(index);
}
inline ::std::string* Study_Filter::mutable_exclude_hardware_class(int index) {
  return exclude_hardware_class_.Mutable(index);
}
inline void Study_Filter::set_exclude_hardware_class(int index, const ::std::string& value) {
  exclude_hardware_class_.Mutable(index)->assign(value);
}
inline void Study_Filter::set_exclude_hardware_class(int index, const char* value) {
  exclude_hardware_class_.Mutable(index)->assign(value);
}
inline void Study_Filter::set_exclude_hardware_class(int index, const char* value, size_t size) {
  exclude_hardware_class_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Study_Filter::add_exclude_hardware_class() {
  return exclude_hardware_class_.Add();
}
inline void Study_Filter::add_exclude_hardware_class(const ::std::string& value) {
  exclude_hardware_class_.Add()->assign(value);
}
inline void Study_Filter::add_exclude_hardware_class(const char* value) {
  exclude_hardware_class_.Add()->assign(value);
}
inline void Study_Filter::add_exclude_hardware_class(const char* value, size_t size) {
  exclude_hardware_class_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Study_Filter::exclude_hardware_class() const {
  return exclude_hardware_class_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Study_Filter::mutable_exclude_hardware_class() {
  return &exclude_hardware_class_;
}

// repeated string country = 10;
inline int Study_Filter::country_size() const {
  return country_.size();
}
inline void Study_Filter::clear_country() {
  country_.Clear();
}
inline const ::std::string& Study_Filter::country(int index) const {
  return country_.Get(index);
}
inline ::std::string* Study_Filter::mutable_country(int index) {
  return country_.Mutable(index);
}
inline void Study_Filter::set_country(int index, const ::std::string& value) {
  country_.Mutable(index)->assign(value);
}
inline void Study_Filter::set_country(int index, const char* value) {
  country_.Mutable(index)->assign(value);
}
inline void Study_Filter::set_country(int index, const char* value, size_t size) {
  country_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Study_Filter::add_country() {
  return country_.Add();
}
inline void Study_Filter::add_country(const ::std::string& value) {
  country_.Add()->assign(value);
}
inline void Study_Filter::add_country(const char* value) {
  country_.Add()->assign(value);
}
inline void Study_Filter::add_country(const char* value, size_t size) {
  country_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Study_Filter::country() const {
  return country_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Study_Filter::mutable_country() {
  return &country_;
}

// repeated string exclude_country = 11;
inline int Study_Filter::exclude_country_size() const {
  return exclude_country_.size();
}
inline void Study_Filter::clear_exclude_country() {
  exclude_country_.Clear();
}
inline const ::std::string& Study_Filter::exclude_country(int index) const {
  return exclude_country_.Get(index);
}
inline ::std::string* Study_Filter::mutable_exclude_country(int index) {
  return exclude_country_.Mutable(index);
}
inline void Study_Filter::set_exclude_country(int index, const ::std::string& value) {
  exclude_country_.Mutable(index)->assign(value);
}
inline void Study_Filter::set_exclude_country(int index, const char* value) {
  exclude_country_.Mutable(index)->assign(value);
}
inline void Study_Filter::set_exclude_country(int index, const char* value, size_t size) {
  exclude_country_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Study_Filter::add_exclude_country() {
  return exclude_country_.Add();
}
inline void Study_Filter::add_exclude_country(const ::std::string& value) {
  exclude_country_.Add()->assign(value);
}
inline void Study_Filter::add_exclude_country(const char* value) {
  exclude_country_.Add()->assign(value);
}
inline void Study_Filter::add_exclude_country(const char* value, size_t size) {
  exclude_country_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Study_Filter::exclude_country() const {
  return exclude_country_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Study_Filter::mutable_exclude_country() {
  return &exclude_country_;
}

// -------------------------------------------------------------------

// Study

// required string name = 1;
inline bool Study::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Study::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Study::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Study::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Study::name() const {
  return *name_;
}
inline void Study::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Study::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Study::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Study::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Study::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void Study::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional int64 expiry_date = 3;
inline bool Study::has_expiry_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Study::set_has_expiry_date() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Study::clear_has_expiry_date() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Study::clear_expiry_date() {
  expiry_date_ = GOOGLE_LONGLONG(0);
  clear_has_expiry_date();
}
inline ::google::protobuf::int64 Study::expiry_date() const {
  return expiry_date_;
}
inline void Study::set_expiry_date(::google::protobuf::int64 value) {
  set_has_expiry_date();
  expiry_date_ = value;
}

// optional .variations.Study.Consistency consistency = 7 [default = SESSION];
inline bool Study::has_consistency() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Study::set_has_consistency() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Study::clear_has_consistency() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Study::clear_consistency() {
  consistency_ = 0;
  clear_has_consistency();
}
inline ::variations::Study_Consistency Study::consistency() const {
  return static_cast< ::variations::Study_Consistency >(consistency_);
}
inline void Study::set_consistency(::variations::Study_Consistency value) {
  assert(::variations::Study_Consistency_IsValid(value));
  set_has_consistency();
  consistency_ = value;
}

// optional string default_experiment_name = 8;
inline bool Study::has_default_experiment_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Study::set_has_default_experiment_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Study::clear_has_default_experiment_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Study::clear_default_experiment_name() {
  if (default_experiment_name_ != &::google::protobuf::internal::GetEmptyString()) {
    default_experiment_name_->clear();
  }
  clear_has_default_experiment_name();
}
inline const ::std::string& Study::default_experiment_name() const {
  return *default_experiment_name_;
}
inline void Study::set_default_experiment_name(const ::std::string& value) {
  set_has_default_experiment_name();
  if (default_experiment_name_ == &::google::protobuf::internal::GetEmptyString()) {
    default_experiment_name_ = new ::std::string;
  }
  default_experiment_name_->assign(value);
}
inline void Study::set_default_experiment_name(const char* value) {
  set_has_default_experiment_name();
  if (default_experiment_name_ == &::google::protobuf::internal::GetEmptyString()) {
    default_experiment_name_ = new ::std::string;
  }
  default_experiment_name_->assign(value);
}
inline void Study::set_default_experiment_name(const char* value, size_t size) {
  set_has_default_experiment_name();
  if (default_experiment_name_ == &::google::protobuf::internal::GetEmptyString()) {
    default_experiment_name_ = new ::std::string;
  }
  default_experiment_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Study::mutable_default_experiment_name() {
  set_has_default_experiment_name();
  if (default_experiment_name_ == &::google::protobuf::internal::GetEmptyString()) {
    default_experiment_name_ = new ::std::string;
  }
  return default_experiment_name_;
}
inline ::std::string* Study::release_default_experiment_name() {
  clear_has_default_experiment_name();
  if (default_experiment_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = default_experiment_name_;
    default_experiment_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void Study::set_allocated_default_experiment_name(::std::string* default_experiment_name) {
  if (default_experiment_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete default_experiment_name_;
  }
  if (default_experiment_name) {
    set_has_default_experiment_name();
    default_experiment_name_ = default_experiment_name;
  } else {
    clear_has_default_experiment_name();
    default_experiment_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// repeated .variations.Study.Experiment experiment = 9;
inline int Study::experiment_size() const {
  return experiment_.size();
}
inline void Study::clear_experiment() {
  experiment_.Clear();
}
inline const ::variations::Study_Experiment& Study::experiment(int index) const {
  return experiment_.Get(index);
}
inline ::variations::Study_Experiment* Study::mutable_experiment(int index) {
  return experiment_.Mutable(index);
}
inline ::variations::Study_Experiment* Study::add_experiment() {
  return experiment_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::variations::Study_Experiment >&
Study::experiment() const {
  return experiment_;
}
inline ::google::protobuf::RepeatedPtrField< ::variations::Study_Experiment >*
Study::mutable_experiment() {
  return &experiment_;
}

// optional .variations.Study.Filter filter = 10;
inline bool Study::has_filter() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Study::set_has_filter() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Study::clear_has_filter() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Study::clear_filter() {
  if (filter_ != NULL) filter_->::variations::Study_Filter::Clear();
  clear_has_filter();
}
inline const ::variations::Study_Filter& Study::filter() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return filter_ != NULL ? *filter_ : *default_instance().filter_;
#else
  return filter_ != NULL ? *filter_ : *default_instance_->filter_;
#endif
}
inline ::variations::Study_Filter* Study::mutable_filter() {
  set_has_filter();
  if (filter_ == NULL) filter_ = new ::variations::Study_Filter;
  return filter_;
}
inline ::variations::Study_Filter* Study::release_filter() {
  clear_has_filter();
  ::variations::Study_Filter* temp = filter_;
  filter_ = NULL;
  return temp;
}
inline void Study::set_allocated_filter(::variations::Study_Filter* filter) {
  delete filter_;
  filter_ = filter;
  if (filter) {
    set_has_filter();
  } else {
    clear_has_filter();
  }
}

// optional uint32 randomization_seed = 11;
inline bool Study::has_randomization_seed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Study::set_has_randomization_seed() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Study::clear_has_randomization_seed() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Study::clear_randomization_seed() {
  randomization_seed_ = 0u;
  clear_has_randomization_seed();
}
inline ::google::protobuf::uint32 Study::randomization_seed() const {
  return randomization_seed_;
}
inline void Study::set_randomization_seed(::google::protobuf::uint32 value) {
  set_has_randomization_seed();
  randomization_seed_ = value;
}

// optional .variations.Study.ActivationType activation_type = 12;
inline bool Study::has_activation_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Study::set_has_activation_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Study::clear_has_activation_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Study::clear_activation_type() {
  activation_type_ = 0;
  clear_has_activation_type();
}
inline ::variations::Study_ActivationType Study::activation_type() const {
  return static_cast< ::variations::Study_ActivationType >(activation_type_);
}
inline void Study::set_activation_type(::variations::Study_ActivationType value) {
  assert(::variations::Study_ActivationType_IsValid(value));
  set_has_activation_type();
  activation_type_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace variations

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_study_2eproto__INCLUDED
