// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_commands.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client_commands.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {

void protobuf_ShutdownFile_client_5fcommands_2eproto() {
  delete CustomNudgeDelay::default_instance_;
  delete ClientCommand::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_client_5fcommands_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_client_5fcommands_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  CustomNudgeDelay::default_instance_ = new CustomNudgeDelay();
  ClientCommand::default_instance_ = new ClientCommand();
  CustomNudgeDelay::default_instance_->InitAsDefaultInstance();
  ClientCommand::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_5fcommands_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_client_5fcommands_2eproto_once_);
void protobuf_AddDesc_client_5fcommands_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_client_5fcommands_2eproto_once_,
                 &protobuf_AddDesc_client_5fcommands_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_5fcommands_2eproto {
  StaticDescriptorInitializer_client_5fcommands_2eproto() {
    protobuf_AddDesc_client_5fcommands_2eproto();
  }
} static_descriptor_initializer_client_5fcommands_2eproto_;
#endif

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CustomNudgeDelay::kDatatypeIdFieldNumber;
const int CustomNudgeDelay::kDelayMsFieldNumber;
#endif  // !_MSC_VER

CustomNudgeDelay::CustomNudgeDelay()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CustomNudgeDelay::InitAsDefaultInstance() {
}

CustomNudgeDelay::CustomNudgeDelay(const CustomNudgeDelay& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CustomNudgeDelay::SharedCtor() {
  _cached_size_ = 0;
  datatype_id_ = 0;
  delay_ms_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CustomNudgeDelay::~CustomNudgeDelay() {
  SharedDtor();
}

void CustomNudgeDelay::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CustomNudgeDelay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CustomNudgeDelay& CustomNudgeDelay::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_client_5fcommands_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_client_5fcommands_2eproto();
#endif
  return *default_instance_;
}

CustomNudgeDelay* CustomNudgeDelay::default_instance_ = NULL;

CustomNudgeDelay* CustomNudgeDelay::New() const {
  return new CustomNudgeDelay;
}

void CustomNudgeDelay::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    datatype_id_ = 0;
    delay_ms_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CustomNudgeDelay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 datatype_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datatype_id_)));
          set_has_datatype_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_delay_ms;
        break;
      }

      // optional int32 delay_ms = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delay_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delay_ms_)));
          set_has_delay_ms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CustomNudgeDelay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 datatype_id = 1;
  if (has_datatype_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->datatype_id(), output);
  }

  // optional int32 delay_ms = 2;
  if (has_delay_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delay_ms(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int CustomNudgeDelay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 datatype_id = 1;
    if (has_datatype_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->datatype_id());
    }

    // optional int32 delay_ms = 2;
    if (has_delay_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delay_ms());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CustomNudgeDelay::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CustomNudgeDelay*>(&from));
}

void CustomNudgeDelay::MergeFrom(const CustomNudgeDelay& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_datatype_id()) {
      set_datatype_id(from.datatype_id());
    }
    if (from.has_delay_ms()) {
      set_delay_ms(from.delay_ms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CustomNudgeDelay::CopyFrom(const CustomNudgeDelay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomNudgeDelay::IsInitialized() const {

  return true;
}

void CustomNudgeDelay::Swap(CustomNudgeDelay* other) {
  if (other != this) {
    std::swap(datatype_id_, other->datatype_id_);
    std::swap(delay_ms_, other->delay_ms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CustomNudgeDelay::GetTypeName() const {
  return "sync_pb.CustomNudgeDelay";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientCommand::kSetSyncPollIntervalFieldNumber;
const int ClientCommand::kSetSyncLongPollIntervalFieldNumber;
const int ClientCommand::kMaxCommitBatchSizeFieldNumber;
const int ClientCommand::kSessionsCommitDelaySecondsFieldNumber;
const int ClientCommand::kThrottleDelaySecondsFieldNumber;
const int ClientCommand::kClientInvalidationHintBufferSizeFieldNumber;
const int ClientCommand::kGuRetryDelaySecondsFieldNumber;
const int ClientCommand::kCustomNudgeDelaysFieldNumber;
#endif  // !_MSC_VER

ClientCommand::ClientCommand()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ClientCommand::InitAsDefaultInstance() {
}

ClientCommand::ClientCommand(const ClientCommand& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ClientCommand::SharedCtor() {
  _cached_size_ = 0;
  set_sync_poll_interval_ = 0;
  set_sync_long_poll_interval_ = 0;
  max_commit_batch_size_ = 0;
  sessions_commit_delay_seconds_ = 0;
  throttle_delay_seconds_ = 0;
  client_invalidation_hint_buffer_size_ = 0;
  gu_retry_delay_seconds_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientCommand::~ClientCommand() {
  SharedDtor();
}

void ClientCommand::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ClientCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientCommand& ClientCommand::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_client_5fcommands_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_client_5fcommands_2eproto();
#endif
  return *default_instance_;
}

ClientCommand* ClientCommand::default_instance_ = NULL;

ClientCommand* ClientCommand::New() const {
  return new ClientCommand;
}

void ClientCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    set_sync_poll_interval_ = 0;
    set_sync_long_poll_interval_ = 0;
    max_commit_batch_size_ = 0;
    sessions_commit_delay_seconds_ = 0;
    throttle_delay_seconds_ = 0;
    client_invalidation_hint_buffer_size_ = 0;
    gu_retry_delay_seconds_ = 0;
  }
  custom_nudge_delays_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 set_sync_poll_interval = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_sync_poll_interval_)));
          set_has_set_sync_poll_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_set_sync_long_poll_interval;
        break;
      }

      // optional int32 set_sync_long_poll_interval = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_set_sync_long_poll_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_sync_long_poll_interval_)));
          set_has_set_sync_long_poll_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_commit_batch_size;
        break;
      }

      // optional int32 max_commit_batch_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_commit_batch_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_commit_batch_size_)));
          set_has_max_commit_batch_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sessions_commit_delay_seconds;
        break;
      }

      // optional int32 sessions_commit_delay_seconds = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sessions_commit_delay_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessions_commit_delay_seconds_)));
          set_has_sessions_commit_delay_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_throttle_delay_seconds;
        break;
      }

      // optional int32 throttle_delay_seconds = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_throttle_delay_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &throttle_delay_seconds_)));
          set_has_throttle_delay_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_client_invalidation_hint_buffer_size;
        break;
      }

      // optional int32 client_invalidation_hint_buffer_size = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_invalidation_hint_buffer_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_invalidation_hint_buffer_size_)));
          set_has_client_invalidation_hint_buffer_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gu_retry_delay_seconds;
        break;
      }

      // optional int32 gu_retry_delay_seconds = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gu_retry_delay_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gu_retry_delay_seconds_)));
          set_has_gu_retry_delay_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_custom_nudge_delays;
        break;
      }

      // repeated .sync_pb.CustomNudgeDelay custom_nudge_delays = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_custom_nudge_delays:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_custom_nudge_delays()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_custom_nudge_delays;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 set_sync_poll_interval = 1;
  if (has_set_sync_poll_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->set_sync_poll_interval(), output);
  }

  // optional int32 set_sync_long_poll_interval = 2;
  if (has_set_sync_long_poll_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->set_sync_long_poll_interval(), output);
  }

  // optional int32 max_commit_batch_size = 3;
  if (has_max_commit_batch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_commit_batch_size(), output);
  }

  // optional int32 sessions_commit_delay_seconds = 4;
  if (has_sessions_commit_delay_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sessions_commit_delay_seconds(), output);
  }

  // optional int32 throttle_delay_seconds = 5;
  if (has_throttle_delay_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->throttle_delay_seconds(), output);
  }

  // optional int32 client_invalidation_hint_buffer_size = 6;
  if (has_client_invalidation_hint_buffer_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->client_invalidation_hint_buffer_size(), output);
  }

  // optional int32 gu_retry_delay_seconds = 7;
  if (has_gu_retry_delay_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gu_retry_delay_seconds(), output);
  }

  // repeated .sync_pb.CustomNudgeDelay custom_nudge_delays = 8;
  for (int i = 0; i < this->custom_nudge_delays_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->custom_nudge_delays(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int ClientCommand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 set_sync_poll_interval = 1;
    if (has_set_sync_poll_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->set_sync_poll_interval());
    }

    // optional int32 set_sync_long_poll_interval = 2;
    if (has_set_sync_long_poll_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->set_sync_long_poll_interval());
    }

    // optional int32 max_commit_batch_size = 3;
    if (has_max_commit_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_commit_batch_size());
    }

    // optional int32 sessions_commit_delay_seconds = 4;
    if (has_sessions_commit_delay_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sessions_commit_delay_seconds());
    }

    // optional int32 throttle_delay_seconds = 5;
    if (has_throttle_delay_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->throttle_delay_seconds());
    }

    // optional int32 client_invalidation_hint_buffer_size = 6;
    if (has_client_invalidation_hint_buffer_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_invalidation_hint_buffer_size());
    }

    // optional int32 gu_retry_delay_seconds = 7;
    if (has_gu_retry_delay_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gu_retry_delay_seconds());
    }

  }
  // repeated .sync_pb.CustomNudgeDelay custom_nudge_delays = 8;
  total_size += 1 * this->custom_nudge_delays_size();
  for (int i = 0; i < this->custom_nudge_delays_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->custom_nudge_delays(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientCommand::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientCommand*>(&from));
}

void ClientCommand::MergeFrom(const ClientCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  custom_nudge_delays_.MergeFrom(from.custom_nudge_delays_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_set_sync_poll_interval()) {
      set_set_sync_poll_interval(from.set_sync_poll_interval());
    }
    if (from.has_set_sync_long_poll_interval()) {
      set_set_sync_long_poll_interval(from.set_sync_long_poll_interval());
    }
    if (from.has_max_commit_batch_size()) {
      set_max_commit_batch_size(from.max_commit_batch_size());
    }
    if (from.has_sessions_commit_delay_seconds()) {
      set_sessions_commit_delay_seconds(from.sessions_commit_delay_seconds());
    }
    if (from.has_throttle_delay_seconds()) {
      set_throttle_delay_seconds(from.throttle_delay_seconds());
    }
    if (from.has_client_invalidation_hint_buffer_size()) {
      set_client_invalidation_hint_buffer_size(from.client_invalidation_hint_buffer_size());
    }
    if (from.has_gu_retry_delay_seconds()) {
      set_gu_retry_delay_seconds(from.gu_retry_delay_seconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientCommand::CopyFrom(const ClientCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientCommand::IsInitialized() const {

  return true;
}

void ClientCommand::Swap(ClientCommand* other) {
  if (other != this) {
    std::swap(set_sync_poll_interval_, other->set_sync_poll_interval_);
    std::swap(set_sync_long_poll_interval_, other->set_sync_long_poll_interval_);
    std::swap(max_commit_batch_size_, other->max_commit_batch_size_);
    std::swap(sessions_commit_delay_seconds_, other->sessions_commit_delay_seconds_);
    std::swap(throttle_delay_seconds_, other->throttle_delay_seconds_);
    std::swap(client_invalidation_hint_buffer_size_, other->client_invalidation_hint_buffer_size_);
    std::swap(gu_retry_delay_seconds_, other->gu_retry_delay_seconds_);
    custom_nudge_delays_.Swap(&other->custom_nudge_delays_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClientCommand::GetTypeName() const {
  return "sync_pb.ClientCommand";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)
