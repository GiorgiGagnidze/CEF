// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autofill_specifics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "autofill_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {

void protobuf_ShutdownFile_autofill_5fspecifics_2eproto() {
  delete AutofillProfileSpecifics::default_instance_;
  delete AutofillSpecifics::default_instance_;
  delete WalletMaskedCreditCard::default_instance_;
  delete WalletPostalAddress::default_instance_;
  delete AutofillWalletSpecifics::default_instance_;
  delete WalletMetadataSpecifics::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_autofill_5fspecifics_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_autofill_5fspecifics_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  AutofillProfileSpecifics::default_instance_ = new AutofillProfileSpecifics();
  AutofillSpecifics::default_instance_ = new AutofillSpecifics();
  WalletMaskedCreditCard::default_instance_ = new WalletMaskedCreditCard();
  WalletPostalAddress::default_instance_ = new WalletPostalAddress();
  AutofillWalletSpecifics::default_instance_ = new AutofillWalletSpecifics();
  WalletMetadataSpecifics::default_instance_ = new WalletMetadataSpecifics();
  AutofillProfileSpecifics::default_instance_->InitAsDefaultInstance();
  AutofillSpecifics::default_instance_->InitAsDefaultInstance();
  WalletMaskedCreditCard::default_instance_->InitAsDefaultInstance();
  WalletPostalAddress::default_instance_->InitAsDefaultInstance();
  AutofillWalletSpecifics::default_instance_->InitAsDefaultInstance();
  WalletMetadataSpecifics::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_autofill_5fspecifics_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_autofill_5fspecifics_2eproto_once_);
void protobuf_AddDesc_autofill_5fspecifics_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_autofill_5fspecifics_2eproto_once_,
                 &protobuf_AddDesc_autofill_5fspecifics_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_autofill_5fspecifics_2eproto {
  StaticDescriptorInitializer_autofill_5fspecifics_2eproto() {
    protobuf_AddDesc_autofill_5fspecifics_2eproto();
  }
} static_descriptor_initializer_autofill_5fspecifics_2eproto_;
#endif

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutofillProfileSpecifics::kGuidFieldNumber;
const int AutofillProfileSpecifics::kOriginFieldNumber;
const int AutofillProfileSpecifics::kUseCountFieldNumber;
const int AutofillProfileSpecifics::kUseDateFieldNumber;
const int AutofillProfileSpecifics::kNameFirstFieldNumber;
const int AutofillProfileSpecifics::kNameMiddleFieldNumber;
const int AutofillProfileSpecifics::kNameLastFieldNumber;
const int AutofillProfileSpecifics::kNameFullFieldNumber;
const int AutofillProfileSpecifics::kEmailAddressFieldNumber;
const int AutofillProfileSpecifics::kCompanyNameFieldNumber;
const int AutofillProfileSpecifics::kAddressHomeLine1FieldNumber;
const int AutofillProfileSpecifics::kAddressHomeLine2FieldNumber;
const int AutofillProfileSpecifics::kAddressHomeCityFieldNumber;
const int AutofillProfileSpecifics::kAddressHomeStateFieldNumber;
const int AutofillProfileSpecifics::kAddressHomeZipFieldNumber;
const int AutofillProfileSpecifics::kAddressHomeCountryFieldNumber;
const int AutofillProfileSpecifics::kAddressHomeStreetAddressFieldNumber;
const int AutofillProfileSpecifics::kAddressHomeSortingCodeFieldNumber;
const int AutofillProfileSpecifics::kAddressHomeDependentLocalityFieldNumber;
const int AutofillProfileSpecifics::kAddressHomeLanguageCodeFieldNumber;
const int AutofillProfileSpecifics::kPhoneHomeWholeNumberFieldNumber;
const int AutofillProfileSpecifics::kLabelFieldNumber;
const int AutofillProfileSpecifics::kPhoneFaxWholeNumberFieldNumber;
#endif  // !_MSC_VER

AutofillProfileSpecifics::AutofillProfileSpecifics()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AutofillProfileSpecifics::InitAsDefaultInstance() {
}

AutofillProfileSpecifics::AutofillProfileSpecifics(const AutofillProfileSpecifics& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AutofillProfileSpecifics::SharedCtor() {
  _cached_size_ = 0;
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  origin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  use_count_ = GOOGLE_LONGLONG(0);
  use_date_ = GOOGLE_LONGLONG(0);
  company_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  address_home_line1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  address_home_line2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  address_home_city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  address_home_state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  address_home_zip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  address_home_country_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  address_home_street_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  address_home_sorting_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  address_home_dependent_locality_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  address_home_language_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  phone_fax_whole_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutofillProfileSpecifics::~AutofillProfileSpecifics() {
  SharedDtor();
}

void AutofillProfileSpecifics::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::GetEmptyString()) {
    delete guid_;
  }
  if (origin_ != &::google::protobuf::internal::GetEmptyString()) {
    delete origin_;
  }
  if (company_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete company_name_;
  }
  if (address_home_line1_ != &::google::protobuf::internal::GetEmptyString()) {
    delete address_home_line1_;
  }
  if (address_home_line2_ != &::google::protobuf::internal::GetEmptyString()) {
    delete address_home_line2_;
  }
  if (address_home_city_ != &::google::protobuf::internal::GetEmptyString()) {
    delete address_home_city_;
  }
  if (address_home_state_ != &::google::protobuf::internal::GetEmptyString()) {
    delete address_home_state_;
  }
  if (address_home_zip_ != &::google::protobuf::internal::GetEmptyString()) {
    delete address_home_zip_;
  }
  if (address_home_country_ != &::google::protobuf::internal::GetEmptyString()) {
    delete address_home_country_;
  }
  if (address_home_street_address_ != &::google::protobuf::internal::GetEmptyString()) {
    delete address_home_street_address_;
  }
  if (address_home_sorting_code_ != &::google::protobuf::internal::GetEmptyString()) {
    delete address_home_sorting_code_;
  }
  if (address_home_dependent_locality_ != &::google::protobuf::internal::GetEmptyString()) {
    delete address_home_dependent_locality_;
  }
  if (address_home_language_code_ != &::google::protobuf::internal::GetEmptyString()) {
    delete address_home_language_code_;
  }
  if (label_ != &::google::protobuf::internal::GetEmptyString()) {
    delete label_;
  }
  if (phone_fax_whole_number_ != &::google::protobuf::internal::GetEmptyString()) {
    delete phone_fax_whole_number_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AutofillProfileSpecifics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AutofillProfileSpecifics& AutofillProfileSpecifics::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_autofill_5fspecifics_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_autofill_5fspecifics_2eproto();
#endif
  return *default_instance_;
}

AutofillProfileSpecifics* AutofillProfileSpecifics::default_instance_ = NULL;

AutofillProfileSpecifics* AutofillProfileSpecifics::New() const {
  return new AutofillProfileSpecifics;
}

void AutofillProfileSpecifics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::GetEmptyString()) {
        guid_->clear();
      }
    }
    if (has_origin()) {
      if (origin_ != &::google::protobuf::internal::GetEmptyString()) {
        origin_->clear();
      }
    }
    use_count_ = GOOGLE_LONGLONG(0);
    use_date_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (has_company_name()) {
      if (company_name_ != &::google::protobuf::internal::GetEmptyString()) {
        company_name_->clear();
      }
    }
    if (has_address_home_line1()) {
      if (address_home_line1_ != &::google::protobuf::internal::GetEmptyString()) {
        address_home_line1_->clear();
      }
    }
    if (has_address_home_line2()) {
      if (address_home_line2_ != &::google::protobuf::internal::GetEmptyString()) {
        address_home_line2_->clear();
      }
    }
    if (has_address_home_city()) {
      if (address_home_city_ != &::google::protobuf::internal::GetEmptyString()) {
        address_home_city_->clear();
      }
    }
    if (has_address_home_state()) {
      if (address_home_state_ != &::google::protobuf::internal::GetEmptyString()) {
        address_home_state_->clear();
      }
    }
    if (has_address_home_zip()) {
      if (address_home_zip_ != &::google::protobuf::internal::GetEmptyString()) {
        address_home_zip_->clear();
      }
    }
    if (has_address_home_country()) {
      if (address_home_country_ != &::google::protobuf::internal::GetEmptyString()) {
        address_home_country_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_address_home_street_address()) {
      if (address_home_street_address_ != &::google::protobuf::internal::GetEmptyString()) {
        address_home_street_address_->clear();
      }
    }
    if (has_address_home_sorting_code()) {
      if (address_home_sorting_code_ != &::google::protobuf::internal::GetEmptyString()) {
        address_home_sorting_code_->clear();
      }
    }
    if (has_address_home_dependent_locality()) {
      if (address_home_dependent_locality_ != &::google::protobuf::internal::GetEmptyString()) {
        address_home_dependent_locality_->clear();
      }
    }
    if (has_address_home_language_code()) {
      if (address_home_language_code_ != &::google::protobuf::internal::GetEmptyString()) {
        address_home_language_code_->clear();
      }
    }
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::GetEmptyString()) {
        label_->clear();
      }
    }
    if (has_phone_fax_whole_number()) {
      if (phone_fax_whole_number_ != &::google::protobuf::internal::GetEmptyString()) {
        phone_fax_whole_number_->clear();
      }
    }
  }
  name_first_.Clear();
  name_middle_.Clear();
  name_last_.Clear();
  name_full_.Clear();
  email_address_.Clear();
  phone_home_whole_number_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AutofillProfileSpecifics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string label = 1 [deprecated = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name_first;
        break;
      }

      // repeated string name_first = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name_first:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_name_first()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name_first;
        if (input->ExpectTag(26)) goto parse_name_middle;
        break;
      }

      // repeated string name_middle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name_middle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_name_middle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name_middle;
        if (input->ExpectTag(34)) goto parse_name_last;
        break;
      }

      // repeated string name_last = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name_last:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_name_last()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name_last;
        if (input->ExpectTag(42)) goto parse_email_address;
        break;
      }

      // repeated string email_address = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_email_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_email_address;
        if (input->ExpectTag(50)) goto parse_company_name;
        break;
      }

      // optional string company_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_company_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_company_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_address_home_line1;
        break;
      }

      // optional string address_home_line1 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address_home_line1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address_home_line1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_address_home_line2;
        break;
      }

      // optional string address_home_line2 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address_home_line2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address_home_line2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_address_home_city;
        break;
      }

      // optional string address_home_city = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address_home_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address_home_city()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_address_home_state;
        break;
      }

      // optional string address_home_state = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address_home_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address_home_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_address_home_zip;
        break;
      }

      // optional string address_home_zip = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address_home_zip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address_home_zip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_address_home_country;
        break;
      }

      // optional string address_home_country = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address_home_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address_home_country()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_phone_home_whole_number;
        break;
      }

      // repeated string phone_home_whole_number = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone_home_whole_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_phone_home_whole_number()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_phone_home_whole_number;
        if (input->ExpectTag(114)) goto parse_phone_fax_whole_number;
        break;
      }

      // optional string phone_fax_whole_number = 14 [deprecated = true];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone_fax_whole_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone_fax_whole_number()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_guid;
        break;
      }

      // optional string guid = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_origin;
        break;
      }

      // optional string origin = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_origin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_origin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_address_home_street_address;
        break;
      }

      // optional string address_home_street_address = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address_home_street_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address_home_street_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_address_home_sorting_code;
        break;
      }

      // optional string address_home_sorting_code = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address_home_sorting_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address_home_sorting_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_address_home_dependent_locality;
        break;
      }

      // optional string address_home_dependent_locality = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address_home_dependent_locality:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address_home_dependent_locality()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_address_home_language_code;
        break;
      }

      // optional string address_home_language_code = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address_home_language_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address_home_language_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_name_full;
        break;
      }

      // repeated string name_full = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name_full:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_name_full()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_name_full;
        if (input->ExpectTag(176)) goto parse_use_count;
        break;
      }

      // optional int64 use_count = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &use_count_)));
          set_has_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_use_date;
        break;
      }

      // optional int64 use_date = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &use_date_)));
          set_has_use_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AutofillProfileSpecifics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string label = 1 [deprecated = true];
  if (has_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->label(), output);
  }

  // repeated string name_first = 2;
  for (int i = 0; i < this->name_first_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name_first(i), output);
  }

  // repeated string name_middle = 3;
  for (int i = 0; i < this->name_middle_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name_middle(i), output);
  }

  // repeated string name_last = 4;
  for (int i = 0; i < this->name_last_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name_last(i), output);
  }

  // repeated string email_address = 5;
  for (int i = 0; i < this->email_address_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->email_address(i), output);
  }

  // optional string company_name = 6;
  if (has_company_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->company_name(), output);
  }

  // optional string address_home_line1 = 7;
  if (has_address_home_line1()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->address_home_line1(), output);
  }

  // optional string address_home_line2 = 8;
  if (has_address_home_line2()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->address_home_line2(), output);
  }

  // optional string address_home_city = 9;
  if (has_address_home_city()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->address_home_city(), output);
  }

  // optional string address_home_state = 10;
  if (has_address_home_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->address_home_state(), output);
  }

  // optional string address_home_zip = 11;
  if (has_address_home_zip()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->address_home_zip(), output);
  }

  // optional string address_home_country = 12;
  if (has_address_home_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->address_home_country(), output);
  }

  // repeated string phone_home_whole_number = 13;
  for (int i = 0; i < this->phone_home_whole_number_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->phone_home_whole_number(i), output);
  }

  // optional string phone_fax_whole_number = 14 [deprecated = true];
  if (has_phone_fax_whole_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->phone_fax_whole_number(), output);
  }

  // optional string guid = 15;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->guid(), output);
  }

  // optional string origin = 16;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->origin(), output);
  }

  // optional string address_home_street_address = 17;
  if (has_address_home_street_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->address_home_street_address(), output);
  }

  // optional string address_home_sorting_code = 18;
  if (has_address_home_sorting_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->address_home_sorting_code(), output);
  }

  // optional string address_home_dependent_locality = 19;
  if (has_address_home_dependent_locality()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->address_home_dependent_locality(), output);
  }

  // optional string address_home_language_code = 20;
  if (has_address_home_language_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->address_home_language_code(), output);
  }

  // repeated string name_full = 21;
  for (int i = 0; i < this->name_full_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->name_full(i), output);
  }

  // optional int64 use_count = 22;
  if (has_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->use_count(), output);
  }

  // optional int64 use_date = 23;
  if (has_use_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->use_date(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int AutofillProfileSpecifics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string guid = 15;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

    // optional string origin = 16;
    if (has_origin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->origin());
    }

    // optional int64 use_count = 22;
    if (has_use_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->use_count());
    }

    // optional int64 use_date = 23;
    if (has_use_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->use_date());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional string company_name = 6;
    if (has_company_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->company_name());
    }

    // optional string address_home_line1 = 7;
    if (has_address_home_line1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address_home_line1());
    }

    // optional string address_home_line2 = 8;
    if (has_address_home_line2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address_home_line2());
    }

    // optional string address_home_city = 9;
    if (has_address_home_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address_home_city());
    }

    // optional string address_home_state = 10;
    if (has_address_home_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address_home_state());
    }

    // optional string address_home_zip = 11;
    if (has_address_home_zip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address_home_zip());
    }

    // optional string address_home_country = 12;
    if (has_address_home_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address_home_country());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string address_home_street_address = 17;
    if (has_address_home_street_address()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address_home_street_address());
    }

    // optional string address_home_sorting_code = 18;
    if (has_address_home_sorting_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address_home_sorting_code());
    }

    // optional string address_home_dependent_locality = 19;
    if (has_address_home_dependent_locality()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address_home_dependent_locality());
    }

    // optional string address_home_language_code = 20;
    if (has_address_home_language_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address_home_language_code());
    }

    // optional string label = 1 [deprecated = true];
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional string phone_fax_whole_number = 14 [deprecated = true];
    if (has_phone_fax_whole_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone_fax_whole_number());
    }

  }
  // repeated string name_first = 2;
  total_size += 1 * this->name_first_size();
  for (int i = 0; i < this->name_first_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name_first(i));
  }

  // repeated string name_middle = 3;
  total_size += 1 * this->name_middle_size();
  for (int i = 0; i < this->name_middle_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name_middle(i));
  }

  // repeated string name_last = 4;
  total_size += 1 * this->name_last_size();
  for (int i = 0; i < this->name_last_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name_last(i));
  }

  // repeated string name_full = 21;
  total_size += 2 * this->name_full_size();
  for (int i = 0; i < this->name_full_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name_full(i));
  }

  // repeated string email_address = 5;
  total_size += 1 * this->email_address_size();
  for (int i = 0; i < this->email_address_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->email_address(i));
  }

  // repeated string phone_home_whole_number = 13;
  total_size += 1 * this->phone_home_whole_number_size();
  for (int i = 0; i < this->phone_home_whole_number_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->phone_home_whole_number(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutofillProfileSpecifics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AutofillProfileSpecifics*>(&from));
}

void AutofillProfileSpecifics::MergeFrom(const AutofillProfileSpecifics& from) {
  GOOGLE_CHECK_NE(&from, this);
  name_first_.MergeFrom(from.name_first_);
  name_middle_.MergeFrom(from.name_middle_);
  name_last_.MergeFrom(from.name_last_);
  name_full_.MergeFrom(from.name_full_);
  email_address_.MergeFrom(from.email_address_);
  phone_home_whole_number_.MergeFrom(from.phone_home_whole_number_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_origin()) {
      set_origin(from.origin());
    }
    if (from.has_use_count()) {
      set_use_count(from.use_count());
    }
    if (from.has_use_date()) {
      set_use_date(from.use_date());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_company_name()) {
      set_company_name(from.company_name());
    }
    if (from.has_address_home_line1()) {
      set_address_home_line1(from.address_home_line1());
    }
    if (from.has_address_home_line2()) {
      set_address_home_line2(from.address_home_line2());
    }
    if (from.has_address_home_city()) {
      set_address_home_city(from.address_home_city());
    }
    if (from.has_address_home_state()) {
      set_address_home_state(from.address_home_state());
    }
    if (from.has_address_home_zip()) {
      set_address_home_zip(from.address_home_zip());
    }
    if (from.has_address_home_country()) {
      set_address_home_country(from.address_home_country());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_address_home_street_address()) {
      set_address_home_street_address(from.address_home_street_address());
    }
    if (from.has_address_home_sorting_code()) {
      set_address_home_sorting_code(from.address_home_sorting_code());
    }
    if (from.has_address_home_dependent_locality()) {
      set_address_home_dependent_locality(from.address_home_dependent_locality());
    }
    if (from.has_address_home_language_code()) {
      set_address_home_language_code(from.address_home_language_code());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_phone_fax_whole_number()) {
      set_phone_fax_whole_number(from.phone_fax_whole_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AutofillProfileSpecifics::CopyFrom(const AutofillProfileSpecifics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillProfileSpecifics::IsInitialized() const {

  return true;
}

void AutofillProfileSpecifics::Swap(AutofillProfileSpecifics* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(origin_, other->origin_);
    std::swap(use_count_, other->use_count_);
    std::swap(use_date_, other->use_date_);
    name_first_.Swap(&other->name_first_);
    name_middle_.Swap(&other->name_middle_);
    name_last_.Swap(&other->name_last_);
    name_full_.Swap(&other->name_full_);
    email_address_.Swap(&other->email_address_);
    std::swap(company_name_, other->company_name_);
    std::swap(address_home_line1_, other->address_home_line1_);
    std::swap(address_home_line2_, other->address_home_line2_);
    std::swap(address_home_city_, other->address_home_city_);
    std::swap(address_home_state_, other->address_home_state_);
    std::swap(address_home_zip_, other->address_home_zip_);
    std::swap(address_home_country_, other->address_home_country_);
    std::swap(address_home_street_address_, other->address_home_street_address_);
    std::swap(address_home_sorting_code_, other->address_home_sorting_code_);
    std::swap(address_home_dependent_locality_, other->address_home_dependent_locality_);
    std::swap(address_home_language_code_, other->address_home_language_code_);
    phone_home_whole_number_.Swap(&other->phone_home_whole_number_);
    std::swap(label_, other->label_);
    std::swap(phone_fax_whole_number_, other->phone_fax_whole_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AutofillProfileSpecifics::GetTypeName() const {
  return "sync_pb.AutofillProfileSpecifics";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutofillSpecifics::kNameFieldNumber;
const int AutofillSpecifics::kValueFieldNumber;
const int AutofillSpecifics::kUsageTimestampFieldNumber;
const int AutofillSpecifics::kProfileFieldNumber;
#endif  // !_MSC_VER

AutofillSpecifics::AutofillSpecifics()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AutofillSpecifics::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  profile_ = const_cast< ::sync_pb::AutofillProfileSpecifics*>(
      ::sync_pb::AutofillProfileSpecifics::internal_default_instance());
#else
  profile_ = const_cast< ::sync_pb::AutofillProfileSpecifics*>(&::sync_pb::AutofillProfileSpecifics::default_instance());
#endif
}

AutofillSpecifics::AutofillSpecifics(const AutofillSpecifics& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AutofillSpecifics::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  profile_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutofillSpecifics::~AutofillSpecifics() {
  SharedDtor();
}

void AutofillSpecifics::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyString()) {
    delete value_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete profile_;
  }
}

void AutofillSpecifics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AutofillSpecifics& AutofillSpecifics::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_autofill_5fspecifics_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_autofill_5fspecifics_2eproto();
#endif
  return *default_instance_;
}

AutofillSpecifics* AutofillSpecifics::default_instance_ = NULL;

AutofillSpecifics* AutofillSpecifics::New() const {
  return new AutofillSpecifics;
}

void AutofillSpecifics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyString()) {
        value_->clear();
      }
    }
    if (has_profile()) {
      if (profile_ != NULL) profile_->::sync_pb::AutofillProfileSpecifics::Clear();
    }
  }
  usage_timestamp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AutofillSpecifics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usage_timestamp;
        break;
      }

      // repeated int64 usage_timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usage_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_usage_timestamp())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_usage_timestamp())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usage_timestamp;
        if (input->ExpectTag(34)) goto parse_profile;
        break;
      }

      // optional .sync_pb.AutofillProfileSpecifics profile = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_profile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_profile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AutofillSpecifics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  // repeated int64 usage_timestamp = 3;
  for (int i = 0; i < this->usage_timestamp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->usage_timestamp(i), output);
  }

  // optional .sync_pb.AutofillProfileSpecifics profile = 4;
  if (has_profile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->profile(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int AutofillSpecifics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional .sync_pb.AutofillProfileSpecifics profile = 4;
    if (has_profile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->profile());
    }

  }
  // repeated int64 usage_timestamp = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->usage_timestamp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->usage_timestamp(i));
    }
    total_size += 1 * this->usage_timestamp_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutofillSpecifics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AutofillSpecifics*>(&from));
}

void AutofillSpecifics::MergeFrom(const AutofillSpecifics& from) {
  GOOGLE_CHECK_NE(&from, this);
  usage_timestamp_.MergeFrom(from.usage_timestamp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_profile()) {
      mutable_profile()->::sync_pb::AutofillProfileSpecifics::MergeFrom(from.profile());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AutofillSpecifics::CopyFrom(const AutofillSpecifics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillSpecifics::IsInitialized() const {

  return true;
}

void AutofillSpecifics::Swap(AutofillSpecifics* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    usage_timestamp_.Swap(&other->usage_timestamp_);
    std::swap(profile_, other->profile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AutofillSpecifics::GetTypeName() const {
  return "sync_pb.AutofillSpecifics";
}


// ===================================================================

bool WalletMaskedCreditCard_WalletCardStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const WalletMaskedCreditCard_WalletCardStatus WalletMaskedCreditCard::VALID;
const WalletMaskedCreditCard_WalletCardStatus WalletMaskedCreditCard::EXPIRED;
const WalletMaskedCreditCard_WalletCardStatus WalletMaskedCreditCard::WalletCardStatus_MIN;
const WalletMaskedCreditCard_WalletCardStatus WalletMaskedCreditCard::WalletCardStatus_MAX;
const int WalletMaskedCreditCard::WalletCardStatus_ARRAYSIZE;
#endif  // _MSC_VER
bool WalletMaskedCreditCard_WalletCardType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard::UNKNOWN;
const WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard::AMEX;
const WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard::DISCOVER;
const WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard::JCB;
const WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard::MAESTRO;
const WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard::MASTER_CARD;
const WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard::SOLO;
const WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard::SWITCH;
const WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard::VISA;
const WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard::WalletCardType_MIN;
const WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard::WalletCardType_MAX;
const int WalletMaskedCreditCard::WalletCardType_ARRAYSIZE;
#endif  // _MSC_VER
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WalletMaskedCreditCard::kIdFieldNumber;
const int WalletMaskedCreditCard::kStatusFieldNumber;
const int WalletMaskedCreditCard::kNameOnCardFieldNumber;
const int WalletMaskedCreditCard::kTypeFieldNumber;
const int WalletMaskedCreditCard::kLastFourFieldNumber;
const int WalletMaskedCreditCard::kExpMonthFieldNumber;
const int WalletMaskedCreditCard::kExpYearFieldNumber;
#endif  // !_MSC_VER

WalletMaskedCreditCard::WalletMaskedCreditCard()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void WalletMaskedCreditCard::InitAsDefaultInstance() {
}

WalletMaskedCreditCard::WalletMaskedCreditCard(const WalletMaskedCreditCard& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void WalletMaskedCreditCard::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  status_ = 0;
  name_on_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  type_ = 0;
  last_four_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  exp_month_ = 0;
  exp_year_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WalletMaskedCreditCard::~WalletMaskedCreditCard() {
  SharedDtor();
}

void WalletMaskedCreditCard::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete id_;
  }
  if (name_on_card_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_on_card_;
  }
  if (last_four_ != &::google::protobuf::internal::GetEmptyString()) {
    delete last_four_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void WalletMaskedCreditCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WalletMaskedCreditCard& WalletMaskedCreditCard::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_autofill_5fspecifics_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_autofill_5fspecifics_2eproto();
#endif
  return *default_instance_;
}

WalletMaskedCreditCard* WalletMaskedCreditCard::default_instance_ = NULL;

WalletMaskedCreditCard* WalletMaskedCreditCard::New() const {
  return new WalletMaskedCreditCard;
}

void WalletMaskedCreditCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyString()) {
        id_->clear();
      }
    }
    status_ = 0;
    if (has_name_on_card()) {
      if (name_on_card_ != &::google::protobuf::internal::GetEmptyString()) {
        name_on_card_->clear();
      }
    }
    type_ = 0;
    if (has_last_four()) {
      if (last_four_ != &::google::protobuf::internal::GetEmptyString()) {
        last_four_->clear();
      }
    }
    exp_month_ = 0;
    exp_year_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WalletMaskedCreditCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional .sync_pb.WalletMaskedCreditCard.WalletCardStatus status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::WalletMaskedCreditCard_WalletCardStatus_IsValid(value)) {
            set_status(static_cast< ::sync_pb::WalletMaskedCreditCard_WalletCardStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name_on_card;
        break;
      }

      // optional string name_on_card = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name_on_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name_on_card()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .sync_pb.WalletMaskedCreditCard.WalletCardType type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::WalletMaskedCreditCard_WalletCardType_IsValid(value)) {
            set_type(static_cast< ::sync_pb::WalletMaskedCreditCard_WalletCardType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_last_four;
        break;
      }

      // optional string last_four = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_four:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_four()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_exp_month;
        break;
      }

      // optional int32 exp_month = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_month_)));
          set_has_exp_month();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_exp_year;
        break;
      }

      // optional int32 exp_year = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp_year:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_year_)));
          set_has_exp_year();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WalletMaskedCreditCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional .sync_pb.WalletMaskedCreditCard.WalletCardStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional string name_on_card = 3;
  if (has_name_on_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name_on_card(), output);
  }

  // optional .sync_pb.WalletMaskedCreditCard.WalletCardType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional string last_four = 5;
  if (has_last_four()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->last_four(), output);
  }

  // optional int32 exp_month = 6;
  if (has_exp_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->exp_month(), output);
  }

  // optional int32 exp_year = 7;
  if (has_exp_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->exp_year(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int WalletMaskedCreditCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .sync_pb.WalletMaskedCreditCard.WalletCardStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional string name_on_card = 3;
    if (has_name_on_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name_on_card());
    }

    // optional .sync_pb.WalletMaskedCreditCard.WalletCardType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string last_four = 5;
    if (has_last_four()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_four());
    }

    // optional int32 exp_month = 6;
    if (has_exp_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp_month());
    }

    // optional int32 exp_year = 7;
    if (has_exp_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp_year());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WalletMaskedCreditCard::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WalletMaskedCreditCard*>(&from));
}

void WalletMaskedCreditCard::MergeFrom(const WalletMaskedCreditCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_name_on_card()) {
      set_name_on_card(from.name_on_card());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_last_four()) {
      set_last_four(from.last_four());
    }
    if (from.has_exp_month()) {
      set_exp_month(from.exp_month());
    }
    if (from.has_exp_year()) {
      set_exp_year(from.exp_year());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WalletMaskedCreditCard::CopyFrom(const WalletMaskedCreditCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WalletMaskedCreditCard::IsInitialized() const {

  return true;
}

void WalletMaskedCreditCard::Swap(WalletMaskedCreditCard* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(status_, other->status_);
    std::swap(name_on_card_, other->name_on_card_);
    std::swap(type_, other->type_);
    std::swap(last_four_, other->last_four_);
    std::swap(exp_month_, other->exp_month_);
    std::swap(exp_year_, other->exp_year_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string WalletMaskedCreditCard::GetTypeName() const {
  return "sync_pb.WalletMaskedCreditCard";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WalletPostalAddress::kIdFieldNumber;
const int WalletPostalAddress::kRecipientNameFieldNumber;
const int WalletPostalAddress::kCompanyNameFieldNumber;
const int WalletPostalAddress::kStreetAddressFieldNumber;
const int WalletPostalAddress::kAddress1FieldNumber;
const int WalletPostalAddress::kAddress2FieldNumber;
const int WalletPostalAddress::kAddress3FieldNumber;
const int WalletPostalAddress::kAddress4FieldNumber;
const int WalletPostalAddress::kPostalCodeFieldNumber;
const int WalletPostalAddress::kSortingCodeFieldNumber;
const int WalletPostalAddress::kCountryCodeFieldNumber;
const int WalletPostalAddress::kLanguageCodeFieldNumber;
const int WalletPostalAddress::kPhoneNumberFieldNumber;
#endif  // !_MSC_VER

WalletPostalAddress::WalletPostalAddress()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void WalletPostalAddress::InitAsDefaultInstance() {
}

WalletPostalAddress::WalletPostalAddress(const WalletPostalAddress& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void WalletPostalAddress::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  recipient_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  company_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  address_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  address_2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  address_3_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  address_4_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  postal_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  sorting_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  language_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  phone_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WalletPostalAddress::~WalletPostalAddress() {
  SharedDtor();
}

void WalletPostalAddress::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete id_;
  }
  if (recipient_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete recipient_name_;
  }
  if (company_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete company_name_;
  }
  if (address_1_ != &::google::protobuf::internal::GetEmptyString()) {
    delete address_1_;
  }
  if (address_2_ != &::google::protobuf::internal::GetEmptyString()) {
    delete address_2_;
  }
  if (address_3_ != &::google::protobuf::internal::GetEmptyString()) {
    delete address_3_;
  }
  if (address_4_ != &::google::protobuf::internal::GetEmptyString()) {
    delete address_4_;
  }
  if (postal_code_ != &::google::protobuf::internal::GetEmptyString()) {
    delete postal_code_;
  }
  if (sorting_code_ != &::google::protobuf::internal::GetEmptyString()) {
    delete sorting_code_;
  }
  if (country_code_ != &::google::protobuf::internal::GetEmptyString()) {
    delete country_code_;
  }
  if (language_code_ != &::google::protobuf::internal::GetEmptyString()) {
    delete language_code_;
  }
  if (phone_number_ != &::google::protobuf::internal::GetEmptyString()) {
    delete phone_number_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void WalletPostalAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WalletPostalAddress& WalletPostalAddress::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_autofill_5fspecifics_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_autofill_5fspecifics_2eproto();
#endif
  return *default_instance_;
}

WalletPostalAddress* WalletPostalAddress::default_instance_ = NULL;

WalletPostalAddress* WalletPostalAddress::New() const {
  return new WalletPostalAddress;
}

void WalletPostalAddress::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyString()) {
        id_->clear();
      }
    }
    if (has_recipient_name()) {
      if (recipient_name_ != &::google::protobuf::internal::GetEmptyString()) {
        recipient_name_->clear();
      }
    }
    if (has_company_name()) {
      if (company_name_ != &::google::protobuf::internal::GetEmptyString()) {
        company_name_->clear();
      }
    }
    if (has_address_1()) {
      if (address_1_ != &::google::protobuf::internal::GetEmptyString()) {
        address_1_->clear();
      }
    }
    if (has_address_2()) {
      if (address_2_ != &::google::protobuf::internal::GetEmptyString()) {
        address_2_->clear();
      }
    }
    if (has_address_3()) {
      if (address_3_ != &::google::protobuf::internal::GetEmptyString()) {
        address_3_->clear();
      }
    }
    if (has_address_4()) {
      if (address_4_ != &::google::protobuf::internal::GetEmptyString()) {
        address_4_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_postal_code()) {
      if (postal_code_ != &::google::protobuf::internal::GetEmptyString()) {
        postal_code_->clear();
      }
    }
    if (has_sorting_code()) {
      if (sorting_code_ != &::google::protobuf::internal::GetEmptyString()) {
        sorting_code_->clear();
      }
    }
    if (has_country_code()) {
      if (country_code_ != &::google::protobuf::internal::GetEmptyString()) {
        country_code_->clear();
      }
    }
    if (has_language_code()) {
      if (language_code_ != &::google::protobuf::internal::GetEmptyString()) {
        language_code_->clear();
      }
    }
    if (has_phone_number()) {
      if (phone_number_ != &::google::protobuf::internal::GetEmptyString()) {
        phone_number_->clear();
      }
    }
  }
  street_address_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WalletPostalAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_company_name;
        break;
      }

      // optional string company_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_company_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_company_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_street_address;
        break;
      }

      // repeated string street_address = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_street_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_street_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_street_address;
        if (input->ExpectTag(34)) goto parse_address_1;
        break;
      }

      // optional string address_1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address_1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address_1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_address_2;
        break;
      }

      // optional string address_2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address_2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_address_3;
        break;
      }

      // optional string address_3 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address_3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address_3()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_address_4;
        break;
      }

      // optional string address_4 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address_4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address_4()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_postal_code;
        break;
      }

      // optional string postal_code = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_postal_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_postal_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_sorting_code;
        break;
      }

      // optional string sorting_code = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sorting_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sorting_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_country_code;
        break;
      }

      // optional string country_code = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_country_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_language_code;
        break;
      }

      // optional string language_code = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_language_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_recipient_name;
        break;
      }

      // optional string recipient_name = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recipient_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recipient_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_phone_number;
        break;
      }

      // optional string phone_number = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone_number()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WalletPostalAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional string company_name = 2;
  if (has_company_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->company_name(), output);
  }

  // repeated string street_address = 3;
  for (int i = 0; i < this->street_address_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->street_address(i), output);
  }

  // optional string address_1 = 4;
  if (has_address_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->address_1(), output);
  }

  // optional string address_2 = 5;
  if (has_address_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->address_2(), output);
  }

  // optional string address_3 = 6;
  if (has_address_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->address_3(), output);
  }

  // optional string address_4 = 7;
  if (has_address_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->address_4(), output);
  }

  // optional string postal_code = 8;
  if (has_postal_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->postal_code(), output);
  }

  // optional string sorting_code = 9;
  if (has_sorting_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->sorting_code(), output);
  }

  // optional string country_code = 10;
  if (has_country_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->country_code(), output);
  }

  // optional string language_code = 11;
  if (has_language_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->language_code(), output);
  }

  // optional string recipient_name = 12;
  if (has_recipient_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->recipient_name(), output);
  }

  // optional string phone_number = 13;
  if (has_phone_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->phone_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int WalletPostalAddress::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string recipient_name = 12;
    if (has_recipient_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recipient_name());
    }

    // optional string company_name = 2;
    if (has_company_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->company_name());
    }

    // optional string address_1 = 4;
    if (has_address_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address_1());
    }

    // optional string address_2 = 5;
    if (has_address_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address_2());
    }

    // optional string address_3 = 6;
    if (has_address_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address_3());
    }

    // optional string address_4 = 7;
    if (has_address_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address_4());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string postal_code = 8;
    if (has_postal_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->postal_code());
    }

    // optional string sorting_code = 9;
    if (has_sorting_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sorting_code());
    }

    // optional string country_code = 10;
    if (has_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_code());
    }

    // optional string language_code = 11;
    if (has_language_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language_code());
    }

    // optional string phone_number = 13;
    if (has_phone_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone_number());
    }

  }
  // repeated string street_address = 3;
  total_size += 1 * this->street_address_size();
  for (int i = 0; i < this->street_address_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->street_address(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WalletPostalAddress::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WalletPostalAddress*>(&from));
}

void WalletPostalAddress::MergeFrom(const WalletPostalAddress& from) {
  GOOGLE_CHECK_NE(&from, this);
  street_address_.MergeFrom(from.street_address_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_recipient_name()) {
      set_recipient_name(from.recipient_name());
    }
    if (from.has_company_name()) {
      set_company_name(from.company_name());
    }
    if (from.has_address_1()) {
      set_address_1(from.address_1());
    }
    if (from.has_address_2()) {
      set_address_2(from.address_2());
    }
    if (from.has_address_3()) {
      set_address_3(from.address_3());
    }
    if (from.has_address_4()) {
      set_address_4(from.address_4());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_postal_code()) {
      set_postal_code(from.postal_code());
    }
    if (from.has_sorting_code()) {
      set_sorting_code(from.sorting_code());
    }
    if (from.has_country_code()) {
      set_country_code(from.country_code());
    }
    if (from.has_language_code()) {
      set_language_code(from.language_code());
    }
    if (from.has_phone_number()) {
      set_phone_number(from.phone_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WalletPostalAddress::CopyFrom(const WalletPostalAddress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WalletPostalAddress::IsInitialized() const {

  return true;
}

void WalletPostalAddress::Swap(WalletPostalAddress* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(recipient_name_, other->recipient_name_);
    std::swap(company_name_, other->company_name_);
    street_address_.Swap(&other->street_address_);
    std::swap(address_1_, other->address_1_);
    std::swap(address_2_, other->address_2_);
    std::swap(address_3_, other->address_3_);
    std::swap(address_4_, other->address_4_);
    std::swap(postal_code_, other->postal_code_);
    std::swap(sorting_code_, other->sorting_code_);
    std::swap(country_code_, other->country_code_);
    std::swap(language_code_, other->language_code_);
    std::swap(phone_number_, other->phone_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string WalletPostalAddress::GetTypeName() const {
  return "sync_pb.WalletPostalAddress";
}


// ===================================================================

bool AutofillWalletSpecifics_WalletInfoType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AutofillWalletSpecifics_WalletInfoType AutofillWalletSpecifics::UNKNOWN;
const AutofillWalletSpecifics_WalletInfoType AutofillWalletSpecifics::MASKED_CREDIT_CARD;
const AutofillWalletSpecifics_WalletInfoType AutofillWalletSpecifics::POSTAL_ADDRESS;
const AutofillWalletSpecifics_WalletInfoType AutofillWalletSpecifics::WalletInfoType_MIN;
const AutofillWalletSpecifics_WalletInfoType AutofillWalletSpecifics::WalletInfoType_MAX;
const int AutofillWalletSpecifics::WalletInfoType_ARRAYSIZE;
#endif  // _MSC_VER
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutofillWalletSpecifics::kTypeFieldNumber;
const int AutofillWalletSpecifics::kMaskedCardFieldNumber;
const int AutofillWalletSpecifics::kAddressFieldNumber;
#endif  // !_MSC_VER

AutofillWalletSpecifics::AutofillWalletSpecifics()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AutofillWalletSpecifics::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  masked_card_ = const_cast< ::sync_pb::WalletMaskedCreditCard*>(
      ::sync_pb::WalletMaskedCreditCard::internal_default_instance());
#else
  masked_card_ = const_cast< ::sync_pb::WalletMaskedCreditCard*>(&::sync_pb::WalletMaskedCreditCard::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  address_ = const_cast< ::sync_pb::WalletPostalAddress*>(
      ::sync_pb::WalletPostalAddress::internal_default_instance());
#else
  address_ = const_cast< ::sync_pb::WalletPostalAddress*>(&::sync_pb::WalletPostalAddress::default_instance());
#endif
}

AutofillWalletSpecifics::AutofillWalletSpecifics(const AutofillWalletSpecifics& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AutofillWalletSpecifics::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  masked_card_ = NULL;
  address_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutofillWalletSpecifics::~AutofillWalletSpecifics() {
  SharedDtor();
}

void AutofillWalletSpecifics::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete masked_card_;
    delete address_;
  }
}

void AutofillWalletSpecifics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AutofillWalletSpecifics& AutofillWalletSpecifics::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_autofill_5fspecifics_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_autofill_5fspecifics_2eproto();
#endif
  return *default_instance_;
}

AutofillWalletSpecifics* AutofillWalletSpecifics::default_instance_ = NULL;

AutofillWalletSpecifics* AutofillWalletSpecifics::New() const {
  return new AutofillWalletSpecifics;
}

void AutofillWalletSpecifics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_masked_card()) {
      if (masked_card_ != NULL) masked_card_->::sync_pb::WalletMaskedCreditCard::Clear();
    }
    if (has_address()) {
      if (address_ != NULL) address_->::sync_pb::WalletPostalAddress::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AutofillWalletSpecifics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.AutofillWalletSpecifics.WalletInfoType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::AutofillWalletSpecifics_WalletInfoType_IsValid(value)) {
            set_type(static_cast< ::sync_pb::AutofillWalletSpecifics_WalletInfoType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_masked_card;
        break;
      }

      // optional .sync_pb.WalletMaskedCreditCard masked_card = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_masked_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_masked_card()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_address;
        break;
      }

      // optional .sync_pb.WalletPostalAddress address = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AutofillWalletSpecifics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .sync_pb.AutofillWalletSpecifics.WalletInfoType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .sync_pb.WalletMaskedCreditCard masked_card = 2;
  if (has_masked_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->masked_card(), output);
  }

  // optional .sync_pb.WalletPostalAddress address = 3;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->address(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int AutofillWalletSpecifics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .sync_pb.AutofillWalletSpecifics.WalletInfoType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .sync_pb.WalletMaskedCreditCard masked_card = 2;
    if (has_masked_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->masked_card());
    }

    // optional .sync_pb.WalletPostalAddress address = 3;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->address());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutofillWalletSpecifics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AutofillWalletSpecifics*>(&from));
}

void AutofillWalletSpecifics::MergeFrom(const AutofillWalletSpecifics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_masked_card()) {
      mutable_masked_card()->::sync_pb::WalletMaskedCreditCard::MergeFrom(from.masked_card());
    }
    if (from.has_address()) {
      mutable_address()->::sync_pb::WalletPostalAddress::MergeFrom(from.address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AutofillWalletSpecifics::CopyFrom(const AutofillWalletSpecifics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillWalletSpecifics::IsInitialized() const {

  return true;
}

void AutofillWalletSpecifics::Swap(AutofillWalletSpecifics* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(masked_card_, other->masked_card_);
    std::swap(address_, other->address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AutofillWalletSpecifics::GetTypeName() const {
  return "sync_pb.AutofillWalletSpecifics";
}


// ===================================================================

bool WalletMetadataSpecifics_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const WalletMetadataSpecifics_Type WalletMetadataSpecifics::UNKNOWN;
const WalletMetadataSpecifics_Type WalletMetadataSpecifics::CARD;
const WalletMetadataSpecifics_Type WalletMetadataSpecifics::ADDRESS;
const WalletMetadataSpecifics_Type WalletMetadataSpecifics::Type_MIN;
const WalletMetadataSpecifics_Type WalletMetadataSpecifics::Type_MAX;
const int WalletMetadataSpecifics::Type_ARRAYSIZE;
#endif  // _MSC_VER
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WalletMetadataSpecifics::kTypeFieldNumber;
const int WalletMetadataSpecifics::kIdFieldNumber;
const int WalletMetadataSpecifics::kUseCountFieldNumber;
const int WalletMetadataSpecifics::kUseDateFieldNumber;
#endif  // !_MSC_VER

WalletMetadataSpecifics::WalletMetadataSpecifics()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void WalletMetadataSpecifics::InitAsDefaultInstance() {
}

WalletMetadataSpecifics::WalletMetadataSpecifics(const WalletMetadataSpecifics& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void WalletMetadataSpecifics::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  use_count_ = GOOGLE_LONGLONG(0);
  use_date_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WalletMetadataSpecifics::~WalletMetadataSpecifics() {
  SharedDtor();
}

void WalletMetadataSpecifics::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void WalletMetadataSpecifics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WalletMetadataSpecifics& WalletMetadataSpecifics::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_autofill_5fspecifics_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_autofill_5fspecifics_2eproto();
#endif
  return *default_instance_;
}

WalletMetadataSpecifics* WalletMetadataSpecifics::default_instance_ = NULL;

WalletMetadataSpecifics* WalletMetadataSpecifics::New() const {
  return new WalletMetadataSpecifics;
}

void WalletMetadataSpecifics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyString()) {
        id_->clear();
      }
    }
    use_count_ = GOOGLE_LONGLONG(0);
    use_date_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WalletMetadataSpecifics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.WalletMetadataSpecifics.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::WalletMetadataSpecifics_Type_IsValid(value)) {
            set_type(static_cast< ::sync_pb::WalletMetadataSpecifics_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // optional string id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_use_count;
        break;
      }

      // optional int64 use_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &use_count_)));
          set_has_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_use_date;
        break;
      }

      // optional int64 use_date = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &use_date_)));
          set_has_use_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WalletMetadataSpecifics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .sync_pb.WalletMetadataSpecifics.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->id(), output);
  }

  // optional int64 use_count = 3;
  if (has_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->use_count(), output);
  }

  // optional int64 use_date = 4;
  if (has_use_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->use_date(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int WalletMetadataSpecifics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .sync_pb.WalletMetadataSpecifics.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional int64 use_count = 3;
    if (has_use_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->use_count());
    }

    // optional int64 use_date = 4;
    if (has_use_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->use_date());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WalletMetadataSpecifics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WalletMetadataSpecifics*>(&from));
}

void WalletMetadataSpecifics::MergeFrom(const WalletMetadataSpecifics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_use_count()) {
      set_use_count(from.use_count());
    }
    if (from.has_use_date()) {
      set_use_date(from.use_date());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WalletMetadataSpecifics::CopyFrom(const WalletMetadataSpecifics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WalletMetadataSpecifics::IsInitialized() const {

  return true;
}

void WalletMetadataSpecifics::Swap(WalletMetadataSpecifics* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(use_count_, other->use_count_);
    std::swap(use_date_, other->use_date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string WalletMetadataSpecifics::GetTypeName() const {
  return "sync_pb.WalletMetadataSpecifics";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)
