// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {

void protobuf_ShutdownFile_test_2eproto() {
  delete UnknownFieldsTestA::default_instance_;
  delete UnknownFieldsTestB::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_test_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_test_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  UnknownFieldsTestA::default_instance_ = new UnknownFieldsTestA();
  UnknownFieldsTestB::default_instance_ = new UnknownFieldsTestB();
  UnknownFieldsTestA::default_instance_->InitAsDefaultInstance();
  UnknownFieldsTestB::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_test_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_test_2eproto_once_);
void protobuf_AddDesc_test_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_test_2eproto_once_,
                 &protobuf_AddDesc_test_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_test_2eproto {
  StaticDescriptorInitializer_test_2eproto() {
    protobuf_AddDesc_test_2eproto();
  }
} static_descriptor_initializer_test_2eproto_;
#endif

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnknownFieldsTestA::kFooFieldNumber;
#endif  // !_MSC_VER

UnknownFieldsTestA::UnknownFieldsTestA()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UnknownFieldsTestA::InitAsDefaultInstance() {
}

UnknownFieldsTestA::UnknownFieldsTestA(const UnknownFieldsTestA& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UnknownFieldsTestA::SharedCtor() {
  _cached_size_ = 0;
  foo_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnknownFieldsTestA::~UnknownFieldsTestA() {
  SharedDtor();
}

void UnknownFieldsTestA::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UnknownFieldsTestA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UnknownFieldsTestA& UnknownFieldsTestA::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_test_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();
#endif
  return *default_instance_;
}

UnknownFieldsTestA* UnknownFieldsTestA::default_instance_ = NULL;

UnknownFieldsTestA* UnknownFieldsTestA::New() const {
  return new UnknownFieldsTestA;
}

void UnknownFieldsTestA::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    foo_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnknownFieldsTestA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool foo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &foo_)));
          set_has_foo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnknownFieldsTestA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool foo = 1;
  if (has_foo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->foo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int UnknownFieldsTestA::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool foo = 1;
    if (has_foo()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnknownFieldsTestA::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UnknownFieldsTestA*>(&from));
}

void UnknownFieldsTestA::MergeFrom(const UnknownFieldsTestA& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_foo()) {
      set_foo(from.foo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnknownFieldsTestA::CopyFrom(const UnknownFieldsTestA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnknownFieldsTestA::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UnknownFieldsTestA::Swap(UnknownFieldsTestA* other) {
  if (other != this) {
    std::swap(foo_, other->foo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UnknownFieldsTestA::GetTypeName() const {
  return "sync_pb.UnknownFieldsTestA";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnknownFieldsTestB::kFooFieldNumber;
const int UnknownFieldsTestB::kBarFieldNumber;
#endif  // !_MSC_VER

UnknownFieldsTestB::UnknownFieldsTestB()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UnknownFieldsTestB::InitAsDefaultInstance() {
}

UnknownFieldsTestB::UnknownFieldsTestB(const UnknownFieldsTestB& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UnknownFieldsTestB::SharedCtor() {
  _cached_size_ = 0;
  foo_ = false;
  bar_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnknownFieldsTestB::~UnknownFieldsTestB() {
  SharedDtor();
}

void UnknownFieldsTestB::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UnknownFieldsTestB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UnknownFieldsTestB& UnknownFieldsTestB::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_test_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();
#endif
  return *default_instance_;
}

UnknownFieldsTestB* UnknownFieldsTestB::default_instance_ = NULL;

UnknownFieldsTestB* UnknownFieldsTestB::New() const {
  return new UnknownFieldsTestB;
}

void UnknownFieldsTestB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    foo_ = false;
    bar_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnknownFieldsTestB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool foo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &foo_)));
          set_has_foo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bar;
        break;
      }

      // required bool bar = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bar_)));
          set_has_bar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnknownFieldsTestB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool foo = 1;
  if (has_foo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->foo(), output);
  }

  // required bool bar = 2;
  if (has_bar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int UnknownFieldsTestB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool foo = 1;
    if (has_foo()) {
      total_size += 1 + 1;
    }

    // required bool bar = 2;
    if (has_bar()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnknownFieldsTestB::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UnknownFieldsTestB*>(&from));
}

void UnknownFieldsTestB::MergeFrom(const UnknownFieldsTestB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_foo()) {
      set_foo(from.foo());
    }
    if (from.has_bar()) {
      set_bar(from.bar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnknownFieldsTestB::CopyFrom(const UnknownFieldsTestB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnknownFieldsTestB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UnknownFieldsTestB::Swap(UnknownFieldsTestB* other) {
  if (other != this) {
    std::swap(foo_, other->foo_);
    std::swap(bar_, other->bar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UnknownFieldsTestB::GetTypeName() const {
  return "sync_pb.UnknownFieldsTestB";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)
