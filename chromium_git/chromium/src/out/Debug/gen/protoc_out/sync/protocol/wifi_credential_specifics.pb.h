// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wifi_credential_specifics.proto

#ifndef PROTOBUF_wifi_5fcredential_5fspecifics_2eproto__INCLUDED
#define PROTOBUF_wifi_5fcredential_5fspecifics_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include "sync/protocol/sync_proto_export.h"

namespace sync_pb {

// Internal implementation detail -- do not call these.
void SYNC_PROTO_EXPORT protobuf_AddDesc_wifi_5fcredential_5fspecifics_2eproto();
void protobuf_AssignDesc_wifi_5fcredential_5fspecifics_2eproto();
void protobuf_ShutdownFile_wifi_5fcredential_5fspecifics_2eproto();

class WifiCredentialSpecifics;

enum WifiCredentialSpecifics_SecurityClass {
  WifiCredentialSpecifics_SecurityClass_SECURITY_CLASS_INVALID = 0,
  WifiCredentialSpecifics_SecurityClass_SECURITY_CLASS_NONE = 1,
  WifiCredentialSpecifics_SecurityClass_SECURITY_CLASS_WEP = 2,
  WifiCredentialSpecifics_SecurityClass_SECURITY_CLASS_PSK = 3
};
SYNC_PROTO_EXPORT bool WifiCredentialSpecifics_SecurityClass_IsValid(int value);
const WifiCredentialSpecifics_SecurityClass WifiCredentialSpecifics_SecurityClass_SecurityClass_MIN = WifiCredentialSpecifics_SecurityClass_SECURITY_CLASS_INVALID;
const WifiCredentialSpecifics_SecurityClass WifiCredentialSpecifics_SecurityClass_SecurityClass_MAX = WifiCredentialSpecifics_SecurityClass_SECURITY_CLASS_PSK;
const int WifiCredentialSpecifics_SecurityClass_SecurityClass_ARRAYSIZE = WifiCredentialSpecifics_SecurityClass_SecurityClass_MAX + 1;

// ===================================================================

class SYNC_PROTO_EXPORT WifiCredentialSpecifics : public ::google::protobuf::MessageLite {
 public:
  WifiCredentialSpecifics();
  virtual ~WifiCredentialSpecifics();

  WifiCredentialSpecifics(const WifiCredentialSpecifics& from);

  inline WifiCredentialSpecifics& operator=(const WifiCredentialSpecifics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const WifiCredentialSpecifics& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const WifiCredentialSpecifics* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(WifiCredentialSpecifics* other);

  // implements Message ----------------------------------------------

  WifiCredentialSpecifics* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const WifiCredentialSpecifics& from);
  void MergeFrom(const WifiCredentialSpecifics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef WifiCredentialSpecifics_SecurityClass SecurityClass;
  static const SecurityClass SECURITY_CLASS_INVALID = WifiCredentialSpecifics_SecurityClass_SECURITY_CLASS_INVALID;
  static const SecurityClass SECURITY_CLASS_NONE = WifiCredentialSpecifics_SecurityClass_SECURITY_CLASS_NONE;
  static const SecurityClass SECURITY_CLASS_WEP = WifiCredentialSpecifics_SecurityClass_SECURITY_CLASS_WEP;
  static const SecurityClass SECURITY_CLASS_PSK = WifiCredentialSpecifics_SecurityClass_SECURITY_CLASS_PSK;
  static inline bool SecurityClass_IsValid(int value) {
    return WifiCredentialSpecifics_SecurityClass_IsValid(value);
  }
  static const SecurityClass SecurityClass_MIN =
    WifiCredentialSpecifics_SecurityClass_SecurityClass_MIN;
  static const SecurityClass SecurityClass_MAX =
    WifiCredentialSpecifics_SecurityClass_SecurityClass_MAX;
  static const int SecurityClass_ARRAYSIZE =
    WifiCredentialSpecifics_SecurityClass_SecurityClass_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional bytes ssid = 1;
  inline bool has_ssid() const;
  inline void clear_ssid();
  static const int kSsidFieldNumber = 1;
  inline const ::std::string& ssid() const;
  inline void set_ssid(const ::std::string& value);
  inline void set_ssid(const char* value);
  inline void set_ssid(const void* value, size_t size);
  inline ::std::string* mutable_ssid();
  inline ::std::string* release_ssid();
  inline void set_allocated_ssid(::std::string* ssid);

  // optional .sync_pb.WifiCredentialSpecifics.SecurityClass security_class = 2;
  inline bool has_security_class() const;
  inline void clear_security_class();
  static const int kSecurityClassFieldNumber = 2;
  inline ::sync_pb::WifiCredentialSpecifics_SecurityClass security_class() const;
  inline void set_security_class(::sync_pb::WifiCredentialSpecifics_SecurityClass value);

  // optional bytes passphrase = 3;
  inline bool has_passphrase() const;
  inline void clear_passphrase();
  static const int kPassphraseFieldNumber = 3;
  inline const ::std::string& passphrase() const;
  inline void set_passphrase(const ::std::string& value);
  inline void set_passphrase(const char* value);
  inline void set_passphrase(const void* value, size_t size);
  inline ::std::string* mutable_passphrase();
  inline ::std::string* release_passphrase();
  inline void set_allocated_passphrase(::std::string* passphrase);

  // @@protoc_insertion_point(class_scope:sync_pb.WifiCredentialSpecifics)
 private:
  inline void set_has_ssid();
  inline void clear_has_ssid();
  inline void set_has_security_class();
  inline void clear_has_security_class();
  inline void set_has_passphrase();
  inline void clear_has_passphrase();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ssid_;
  ::std::string* passphrase_;
  int security_class_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void SYNC_PROTO_EXPORT protobuf_AddDesc_wifi_5fcredential_5fspecifics_2eproto_impl();
  #else
  friend void SYNC_PROTO_EXPORT protobuf_AddDesc_wifi_5fcredential_5fspecifics_2eproto();
  #endif
  friend void protobuf_AssignDesc_wifi_5fcredential_5fspecifics_2eproto();
  friend void protobuf_ShutdownFile_wifi_5fcredential_5fspecifics_2eproto();

  void InitAsDefaultInstance();
  static WifiCredentialSpecifics* default_instance_;
};
// ===================================================================


// ===================================================================

// WifiCredentialSpecifics

// optional bytes ssid = 1;
inline bool WifiCredentialSpecifics::has_ssid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WifiCredentialSpecifics::set_has_ssid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WifiCredentialSpecifics::clear_has_ssid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WifiCredentialSpecifics::clear_ssid() {
  if (ssid_ != &::google::protobuf::internal::GetEmptyString()) {
    ssid_->clear();
  }
  clear_has_ssid();
}
inline const ::std::string& WifiCredentialSpecifics::ssid() const {
  return *ssid_;
}
inline void WifiCredentialSpecifics::set_ssid(const ::std::string& value) {
  set_has_ssid();
  if (ssid_ == &::google::protobuf::internal::GetEmptyString()) {
    ssid_ = new ::std::string;
  }
  ssid_->assign(value);
}
inline void WifiCredentialSpecifics::set_ssid(const char* value) {
  set_has_ssid();
  if (ssid_ == &::google::protobuf::internal::GetEmptyString()) {
    ssid_ = new ::std::string;
  }
  ssid_->assign(value);
}
inline void WifiCredentialSpecifics::set_ssid(const void* value, size_t size) {
  set_has_ssid();
  if (ssid_ == &::google::protobuf::internal::GetEmptyString()) {
    ssid_ = new ::std::string;
  }
  ssid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WifiCredentialSpecifics::mutable_ssid() {
  set_has_ssid();
  if (ssid_ == &::google::protobuf::internal::GetEmptyString()) {
    ssid_ = new ::std::string;
  }
  return ssid_;
}
inline ::std::string* WifiCredentialSpecifics::release_ssid() {
  clear_has_ssid();
  if (ssid_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = ssid_;
    ssid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void WifiCredentialSpecifics::set_allocated_ssid(::std::string* ssid) {
  if (ssid_ != &::google::protobuf::internal::GetEmptyString()) {
    delete ssid_;
  }
  if (ssid) {
    set_has_ssid();
    ssid_ = ssid;
  } else {
    clear_has_ssid();
    ssid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional .sync_pb.WifiCredentialSpecifics.SecurityClass security_class = 2;
inline bool WifiCredentialSpecifics::has_security_class() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WifiCredentialSpecifics::set_has_security_class() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WifiCredentialSpecifics::clear_has_security_class() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WifiCredentialSpecifics::clear_security_class() {
  security_class_ = 0;
  clear_has_security_class();
}
inline ::sync_pb::WifiCredentialSpecifics_SecurityClass WifiCredentialSpecifics::security_class() const {
  return static_cast< ::sync_pb::WifiCredentialSpecifics_SecurityClass >(security_class_);
}
inline void WifiCredentialSpecifics::set_security_class(::sync_pb::WifiCredentialSpecifics_SecurityClass value) {
  assert(::sync_pb::WifiCredentialSpecifics_SecurityClass_IsValid(value));
  set_has_security_class();
  security_class_ = value;
}

// optional bytes passphrase = 3;
inline bool WifiCredentialSpecifics::has_passphrase() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WifiCredentialSpecifics::set_has_passphrase() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WifiCredentialSpecifics::clear_has_passphrase() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WifiCredentialSpecifics::clear_passphrase() {
  if (passphrase_ != &::google::protobuf::internal::GetEmptyString()) {
    passphrase_->clear();
  }
  clear_has_passphrase();
}
inline const ::std::string& WifiCredentialSpecifics::passphrase() const {
  return *passphrase_;
}
inline void WifiCredentialSpecifics::set_passphrase(const ::std::string& value) {
  set_has_passphrase();
  if (passphrase_ == &::google::protobuf::internal::GetEmptyString()) {
    passphrase_ = new ::std::string;
  }
  passphrase_->assign(value);
}
inline void WifiCredentialSpecifics::set_passphrase(const char* value) {
  set_has_passphrase();
  if (passphrase_ == &::google::protobuf::internal::GetEmptyString()) {
    passphrase_ = new ::std::string;
  }
  passphrase_->assign(value);
}
inline void WifiCredentialSpecifics::set_passphrase(const void* value, size_t size) {
  set_has_passphrase();
  if (passphrase_ == &::google::protobuf::internal::GetEmptyString()) {
    passphrase_ = new ::std::string;
  }
  passphrase_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WifiCredentialSpecifics::mutable_passphrase() {
  set_has_passphrase();
  if (passphrase_ == &::google::protobuf::internal::GetEmptyString()) {
    passphrase_ = new ::std::string;
  }
  return passphrase_;
}
inline ::std::string* WifiCredentialSpecifics::release_passphrase() {
  clear_has_passphrase();
  if (passphrase_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = passphrase_;
    passphrase_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void WifiCredentialSpecifics::set_allocated_passphrase(::std::string* passphrase) {
  if (passphrase_ != &::google::protobuf::internal::GetEmptyString()) {
    delete passphrase_;
  }
  if (passphrase) {
    set_has_passphrase();
    passphrase_ = passphrase;
  } else {
    clear_has_passphrase();
    passphrase_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_wifi_5fcredential_5fspecifics_2eproto__INCLUDED
