// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: entity_metadata.proto

#ifndef PROTOBUF_entity_5fmetadata_2eproto__INCLUDED
#define PROTOBUF_entity_5fmetadata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include "sync/protocol/sync_proto_export.h"

namespace sync_pb {

// Internal implementation detail -- do not call these.
void SYNC_PROTO_EXPORT protobuf_AddDesc_entity_5fmetadata_2eproto();
void protobuf_AssignDesc_entity_5fmetadata_2eproto();
void protobuf_ShutdownFile_entity_5fmetadata_2eproto();

class EntityMetadata;

// ===================================================================

class SYNC_PROTO_EXPORT EntityMetadata : public ::google::protobuf::MessageLite {
 public:
  EntityMetadata();
  virtual ~EntityMetadata();

  EntityMetadata(const EntityMetadata& from);

  inline EntityMetadata& operator=(const EntityMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const EntityMetadata& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const EntityMetadata* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(EntityMetadata* other);

  // implements Message ----------------------------------------------

  EntityMetadata* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const EntityMetadata& from);
  void MergeFrom(const EntityMetadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string client_tag_hash = 1;
  inline bool has_client_tag_hash() const;
  inline void clear_client_tag_hash();
  static const int kClientTagHashFieldNumber = 1;
  inline const ::std::string& client_tag_hash() const;
  inline void set_client_tag_hash(const ::std::string& value);
  inline void set_client_tag_hash(const char* value);
  inline void set_client_tag_hash(const char* value, size_t size);
  inline ::std::string* mutable_client_tag_hash();
  inline ::std::string* release_client_tag_hash();
  inline void set_allocated_client_tag_hash(::std::string* client_tag_hash);

  // optional string server_id = 2;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  inline const ::std::string& server_id() const;
  inline void set_server_id(const ::std::string& value);
  inline void set_server_id(const char* value);
  inline void set_server_id(const char* value, size_t size);
  inline ::std::string* mutable_server_id();
  inline ::std::string* release_server_id();
  inline void set_allocated_server_id(::std::string* server_id);

  // optional bool is_deleted = 3;
  inline bool has_is_deleted() const;
  inline void clear_is_deleted();
  static const int kIsDeletedFieldNumber = 3;
  inline bool is_deleted() const;
  inline void set_is_deleted(bool value);

  // optional int64 sequence_number = 4;
  inline bool has_sequence_number() const;
  inline void clear_sequence_number();
  static const int kSequenceNumberFieldNumber = 4;
  inline ::google::protobuf::int64 sequence_number() const;
  inline void set_sequence_number(::google::protobuf::int64 value);

  // optional int64 acked_sequence_number = 5;
  inline bool has_acked_sequence_number() const;
  inline void clear_acked_sequence_number();
  static const int kAckedSequenceNumberFieldNumber = 5;
  inline ::google::protobuf::int64 acked_sequence_number() const;
  inline void set_acked_sequence_number(::google::protobuf::int64 value);

  // optional int64 server_version = 6 [default = -1];
  inline bool has_server_version() const;
  inline void clear_server_version();
  static const int kServerVersionFieldNumber = 6;
  inline ::google::protobuf::int64 server_version() const;
  inline void set_server_version(::google::protobuf::int64 value);

  // optional int64 creation_time = 7;
  inline bool has_creation_time() const;
  inline void clear_creation_time();
  static const int kCreationTimeFieldNumber = 7;
  inline ::google::protobuf::int64 creation_time() const;
  inline void set_creation_time(::google::protobuf::int64 value);

  // optional int64 modification_time = 8;
  inline bool has_modification_time() const;
  inline void clear_modification_time();
  static const int kModificationTimeFieldNumber = 8;
  inline ::google::protobuf::int64 modification_time() const;
  inline void set_modification_time(::google::protobuf::int64 value);

  // optional string specifics_hash = 9;
  inline bool has_specifics_hash() const;
  inline void clear_specifics_hash();
  static const int kSpecificsHashFieldNumber = 9;
  inline const ::std::string& specifics_hash() const;
  inline void set_specifics_hash(const ::std::string& value);
  inline void set_specifics_hash(const char* value);
  inline void set_specifics_hash(const char* value, size_t size);
  inline ::std::string* mutable_specifics_hash();
  inline ::std::string* release_specifics_hash();
  inline void set_allocated_specifics_hash(::std::string* specifics_hash);

  // @@protoc_insertion_point(class_scope:sync_pb.EntityMetadata)
 private:
  inline void set_has_client_tag_hash();
  inline void clear_has_client_tag_hash();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_is_deleted();
  inline void clear_has_is_deleted();
  inline void set_has_sequence_number();
  inline void clear_has_sequence_number();
  inline void set_has_acked_sequence_number();
  inline void clear_has_acked_sequence_number();
  inline void set_has_server_version();
  inline void clear_has_server_version();
  inline void set_has_creation_time();
  inline void clear_has_creation_time();
  inline void set_has_modification_time();
  inline void clear_has_modification_time();
  inline void set_has_specifics_hash();
  inline void clear_has_specifics_hash();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* client_tag_hash_;
  ::std::string* server_id_;
  ::google::protobuf::int64 sequence_number_;
  ::google::protobuf::int64 acked_sequence_number_;
  ::google::protobuf::int64 server_version_;
  ::google::protobuf::int64 creation_time_;
  ::google::protobuf::int64 modification_time_;
  ::std::string* specifics_hash_;
  bool is_deleted_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void SYNC_PROTO_EXPORT protobuf_AddDesc_entity_5fmetadata_2eproto_impl();
  #else
  friend void SYNC_PROTO_EXPORT protobuf_AddDesc_entity_5fmetadata_2eproto();
  #endif
  friend void protobuf_AssignDesc_entity_5fmetadata_2eproto();
  friend void protobuf_ShutdownFile_entity_5fmetadata_2eproto();

  void InitAsDefaultInstance();
  static EntityMetadata* default_instance_;
};
// ===================================================================


// ===================================================================

// EntityMetadata

// optional string client_tag_hash = 1;
inline bool EntityMetadata::has_client_tag_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EntityMetadata::set_has_client_tag_hash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EntityMetadata::clear_has_client_tag_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EntityMetadata::clear_client_tag_hash() {
  if (client_tag_hash_ != &::google::protobuf::internal::GetEmptyString()) {
    client_tag_hash_->clear();
  }
  clear_has_client_tag_hash();
}
inline const ::std::string& EntityMetadata::client_tag_hash() const {
  return *client_tag_hash_;
}
inline void EntityMetadata::set_client_tag_hash(const ::std::string& value) {
  set_has_client_tag_hash();
  if (client_tag_hash_ == &::google::protobuf::internal::GetEmptyString()) {
    client_tag_hash_ = new ::std::string;
  }
  client_tag_hash_->assign(value);
}
inline void EntityMetadata::set_client_tag_hash(const char* value) {
  set_has_client_tag_hash();
  if (client_tag_hash_ == &::google::protobuf::internal::GetEmptyString()) {
    client_tag_hash_ = new ::std::string;
  }
  client_tag_hash_->assign(value);
}
inline void EntityMetadata::set_client_tag_hash(const char* value, size_t size) {
  set_has_client_tag_hash();
  if (client_tag_hash_ == &::google::protobuf::internal::GetEmptyString()) {
    client_tag_hash_ = new ::std::string;
  }
  client_tag_hash_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EntityMetadata::mutable_client_tag_hash() {
  set_has_client_tag_hash();
  if (client_tag_hash_ == &::google::protobuf::internal::GetEmptyString()) {
    client_tag_hash_ = new ::std::string;
  }
  return client_tag_hash_;
}
inline ::std::string* EntityMetadata::release_client_tag_hash() {
  clear_has_client_tag_hash();
  if (client_tag_hash_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = client_tag_hash_;
    client_tag_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void EntityMetadata::set_allocated_client_tag_hash(::std::string* client_tag_hash) {
  if (client_tag_hash_ != &::google::protobuf::internal::GetEmptyString()) {
    delete client_tag_hash_;
  }
  if (client_tag_hash) {
    set_has_client_tag_hash();
    client_tag_hash_ = client_tag_hash;
  } else {
    clear_has_client_tag_hash();
    client_tag_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string server_id = 2;
inline bool EntityMetadata::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EntityMetadata::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EntityMetadata::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EntityMetadata::clear_server_id() {
  if (server_id_ != &::google::protobuf::internal::GetEmptyString()) {
    server_id_->clear();
  }
  clear_has_server_id();
}
inline const ::std::string& EntityMetadata::server_id() const {
  return *server_id_;
}
inline void EntityMetadata::set_server_id(const ::std::string& value) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::GetEmptyString()) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(value);
}
inline void EntityMetadata::set_server_id(const char* value) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::GetEmptyString()) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(value);
}
inline void EntityMetadata::set_server_id(const char* value, size_t size) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::GetEmptyString()) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EntityMetadata::mutable_server_id() {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::GetEmptyString()) {
    server_id_ = new ::std::string;
  }
  return server_id_;
}
inline ::std::string* EntityMetadata::release_server_id() {
  clear_has_server_id();
  if (server_id_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = server_id_;
    server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void EntityMetadata::set_allocated_server_id(::std::string* server_id) {
  if (server_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete server_id_;
  }
  if (server_id) {
    set_has_server_id();
    server_id_ = server_id;
  } else {
    clear_has_server_id();
    server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional bool is_deleted = 3;
inline bool EntityMetadata::has_is_deleted() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EntityMetadata::set_has_is_deleted() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EntityMetadata::clear_has_is_deleted() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EntityMetadata::clear_is_deleted() {
  is_deleted_ = false;
  clear_has_is_deleted();
}
inline bool EntityMetadata::is_deleted() const {
  return is_deleted_;
}
inline void EntityMetadata::set_is_deleted(bool value) {
  set_has_is_deleted();
  is_deleted_ = value;
}

// optional int64 sequence_number = 4;
inline bool EntityMetadata::has_sequence_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EntityMetadata::set_has_sequence_number() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EntityMetadata::clear_has_sequence_number() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EntityMetadata::clear_sequence_number() {
  sequence_number_ = GOOGLE_LONGLONG(0);
  clear_has_sequence_number();
}
inline ::google::protobuf::int64 EntityMetadata::sequence_number() const {
  return sequence_number_;
}
inline void EntityMetadata::set_sequence_number(::google::protobuf::int64 value) {
  set_has_sequence_number();
  sequence_number_ = value;
}

// optional int64 acked_sequence_number = 5;
inline bool EntityMetadata::has_acked_sequence_number() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EntityMetadata::set_has_acked_sequence_number() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EntityMetadata::clear_has_acked_sequence_number() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EntityMetadata::clear_acked_sequence_number() {
  acked_sequence_number_ = GOOGLE_LONGLONG(0);
  clear_has_acked_sequence_number();
}
inline ::google::protobuf::int64 EntityMetadata::acked_sequence_number() const {
  return acked_sequence_number_;
}
inline void EntityMetadata::set_acked_sequence_number(::google::protobuf::int64 value) {
  set_has_acked_sequence_number();
  acked_sequence_number_ = value;
}

// optional int64 server_version = 6 [default = -1];
inline bool EntityMetadata::has_server_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EntityMetadata::set_has_server_version() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EntityMetadata::clear_has_server_version() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EntityMetadata::clear_server_version() {
  server_version_ = GOOGLE_LONGLONG(-1);
  clear_has_server_version();
}
inline ::google::protobuf::int64 EntityMetadata::server_version() const {
  return server_version_;
}
inline void EntityMetadata::set_server_version(::google::protobuf::int64 value) {
  set_has_server_version();
  server_version_ = value;
}

// optional int64 creation_time = 7;
inline bool EntityMetadata::has_creation_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EntityMetadata::set_has_creation_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EntityMetadata::clear_has_creation_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EntityMetadata::clear_creation_time() {
  creation_time_ = GOOGLE_LONGLONG(0);
  clear_has_creation_time();
}
inline ::google::protobuf::int64 EntityMetadata::creation_time() const {
  return creation_time_;
}
inline void EntityMetadata::set_creation_time(::google::protobuf::int64 value) {
  set_has_creation_time();
  creation_time_ = value;
}

// optional int64 modification_time = 8;
inline bool EntityMetadata::has_modification_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EntityMetadata::set_has_modification_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EntityMetadata::clear_has_modification_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EntityMetadata::clear_modification_time() {
  modification_time_ = GOOGLE_LONGLONG(0);
  clear_has_modification_time();
}
inline ::google::protobuf::int64 EntityMetadata::modification_time() const {
  return modification_time_;
}
inline void EntityMetadata::set_modification_time(::google::protobuf::int64 value) {
  set_has_modification_time();
  modification_time_ = value;
}

// optional string specifics_hash = 9;
inline bool EntityMetadata::has_specifics_hash() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void EntityMetadata::set_has_specifics_hash() {
  _has_bits_[0] |= 0x00000100u;
}
inline void EntityMetadata::clear_has_specifics_hash() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void EntityMetadata::clear_specifics_hash() {
  if (specifics_hash_ != &::google::protobuf::internal::GetEmptyString()) {
    specifics_hash_->clear();
  }
  clear_has_specifics_hash();
}
inline const ::std::string& EntityMetadata::specifics_hash() const {
  return *specifics_hash_;
}
inline void EntityMetadata::set_specifics_hash(const ::std::string& value) {
  set_has_specifics_hash();
  if (specifics_hash_ == &::google::protobuf::internal::GetEmptyString()) {
    specifics_hash_ = new ::std::string;
  }
  specifics_hash_->assign(value);
}
inline void EntityMetadata::set_specifics_hash(const char* value) {
  set_has_specifics_hash();
  if (specifics_hash_ == &::google::protobuf::internal::GetEmptyString()) {
    specifics_hash_ = new ::std::string;
  }
  specifics_hash_->assign(value);
}
inline void EntityMetadata::set_specifics_hash(const char* value, size_t size) {
  set_has_specifics_hash();
  if (specifics_hash_ == &::google::protobuf::internal::GetEmptyString()) {
    specifics_hash_ = new ::std::string;
  }
  specifics_hash_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EntityMetadata::mutable_specifics_hash() {
  set_has_specifics_hash();
  if (specifics_hash_ == &::google::protobuf::internal::GetEmptyString()) {
    specifics_hash_ = new ::std::string;
  }
  return specifics_hash_;
}
inline ::std::string* EntityMetadata::release_specifics_hash() {
  clear_has_specifics_hash();
  if (specifics_hash_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = specifics_hash_;
    specifics_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void EntityMetadata::set_allocated_specifics_hash(::std::string* specifics_hash) {
  if (specifics_hash_ != &::google::protobuf::internal::GetEmptyString()) {
    delete specifics_hash_;
  }
  if (specifics_hash) {
    set_has_specifics_hash();
    specifics_hash_ = specifics_hash;
  } else {
    clear_has_specifics_hash();
    specifics_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_entity_5fmetadata_2eproto__INCLUDED
