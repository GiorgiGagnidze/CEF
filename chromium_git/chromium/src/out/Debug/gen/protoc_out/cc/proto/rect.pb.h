// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rect.proto

#ifndef PROTOBUF_rect_2eproto__INCLUDED
#define PROTOBUF_rect_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "point.pb.h"
#include "size.pb.h"
// @@protoc_insertion_point(includes)
#include "cc/proto/cc_proto_export.h"

namespace cc {
namespace proto {

// Internal implementation detail -- do not call these.
void CC_PROTO_EXPORT protobuf_AddDesc_rect_2eproto();
void protobuf_AssignDesc_rect_2eproto();
void protobuf_ShutdownFile_rect_2eproto();

class Rect;

// ===================================================================

class CC_PROTO_EXPORT Rect : public ::google::protobuf::MessageLite {
 public:
  Rect();
  virtual ~Rect();

  Rect(const Rect& from);

  inline Rect& operator=(const Rect& from) {
    CopyFrom(from);
    return *this;
  }

  static const Rect& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Rect* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Rect* other);

  // implements Message ----------------------------------------------

  Rect* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Rect& from);
  void MergeFrom(const Rect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cc.proto.Point origin = 1;
  inline bool has_origin() const;
  inline void clear_origin();
  static const int kOriginFieldNumber = 1;
  inline const ::cc::proto::Point& origin() const;
  inline ::cc::proto::Point* mutable_origin();
  inline ::cc::proto::Point* release_origin();
  inline void set_allocated_origin(::cc::proto::Point* origin);

  // optional .cc.proto.Size size = 2;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 2;
  inline const ::cc::proto::Size& size() const;
  inline ::cc::proto::Size* mutable_size();
  inline ::cc::proto::Size* release_size();
  inline void set_allocated_size(::cc::proto::Size* size);

  // @@protoc_insertion_point(class_scope:cc.proto.Rect)
 private:
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_size();
  inline void clear_has_size();

  ::cc::proto::Point* origin_;
  ::cc::proto::Size* size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void CC_PROTO_EXPORT protobuf_AddDesc_rect_2eproto_impl();
  #else
  friend void CC_PROTO_EXPORT protobuf_AddDesc_rect_2eproto();
  #endif
  friend void protobuf_AssignDesc_rect_2eproto();
  friend void protobuf_ShutdownFile_rect_2eproto();

  void InitAsDefaultInstance();
  static Rect* default_instance_;
};
// ===================================================================


// ===================================================================

// Rect

// optional .cc.proto.Point origin = 1;
inline bool Rect::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Rect::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Rect::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Rect::clear_origin() {
  if (origin_ != NULL) origin_->::cc::proto::Point::Clear();
  clear_has_origin();
}
inline const ::cc::proto::Point& Rect::origin() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return origin_ != NULL ? *origin_ : *default_instance().origin_;
#else
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
#endif
}
inline ::cc::proto::Point* Rect::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) origin_ = new ::cc::proto::Point;
  return origin_;
}
inline ::cc::proto::Point* Rect::release_origin() {
  clear_has_origin();
  ::cc::proto::Point* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline void Rect::set_allocated_origin(::cc::proto::Point* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
}

// optional .cc.proto.Size size = 2;
inline bool Rect::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Rect::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Rect::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Rect::clear_size() {
  if (size_ != NULL) size_->::cc::proto::Size::Clear();
  clear_has_size();
}
inline const ::cc::proto::Size& Rect::size() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return size_ != NULL ? *size_ : *default_instance().size_;
#else
  return size_ != NULL ? *size_ : *default_instance_->size_;
#endif
}
inline ::cc::proto::Size* Rect::mutable_size() {
  set_has_size();
  if (size_ == NULL) size_ = new ::cc::proto::Size;
  return size_;
}
inline ::cc::proto::Size* Rect::release_size() {
  clear_has_size();
  ::cc::proto::Size* temp = size_;
  size_ = NULL;
  return temp;
}
inline void Rect::set_allocated_size(::cc::proto::Size* size) {
  delete size_;
  size_ = size;
  if (size) {
    set_has_size();
  } else {
    clear_has_size();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cc

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rect_2eproto__INCLUDED
