// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skrrect.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "skrrect.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace cc {
namespace proto {

void protobuf_ShutdownFile_skrrect_2eproto() {
  delete SkRRect::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_skrrect_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_skrrect_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::cc::proto::protobuf_AddDesc_pointf_2eproto();
  ::cc::proto::protobuf_AddDesc_rectf_2eproto();
  SkRRect::default_instance_ = new SkRRect();
  SkRRect::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_skrrect_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_skrrect_2eproto_once_);
void protobuf_AddDesc_skrrect_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_skrrect_2eproto_once_,
                 &protobuf_AddDesc_skrrect_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_skrrect_2eproto {
  StaticDescriptorInitializer_skrrect_2eproto() {
    protobuf_AddDesc_skrrect_2eproto();
  }
} static_descriptor_initializer_skrrect_2eproto_;
#endif

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SkRRect::kRectFieldNumber;
const int SkRRect::kRadiiUpperLeftFieldNumber;
const int SkRRect::kRadiiUpperRightFieldNumber;
const int SkRRect::kRadiiLowerRightFieldNumber;
const int SkRRect::kRadiiLowerLeftFieldNumber;
#endif  // !_MSC_VER

SkRRect::SkRRect()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SkRRect::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  rect_ = const_cast< ::cc::proto::RectF*>(
      ::cc::proto::RectF::internal_default_instance());
#else
  rect_ = const_cast< ::cc::proto::RectF*>(&::cc::proto::RectF::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  radii_upper_left_ = const_cast< ::cc::proto::PointF*>(
      ::cc::proto::PointF::internal_default_instance());
#else
  radii_upper_left_ = const_cast< ::cc::proto::PointF*>(&::cc::proto::PointF::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  radii_upper_right_ = const_cast< ::cc::proto::PointF*>(
      ::cc::proto::PointF::internal_default_instance());
#else
  radii_upper_right_ = const_cast< ::cc::proto::PointF*>(&::cc::proto::PointF::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  radii_lower_right_ = const_cast< ::cc::proto::PointF*>(
      ::cc::proto::PointF::internal_default_instance());
#else
  radii_lower_right_ = const_cast< ::cc::proto::PointF*>(&::cc::proto::PointF::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  radii_lower_left_ = const_cast< ::cc::proto::PointF*>(
      ::cc::proto::PointF::internal_default_instance());
#else
  radii_lower_left_ = const_cast< ::cc::proto::PointF*>(&::cc::proto::PointF::default_instance());
#endif
}

SkRRect::SkRRect(const SkRRect& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SkRRect::SharedCtor() {
  _cached_size_ = 0;
  rect_ = NULL;
  radii_upper_left_ = NULL;
  radii_upper_right_ = NULL;
  radii_lower_right_ = NULL;
  radii_lower_left_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkRRect::~SkRRect() {
  SharedDtor();
}

void SkRRect::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete rect_;
    delete radii_upper_left_;
    delete radii_upper_right_;
    delete radii_lower_right_;
    delete radii_lower_left_;
  }
}

void SkRRect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SkRRect& SkRRect::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_skrrect_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_skrrect_2eproto();
#endif
  return *default_instance_;
}

SkRRect* SkRRect::default_instance_ = NULL;

SkRRect* SkRRect::New() const {
  return new SkRRect;
}

void SkRRect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rect()) {
      if (rect_ != NULL) rect_->::cc::proto::RectF::Clear();
    }
    if (has_radii_upper_left()) {
      if (radii_upper_left_ != NULL) radii_upper_left_->::cc::proto::PointF::Clear();
    }
    if (has_radii_upper_right()) {
      if (radii_upper_right_ != NULL) radii_upper_right_->::cc::proto::PointF::Clear();
    }
    if (has_radii_lower_right()) {
      if (radii_lower_right_ != NULL) radii_lower_right_->::cc::proto::PointF::Clear();
    }
    if (has_radii_lower_left()) {
      if (radii_lower_left_ != NULL) radii_lower_left_->::cc::proto::PointF::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SkRRect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cc.proto.RectF rect = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_radii_upper_left;
        break;
      }

      // optional .cc.proto.PointF radii_upper_left = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_radii_upper_left:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_radii_upper_left()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_radii_upper_right;
        break;
      }

      // optional .cc.proto.PointF radii_upper_right = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_radii_upper_right:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_radii_upper_right()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_radii_lower_right;
        break;
      }

      // optional .cc.proto.PointF radii_lower_right = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_radii_lower_right:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_radii_lower_right()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_radii_lower_left;
        break;
      }

      // optional .cc.proto.PointF radii_lower_left = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_radii_lower_left:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_radii_lower_left()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkRRect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cc.proto.RectF rect = 1;
  if (has_rect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->rect(), output);
  }

  // optional .cc.proto.PointF radii_upper_left = 2;
  if (has_radii_upper_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->radii_upper_left(), output);
  }

  // optional .cc.proto.PointF radii_upper_right = 3;
  if (has_radii_upper_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->radii_upper_right(), output);
  }

  // optional .cc.proto.PointF radii_lower_right = 4;
  if (has_radii_lower_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->radii_lower_right(), output);
  }

  // optional .cc.proto.PointF radii_lower_left = 5;
  if (has_radii_lower_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->radii_lower_left(), output);
  }

}

int SkRRect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cc.proto.RectF rect = 1;
    if (has_rect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rect());
    }

    // optional .cc.proto.PointF radii_upper_left = 2;
    if (has_radii_upper_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->radii_upper_left());
    }

    // optional .cc.proto.PointF radii_upper_right = 3;
    if (has_radii_upper_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->radii_upper_right());
    }

    // optional .cc.proto.PointF radii_lower_right = 4;
    if (has_radii_lower_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->radii_lower_right());
    }

    // optional .cc.proto.PointF radii_lower_left = 5;
    if (has_radii_lower_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->radii_lower_left());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkRRect::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SkRRect*>(&from));
}

void SkRRect::MergeFrom(const SkRRect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rect()) {
      mutable_rect()->::cc::proto::RectF::MergeFrom(from.rect());
    }
    if (from.has_radii_upper_left()) {
      mutable_radii_upper_left()->::cc::proto::PointF::MergeFrom(from.radii_upper_left());
    }
    if (from.has_radii_upper_right()) {
      mutable_radii_upper_right()->::cc::proto::PointF::MergeFrom(from.radii_upper_right());
    }
    if (from.has_radii_lower_right()) {
      mutable_radii_lower_right()->::cc::proto::PointF::MergeFrom(from.radii_lower_right());
    }
    if (from.has_radii_lower_left()) {
      mutable_radii_lower_left()->::cc::proto::PointF::MergeFrom(from.radii_lower_left());
    }
  }
}

void SkRRect::CopyFrom(const SkRRect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkRRect::IsInitialized() const {

  return true;
}

void SkRRect::Swap(SkRRect* other) {
  if (other != this) {
    std::swap(rect_, other->rect_);
    std::swap(radii_upper_left_, other->radii_upper_left_);
    std::swap(radii_upper_right_, other->radii_upper_right_);
    std::swap(radii_lower_right_, other->radii_lower_right_);
    std::swap(radii_lower_left_, other->radii_lower_left_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SkRRect::GetTypeName() const {
  return "cc.proto.SkRRect";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cc

// @@protoc_insertion_point(global_scope)
