// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: layer_tree_host.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "layer_tree_host.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace cc {
namespace proto {

void protobuf_ShutdownFile_layer_5ftree_5fhost_2eproto() {
  delete LayerTreeHost::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_layer_5ftree_5fhost_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_layer_5ftree_5fhost_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::cc::proto::protobuf_AddDesc_layer_2eproto();
  ::cc::proto::protobuf_AddDesc_layer_5fselection_5fbound_2eproto();
  ::cc::proto::protobuf_AddDesc_layer_5ftree_5fsettings_2eproto();
  ::cc::proto::protobuf_AddDesc_layer_5ftree_5fdebug_5fstate_2eproto();
  ::cc::proto::protobuf_AddDesc_property_5ftree_2eproto();
  ::cc::proto::protobuf_AddDesc_size_2eproto();
  ::cc::proto::protobuf_AddDesc_vector2df_2eproto();
  LayerTreeHost::default_instance_ = new LayerTreeHost();
  LayerTreeHost::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_layer_5ftree_5fhost_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_layer_5ftree_5fhost_2eproto_once_);
void protobuf_AddDesc_layer_5ftree_5fhost_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_layer_5ftree_5fhost_2eproto_once_,
                 &protobuf_AddDesc_layer_5ftree_5fhost_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_layer_5ftree_5fhost_2eproto {
  StaticDescriptorInitializer_layer_5ftree_5fhost_2eproto() {
    protobuf_AddDesc_layer_5ftree_5fhost_2eproto();
  }
} static_descriptor_initializer_layer_5ftree_5fhost_2eproto_;
#endif

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LayerTreeHost::kNeedsFullTreeSyncFieldNumber;
const int LayerTreeHost::kNeedsMetaInfoRecomputationFieldNumber;
const int LayerTreeHost::kSourceFrameNumberFieldNumber;
const int LayerTreeHost::kMetaInformationSequenceNumberFieldNumber;
const int LayerTreeHost::kRootLayerFieldNumber;
const int LayerTreeHost::kLayerUpdatesFieldNumber;
const int LayerTreeHost::kHudLayerIdFieldNumber;
const int LayerTreeHost::kDebugStateFieldNumber;
const int LayerTreeHost::kDeviceViewportSizeFieldNumber;
const int LayerTreeHost::kTopControlsShrinkBlinkSizeFieldNumber;
const int LayerTreeHost::kTopControlsHeightFieldNumber;
const int LayerTreeHost::kTopControlsShownRatioFieldNumber;
const int LayerTreeHost::kDeviceScaleFactorFieldNumber;
const int LayerTreeHost::kPaintedDeviceScaleFactorFieldNumber;
const int LayerTreeHost::kPageScaleFactorFieldNumber;
const int LayerTreeHost::kMinPageScaleFactorFieldNumber;
const int LayerTreeHost::kMaxPageScaleFactorFieldNumber;
const int LayerTreeHost::kElasticOverscrollFieldNumber;
const int LayerTreeHost::kHasGpuRasterizationTriggerFieldNumber;
const int LayerTreeHost::kContentIsSuitableForGpuRasterizationFieldNumber;
const int LayerTreeHost::kBackgroundColorFieldNumber;
const int LayerTreeHost::kHasTransparentBackgroundFieldNumber;
const int LayerTreeHost::kInPaintLayerContentsFieldNumber;
const int LayerTreeHost::kIdFieldNumber;
const int LayerTreeHost::kNextCommitForcesRedrawFieldNumber;
const int LayerTreeHost::kOverscrollElasticityLayerIdFieldNumber;
const int LayerTreeHost::kPageScaleLayerIdFieldNumber;
const int LayerTreeHost::kInnerViewportScrollLayerIdFieldNumber;
const int LayerTreeHost::kOuterViewportScrollLayerIdFieldNumber;
const int LayerTreeHost::kSelectionFieldNumber;
const int LayerTreeHost::kPropertyTreesFieldNumber;
const int LayerTreeHost::kSurfaceIdNamespaceFieldNumber;
const int LayerTreeHost::kNextSurfaceSequenceFieldNumber;
const int LayerTreeHost::kHaveWheelEventHandlersFieldNumber;
const int LayerTreeHost::kHaveScrollEventHandlersFieldNumber;
#endif  // !_MSC_VER

LayerTreeHost::LayerTreeHost()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LayerTreeHost::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  root_layer_ = const_cast< ::cc::proto::LayerNode*>(
      ::cc::proto::LayerNode::internal_default_instance());
#else
  root_layer_ = const_cast< ::cc::proto::LayerNode*>(&::cc::proto::LayerNode::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  layer_updates_ = const_cast< ::cc::proto::LayerUpdate*>(
      ::cc::proto::LayerUpdate::internal_default_instance());
#else
  layer_updates_ = const_cast< ::cc::proto::LayerUpdate*>(&::cc::proto::LayerUpdate::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  debug_state_ = const_cast< ::cc::proto::LayerTreeDebugState*>(
      ::cc::proto::LayerTreeDebugState::internal_default_instance());
#else
  debug_state_ = const_cast< ::cc::proto::LayerTreeDebugState*>(&::cc::proto::LayerTreeDebugState::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  device_viewport_size_ = const_cast< ::cc::proto::Size*>(
      ::cc::proto::Size::internal_default_instance());
#else
  device_viewport_size_ = const_cast< ::cc::proto::Size*>(&::cc::proto::Size::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  elastic_overscroll_ = const_cast< ::cc::proto::Vector2dF*>(
      ::cc::proto::Vector2dF::internal_default_instance());
#else
  elastic_overscroll_ = const_cast< ::cc::proto::Vector2dF*>(&::cc::proto::Vector2dF::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  selection_ = const_cast< ::cc::proto::LayerSelection*>(
      ::cc::proto::LayerSelection::internal_default_instance());
#else
  selection_ = const_cast< ::cc::proto::LayerSelection*>(&::cc::proto::LayerSelection::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  property_trees_ = const_cast< ::cc::proto::PropertyTrees*>(
      ::cc::proto::PropertyTrees::internal_default_instance());
#else
  property_trees_ = const_cast< ::cc::proto::PropertyTrees*>(&::cc::proto::PropertyTrees::default_instance());
#endif
}

LayerTreeHost::LayerTreeHost(const LayerTreeHost& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LayerTreeHost::SharedCtor() {
  _cached_size_ = 0;
  needs_full_tree_sync_ = false;
  needs_meta_info_recomputation_ = false;
  source_frame_number_ = 0;
  meta_information_sequence_number_ = 0;
  root_layer_ = NULL;
  layer_updates_ = NULL;
  hud_layer_id_ = 0;
  debug_state_ = NULL;
  device_viewport_size_ = NULL;
  top_controls_shrink_blink_size_ = false;
  top_controls_height_ = 0;
  top_controls_shown_ratio_ = 0;
  device_scale_factor_ = 0;
  painted_device_scale_factor_ = 0;
  page_scale_factor_ = 0;
  min_page_scale_factor_ = 0;
  max_page_scale_factor_ = 0;
  elastic_overscroll_ = NULL;
  has_gpu_rasterization_trigger_ = false;
  content_is_suitable_for_gpu_rasterization_ = false;
  background_color_ = 0u;
  has_transparent_background_ = false;
  in_paint_layer_contents_ = false;
  id_ = 0;
  next_commit_forces_redraw_ = false;
  overscroll_elasticity_layer_id_ = 0;
  page_scale_layer_id_ = 0;
  inner_viewport_scroll_layer_id_ = 0;
  outer_viewport_scroll_layer_id_ = 0;
  selection_ = NULL;
  property_trees_ = NULL;
  surface_id_namespace_ = 0u;
  next_surface_sequence_ = 0u;
  have_wheel_event_handlers_ = false;
  have_scroll_event_handlers_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LayerTreeHost::~LayerTreeHost() {
  SharedDtor();
}

void LayerTreeHost::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete root_layer_;
    delete layer_updates_;
    delete debug_state_;
    delete device_viewport_size_;
    delete elastic_overscroll_;
    delete selection_;
    delete property_trees_;
  }
}

void LayerTreeHost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LayerTreeHost& LayerTreeHost::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_layer_5ftree_5fhost_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_layer_5ftree_5fhost_2eproto();
#endif
  return *default_instance_;
}

LayerTreeHost* LayerTreeHost::default_instance_ = NULL;

LayerTreeHost* LayerTreeHost::New() const {
  return new LayerTreeHost;
}

void LayerTreeHost::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    needs_full_tree_sync_ = false;
    needs_meta_info_recomputation_ = false;
    source_frame_number_ = 0;
    meta_information_sequence_number_ = 0;
    if (has_root_layer()) {
      if (root_layer_ != NULL) root_layer_->::cc::proto::LayerNode::Clear();
    }
    if (has_layer_updates()) {
      if (layer_updates_ != NULL) layer_updates_->::cc::proto::LayerUpdate::Clear();
    }
    hud_layer_id_ = 0;
    if (has_debug_state()) {
      if (debug_state_ != NULL) debug_state_->::cc::proto::LayerTreeDebugState::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_device_viewport_size()) {
      if (device_viewport_size_ != NULL) device_viewport_size_->::cc::proto::Size::Clear();
    }
    top_controls_shrink_blink_size_ = false;
    top_controls_height_ = 0;
    top_controls_shown_ratio_ = 0;
    device_scale_factor_ = 0;
    painted_device_scale_factor_ = 0;
    page_scale_factor_ = 0;
    min_page_scale_factor_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    max_page_scale_factor_ = 0;
    if (has_elastic_overscroll()) {
      if (elastic_overscroll_ != NULL) elastic_overscroll_->::cc::proto::Vector2dF::Clear();
    }
    has_gpu_rasterization_trigger_ = false;
    content_is_suitable_for_gpu_rasterization_ = false;
    background_color_ = 0u;
    has_transparent_background_ = false;
    in_paint_layer_contents_ = false;
    id_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    next_commit_forces_redraw_ = false;
    overscroll_elasticity_layer_id_ = 0;
    page_scale_layer_id_ = 0;
    inner_viewport_scroll_layer_id_ = 0;
    outer_viewport_scroll_layer_id_ = 0;
    if (has_selection()) {
      if (selection_ != NULL) selection_->::cc::proto::LayerSelection::Clear();
    }
    if (has_property_trees()) {
      if (property_trees_ != NULL) property_trees_->::cc::proto::PropertyTrees::Clear();
    }
    surface_id_namespace_ = 0u;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    next_surface_sequence_ = 0u;
    have_wheel_event_handlers_ = false;
    have_scroll_event_handlers_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LayerTreeHost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool needs_full_tree_sync = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needs_full_tree_sync_)));
          set_has_needs_full_tree_sync();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_needs_meta_info_recomputation;
        break;
      }

      // optional bool needs_meta_info_recomputation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needs_meta_info_recomputation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needs_meta_info_recomputation_)));
          set_has_needs_meta_info_recomputation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_source_frame_number;
        break;
      }

      // optional int32 source_frame_number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_frame_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_frame_number_)));
          set_has_source_frame_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_meta_information_sequence_number;
        break;
      }

      // optional int32 meta_information_sequence_number = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_meta_information_sequence_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &meta_information_sequence_number_)));
          set_has_meta_information_sequence_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_root_layer;
        break;
      }

      // optional .cc.proto.LayerNode root_layer = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_root_layer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_root_layer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_layer_updates;
        break;
      }

      // optional .cc.proto.LayerUpdate layer_updates = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_layer_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_layer_updates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_hud_layer_id;
        break;
      }

      // optional int32 hud_layer_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hud_layer_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hud_layer_id_)));
          set_has_hud_layer_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_debug_state;
        break;
      }

      // optional .cc.proto.LayerTreeDebugState debug_state = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_debug_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_device_viewport_size;
        break;
      }

      // optional .cc.proto.Size device_viewport_size = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_viewport_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_viewport_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_top_controls_shrink_blink_size;
        break;
      }

      // optional bool top_controls_shrink_blink_size = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_top_controls_shrink_blink_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &top_controls_shrink_blink_size_)));
          set_has_top_controls_shrink_blink_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_top_controls_height;
        break;
      }

      // optional float top_controls_height = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_top_controls_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &top_controls_height_)));
          set_has_top_controls_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_top_controls_shown_ratio;
        break;
      }

      // optional float top_controls_shown_ratio = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_top_controls_shown_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &top_controls_shown_ratio_)));
          set_has_top_controls_shown_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_device_scale_factor;
        break;
      }

      // optional float device_scale_factor = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_device_scale_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &device_scale_factor_)));
          set_has_device_scale_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_painted_device_scale_factor;
        break;
      }

      // optional float painted_device_scale_factor = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_painted_device_scale_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &painted_device_scale_factor_)));
          set_has_painted_device_scale_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_page_scale_factor;
        break;
      }

      // optional float page_scale_factor = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_page_scale_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &page_scale_factor_)));
          set_has_page_scale_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_min_page_scale_factor;
        break;
      }

      // optional float min_page_scale_factor = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_min_page_scale_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_page_scale_factor_)));
          set_has_min_page_scale_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_max_page_scale_factor;
        break;
      }

      // optional float max_page_scale_factor = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_page_scale_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_page_scale_factor_)));
          set_has_max_page_scale_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_elastic_overscroll;
        break;
      }

      // optional .cc.proto.Vector2dF elastic_overscroll = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_elastic_overscroll:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_elastic_overscroll()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_has_gpu_rasterization_trigger;
        break;
      }

      // optional bool has_gpu_rasterization_trigger = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_gpu_rasterization_trigger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_gpu_rasterization_trigger_)));
          set_has_has_gpu_rasterization_trigger();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_content_is_suitable_for_gpu_rasterization;
        break;
      }

      // optional bool content_is_suitable_for_gpu_rasterization = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_content_is_suitable_for_gpu_rasterization:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &content_is_suitable_for_gpu_rasterization_)));
          set_has_content_is_suitable_for_gpu_rasterization();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_background_color;
        break;
      }

      // optional uint32 background_color = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_background_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &background_color_)));
          set_has_background_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_has_transparent_background;
        break;
      }

      // optional bool has_transparent_background = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_transparent_background:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_transparent_background_)));
          set_has_has_transparent_background();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_in_paint_layer_contents;
        break;
      }

      // optional bool in_paint_layer_contents = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in_paint_layer_contents:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_paint_layer_contents_)));
          set_has_in_paint_layer_contents();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_id;
        break;
      }

      // optional int32 id = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_next_commit_forces_redraw;
        break;
      }

      // optional bool next_commit_forces_redraw = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_commit_forces_redraw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &next_commit_forces_redraw_)));
          set_has_next_commit_forces_redraw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_overscroll_elasticity_layer_id;
        break;
      }

      // optional int32 overscroll_elasticity_layer_id = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_overscroll_elasticity_layer_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &overscroll_elasticity_layer_id_)));
          set_has_overscroll_elasticity_layer_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_page_scale_layer_id;
        break;
      }

      // optional int32 page_scale_layer_id = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page_scale_layer_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_scale_layer_id_)));
          set_has_page_scale_layer_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_inner_viewport_scroll_layer_id;
        break;
      }

      // optional int32 inner_viewport_scroll_layer_id = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inner_viewport_scroll_layer_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inner_viewport_scroll_layer_id_)));
          set_has_inner_viewport_scroll_layer_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_outer_viewport_scroll_layer_id;
        break;
      }

      // optional int32 outer_viewport_scroll_layer_id = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outer_viewport_scroll_layer_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outer_viewport_scroll_layer_id_)));
          set_has_outer_viewport_scroll_layer_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_selection;
        break;
      }

      // optional .cc.proto.LayerSelection selection = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_property_trees;
        break;
      }

      // optional .cc.proto.PropertyTrees property_trees = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_property_trees:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_property_trees()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_surface_id_namespace;
        break;
      }

      // optional uint32 surface_id_namespace = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_surface_id_namespace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &surface_id_namespace_)));
          set_has_surface_id_namespace();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_next_surface_sequence;
        break;
      }

      // optional uint32 next_surface_sequence = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_surface_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &next_surface_sequence_)));
          set_has_next_surface_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_have_wheel_event_handlers;
        break;
      }

      // optional bool have_wheel_event_handlers = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_have_wheel_event_handlers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_wheel_event_handlers_)));
          set_has_have_wheel_event_handlers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_have_scroll_event_handlers;
        break;
      }

      // optional bool have_scroll_event_handlers = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_have_scroll_event_handlers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_scroll_event_handlers_)));
          set_has_have_scroll_event_handlers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LayerTreeHost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool needs_full_tree_sync = 1;
  if (has_needs_full_tree_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->needs_full_tree_sync(), output);
  }

  // optional bool needs_meta_info_recomputation = 2;
  if (has_needs_meta_info_recomputation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->needs_meta_info_recomputation(), output);
  }

  // optional int32 source_frame_number = 3;
  if (has_source_frame_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->source_frame_number(), output);
  }

  // optional int32 meta_information_sequence_number = 4;
  if (has_meta_information_sequence_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->meta_information_sequence_number(), output);
  }

  // optional .cc.proto.LayerNode root_layer = 5;
  if (has_root_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->root_layer(), output);
  }

  // optional .cc.proto.LayerUpdate layer_updates = 6;
  if (has_layer_updates()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->layer_updates(), output);
  }

  // optional int32 hud_layer_id = 7;
  if (has_hud_layer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->hud_layer_id(), output);
  }

  // optional .cc.proto.LayerTreeDebugState debug_state = 8;
  if (has_debug_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->debug_state(), output);
  }

  // optional .cc.proto.Size device_viewport_size = 9;
  if (has_device_viewport_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->device_viewport_size(), output);
  }

  // optional bool top_controls_shrink_blink_size = 10;
  if (has_top_controls_shrink_blink_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->top_controls_shrink_blink_size(), output);
  }

  // optional float top_controls_height = 11;
  if (has_top_controls_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->top_controls_height(), output);
  }

  // optional float top_controls_shown_ratio = 12;
  if (has_top_controls_shown_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->top_controls_shown_ratio(), output);
  }

  // optional float device_scale_factor = 13;
  if (has_device_scale_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->device_scale_factor(), output);
  }

  // optional float painted_device_scale_factor = 14;
  if (has_painted_device_scale_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->painted_device_scale_factor(), output);
  }

  // optional float page_scale_factor = 15;
  if (has_page_scale_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->page_scale_factor(), output);
  }

  // optional float min_page_scale_factor = 16;
  if (has_min_page_scale_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->min_page_scale_factor(), output);
  }

  // optional float max_page_scale_factor = 17;
  if (has_max_page_scale_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->max_page_scale_factor(), output);
  }

  // optional .cc.proto.Vector2dF elastic_overscroll = 18;
  if (has_elastic_overscroll()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, this->elastic_overscroll(), output);
  }

  // optional bool has_gpu_rasterization_trigger = 19;
  if (has_has_gpu_rasterization_trigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->has_gpu_rasterization_trigger(), output);
  }

  // optional bool content_is_suitable_for_gpu_rasterization = 20;
  if (has_content_is_suitable_for_gpu_rasterization()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->content_is_suitable_for_gpu_rasterization(), output);
  }

  // optional uint32 background_color = 21;
  if (has_background_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->background_color(), output);
  }

  // optional bool has_transparent_background = 22;
  if (has_has_transparent_background()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->has_transparent_background(), output);
  }

  // optional bool in_paint_layer_contents = 23;
  if (has_in_paint_layer_contents()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->in_paint_layer_contents(), output);
  }

  // optional int32 id = 24;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->id(), output);
  }

  // optional bool next_commit_forces_redraw = 25;
  if (has_next_commit_forces_redraw()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->next_commit_forces_redraw(), output);
  }

  // optional int32 overscroll_elasticity_layer_id = 26;
  if (has_overscroll_elasticity_layer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->overscroll_elasticity_layer_id(), output);
  }

  // optional int32 page_scale_layer_id = 27;
  if (has_page_scale_layer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->page_scale_layer_id(), output);
  }

  // optional int32 inner_viewport_scroll_layer_id = 28;
  if (has_inner_viewport_scroll_layer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->inner_viewport_scroll_layer_id(), output);
  }

  // optional int32 outer_viewport_scroll_layer_id = 29;
  if (has_outer_viewport_scroll_layer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->outer_viewport_scroll_layer_id(), output);
  }

  // optional .cc.proto.LayerSelection selection = 30;
  if (has_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      30, this->selection(), output);
  }

  // optional .cc.proto.PropertyTrees property_trees = 31;
  if (has_property_trees()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      31, this->property_trees(), output);
  }

  // optional uint32 surface_id_namespace = 32;
  if (has_surface_id_namespace()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->surface_id_namespace(), output);
  }

  // optional uint32 next_surface_sequence = 33;
  if (has_next_surface_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->next_surface_sequence(), output);
  }

  // optional bool have_wheel_event_handlers = 34;
  if (has_have_wheel_event_handlers()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->have_wheel_event_handlers(), output);
  }

  // optional bool have_scroll_event_handlers = 35;
  if (has_have_scroll_event_handlers()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->have_scroll_event_handlers(), output);
  }

}

int LayerTreeHost::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool needs_full_tree_sync = 1;
    if (has_needs_full_tree_sync()) {
      total_size += 1 + 1;
    }

    // optional bool needs_meta_info_recomputation = 2;
    if (has_needs_meta_info_recomputation()) {
      total_size += 1 + 1;
    }

    // optional int32 source_frame_number = 3;
    if (has_source_frame_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->source_frame_number());
    }

    // optional int32 meta_information_sequence_number = 4;
    if (has_meta_information_sequence_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->meta_information_sequence_number());
    }

    // optional .cc.proto.LayerNode root_layer = 5;
    if (has_root_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->root_layer());
    }

    // optional .cc.proto.LayerUpdate layer_updates = 6;
    if (has_layer_updates()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->layer_updates());
    }

    // optional int32 hud_layer_id = 7;
    if (has_hud_layer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hud_layer_id());
    }

    // optional .cc.proto.LayerTreeDebugState debug_state = 8;
    if (has_debug_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->debug_state());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .cc.proto.Size device_viewport_size = 9;
    if (has_device_viewport_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device_viewport_size());
    }

    // optional bool top_controls_shrink_blink_size = 10;
    if (has_top_controls_shrink_blink_size()) {
      total_size += 1 + 1;
    }

    // optional float top_controls_height = 11;
    if (has_top_controls_height()) {
      total_size += 1 + 4;
    }

    // optional float top_controls_shown_ratio = 12;
    if (has_top_controls_shown_ratio()) {
      total_size += 1 + 4;
    }

    // optional float device_scale_factor = 13;
    if (has_device_scale_factor()) {
      total_size += 1 + 4;
    }

    // optional float painted_device_scale_factor = 14;
    if (has_painted_device_scale_factor()) {
      total_size += 1 + 4;
    }

    // optional float page_scale_factor = 15;
    if (has_page_scale_factor()) {
      total_size += 1 + 4;
    }

    // optional float min_page_scale_factor = 16;
    if (has_min_page_scale_factor()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float max_page_scale_factor = 17;
    if (has_max_page_scale_factor()) {
      total_size += 2 + 4;
    }

    // optional .cc.proto.Vector2dF elastic_overscroll = 18;
    if (has_elastic_overscroll()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->elastic_overscroll());
    }

    // optional bool has_gpu_rasterization_trigger = 19;
    if (has_has_gpu_rasterization_trigger()) {
      total_size += 2 + 1;
    }

    // optional bool content_is_suitable_for_gpu_rasterization = 20;
    if (has_content_is_suitable_for_gpu_rasterization()) {
      total_size += 2 + 1;
    }

    // optional uint32 background_color = 21;
    if (has_background_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->background_color());
    }

    // optional bool has_transparent_background = 22;
    if (has_has_transparent_background()) {
      total_size += 2 + 1;
    }

    // optional bool in_paint_layer_contents = 23;
    if (has_in_paint_layer_contents()) {
      total_size += 2 + 1;
    }

    // optional int32 id = 24;
    if (has_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool next_commit_forces_redraw = 25;
    if (has_next_commit_forces_redraw()) {
      total_size += 2 + 1;
    }

    // optional int32 overscroll_elasticity_layer_id = 26;
    if (has_overscroll_elasticity_layer_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->overscroll_elasticity_layer_id());
    }

    // optional int32 page_scale_layer_id = 27;
    if (has_page_scale_layer_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_scale_layer_id());
    }

    // optional int32 inner_viewport_scroll_layer_id = 28;
    if (has_inner_viewport_scroll_layer_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inner_viewport_scroll_layer_id());
    }

    // optional int32 outer_viewport_scroll_layer_id = 29;
    if (has_outer_viewport_scroll_layer_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outer_viewport_scroll_layer_id());
    }

    // optional .cc.proto.LayerSelection selection = 30;
    if (has_selection()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selection());
    }

    // optional .cc.proto.PropertyTrees property_trees = 31;
    if (has_property_trees()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->property_trees());
    }

    // optional uint32 surface_id_namespace = 32;
    if (has_surface_id_namespace()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->surface_id_namespace());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 next_surface_sequence = 33;
    if (has_next_surface_sequence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->next_surface_sequence());
    }

    // optional bool have_wheel_event_handlers = 34;
    if (has_have_wheel_event_handlers()) {
      total_size += 2 + 1;
    }

    // optional bool have_scroll_event_handlers = 35;
    if (has_have_scroll_event_handlers()) {
      total_size += 2 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LayerTreeHost::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LayerTreeHost*>(&from));
}

void LayerTreeHost::MergeFrom(const LayerTreeHost& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_needs_full_tree_sync()) {
      set_needs_full_tree_sync(from.needs_full_tree_sync());
    }
    if (from.has_needs_meta_info_recomputation()) {
      set_needs_meta_info_recomputation(from.needs_meta_info_recomputation());
    }
    if (from.has_source_frame_number()) {
      set_source_frame_number(from.source_frame_number());
    }
    if (from.has_meta_information_sequence_number()) {
      set_meta_information_sequence_number(from.meta_information_sequence_number());
    }
    if (from.has_root_layer()) {
      mutable_root_layer()->::cc::proto::LayerNode::MergeFrom(from.root_layer());
    }
    if (from.has_layer_updates()) {
      mutable_layer_updates()->::cc::proto::LayerUpdate::MergeFrom(from.layer_updates());
    }
    if (from.has_hud_layer_id()) {
      set_hud_layer_id(from.hud_layer_id());
    }
    if (from.has_debug_state()) {
      mutable_debug_state()->::cc::proto::LayerTreeDebugState::MergeFrom(from.debug_state());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_device_viewport_size()) {
      mutable_device_viewport_size()->::cc::proto::Size::MergeFrom(from.device_viewport_size());
    }
    if (from.has_top_controls_shrink_blink_size()) {
      set_top_controls_shrink_blink_size(from.top_controls_shrink_blink_size());
    }
    if (from.has_top_controls_height()) {
      set_top_controls_height(from.top_controls_height());
    }
    if (from.has_top_controls_shown_ratio()) {
      set_top_controls_shown_ratio(from.top_controls_shown_ratio());
    }
    if (from.has_device_scale_factor()) {
      set_device_scale_factor(from.device_scale_factor());
    }
    if (from.has_painted_device_scale_factor()) {
      set_painted_device_scale_factor(from.painted_device_scale_factor());
    }
    if (from.has_page_scale_factor()) {
      set_page_scale_factor(from.page_scale_factor());
    }
    if (from.has_min_page_scale_factor()) {
      set_min_page_scale_factor(from.min_page_scale_factor());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_max_page_scale_factor()) {
      set_max_page_scale_factor(from.max_page_scale_factor());
    }
    if (from.has_elastic_overscroll()) {
      mutable_elastic_overscroll()->::cc::proto::Vector2dF::MergeFrom(from.elastic_overscroll());
    }
    if (from.has_has_gpu_rasterization_trigger()) {
      set_has_gpu_rasterization_trigger(from.has_gpu_rasterization_trigger());
    }
    if (from.has_content_is_suitable_for_gpu_rasterization()) {
      set_content_is_suitable_for_gpu_rasterization(from.content_is_suitable_for_gpu_rasterization());
    }
    if (from.has_background_color()) {
      set_background_color(from.background_color());
    }
    if (from.has_has_transparent_background()) {
      set_has_transparent_background(from.has_transparent_background());
    }
    if (from.has_in_paint_layer_contents()) {
      set_in_paint_layer_contents(from.in_paint_layer_contents());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_next_commit_forces_redraw()) {
      set_next_commit_forces_redraw(from.next_commit_forces_redraw());
    }
    if (from.has_overscroll_elasticity_layer_id()) {
      set_overscroll_elasticity_layer_id(from.overscroll_elasticity_layer_id());
    }
    if (from.has_page_scale_layer_id()) {
      set_page_scale_layer_id(from.page_scale_layer_id());
    }
    if (from.has_inner_viewport_scroll_layer_id()) {
      set_inner_viewport_scroll_layer_id(from.inner_viewport_scroll_layer_id());
    }
    if (from.has_outer_viewport_scroll_layer_id()) {
      set_outer_viewport_scroll_layer_id(from.outer_viewport_scroll_layer_id());
    }
    if (from.has_selection()) {
      mutable_selection()->::cc::proto::LayerSelection::MergeFrom(from.selection());
    }
    if (from.has_property_trees()) {
      mutable_property_trees()->::cc::proto::PropertyTrees::MergeFrom(from.property_trees());
    }
    if (from.has_surface_id_namespace()) {
      set_surface_id_namespace(from.surface_id_namespace());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_next_surface_sequence()) {
      set_next_surface_sequence(from.next_surface_sequence());
    }
    if (from.has_have_wheel_event_handlers()) {
      set_have_wheel_event_handlers(from.have_wheel_event_handlers());
    }
    if (from.has_have_scroll_event_handlers()) {
      set_have_scroll_event_handlers(from.have_scroll_event_handlers());
    }
  }
}

void LayerTreeHost::CopyFrom(const LayerTreeHost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerTreeHost::IsInitialized() const {

  return true;
}

void LayerTreeHost::Swap(LayerTreeHost* other) {
  if (other != this) {
    std::swap(needs_full_tree_sync_, other->needs_full_tree_sync_);
    std::swap(needs_meta_info_recomputation_, other->needs_meta_info_recomputation_);
    std::swap(source_frame_number_, other->source_frame_number_);
    std::swap(meta_information_sequence_number_, other->meta_information_sequence_number_);
    std::swap(root_layer_, other->root_layer_);
    std::swap(layer_updates_, other->layer_updates_);
    std::swap(hud_layer_id_, other->hud_layer_id_);
    std::swap(debug_state_, other->debug_state_);
    std::swap(device_viewport_size_, other->device_viewport_size_);
    std::swap(top_controls_shrink_blink_size_, other->top_controls_shrink_blink_size_);
    std::swap(top_controls_height_, other->top_controls_height_);
    std::swap(top_controls_shown_ratio_, other->top_controls_shown_ratio_);
    std::swap(device_scale_factor_, other->device_scale_factor_);
    std::swap(painted_device_scale_factor_, other->painted_device_scale_factor_);
    std::swap(page_scale_factor_, other->page_scale_factor_);
    std::swap(min_page_scale_factor_, other->min_page_scale_factor_);
    std::swap(max_page_scale_factor_, other->max_page_scale_factor_);
    std::swap(elastic_overscroll_, other->elastic_overscroll_);
    std::swap(has_gpu_rasterization_trigger_, other->has_gpu_rasterization_trigger_);
    std::swap(content_is_suitable_for_gpu_rasterization_, other->content_is_suitable_for_gpu_rasterization_);
    std::swap(background_color_, other->background_color_);
    std::swap(has_transparent_background_, other->has_transparent_background_);
    std::swap(in_paint_layer_contents_, other->in_paint_layer_contents_);
    std::swap(id_, other->id_);
    std::swap(next_commit_forces_redraw_, other->next_commit_forces_redraw_);
    std::swap(overscroll_elasticity_layer_id_, other->overscroll_elasticity_layer_id_);
    std::swap(page_scale_layer_id_, other->page_scale_layer_id_);
    std::swap(inner_viewport_scroll_layer_id_, other->inner_viewport_scroll_layer_id_);
    std::swap(outer_viewport_scroll_layer_id_, other->outer_viewport_scroll_layer_id_);
    std::swap(selection_, other->selection_);
    std::swap(property_trees_, other->property_trees_);
    std::swap(surface_id_namespace_, other->surface_id_namespace_);
    std::swap(next_surface_sequence_, other->next_surface_sequence_);
    std::swap(have_wheel_event_handlers_, other->have_wheel_event_handlers_);
    std::swap(have_scroll_event_handlers_, other->have_scroll_event_handlers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LayerTreeHost::GetTypeName() const {
  return "cc.proto.LayerTreeHost";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cc

// @@protoc_insertion_point(global_scope)
