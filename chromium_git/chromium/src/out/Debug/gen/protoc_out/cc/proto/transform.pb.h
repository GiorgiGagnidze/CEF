// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transform.proto

#ifndef PROTOBUF_transform_2eproto__INCLUDED
#define PROTOBUF_transform_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)
#include "cc/proto/cc_proto_export.h"

namespace cc {
namespace proto {

// Internal implementation detail -- do not call these.
void CC_PROTO_EXPORT protobuf_AddDesc_transform_2eproto();
void protobuf_AssignDesc_transform_2eproto();
void protobuf_ShutdownFile_transform_2eproto();

class Transform;

// ===================================================================

class CC_PROTO_EXPORT Transform : public ::google::protobuf::MessageLite {
 public:
  Transform();
  virtual ~Transform();

  Transform(const Transform& from);

  inline Transform& operator=(const Transform& from) {
    CopyFrom(from);
    return *this;
  }

  static const Transform& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Transform* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Transform* other);

  // implements Message ----------------------------------------------

  Transform* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Transform& from);
  void MergeFrom(const Transform& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float matrix = 1 [packed = true];
  inline int matrix_size() const;
  inline void clear_matrix();
  static const int kMatrixFieldNumber = 1;
  inline float matrix(int index) const;
  inline void set_matrix(int index, float value);
  inline void add_matrix(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      matrix() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_matrix();

  // @@protoc_insertion_point(class_scope:cc.proto.Transform)
 private:

  ::google::protobuf::RepeatedField< float > matrix_;
  mutable int _matrix_cached_byte_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void CC_PROTO_EXPORT protobuf_AddDesc_transform_2eproto_impl();
  #else
  friend void CC_PROTO_EXPORT protobuf_AddDesc_transform_2eproto();
  #endif
  friend void protobuf_AssignDesc_transform_2eproto();
  friend void protobuf_ShutdownFile_transform_2eproto();

  void InitAsDefaultInstance();
  static Transform* default_instance_;
};
// ===================================================================


// ===================================================================

// Transform

// repeated float matrix = 1 [packed = true];
inline int Transform::matrix_size() const {
  return matrix_.size();
}
inline void Transform::clear_matrix() {
  matrix_.Clear();
}
inline float Transform::matrix(int index) const {
  return matrix_.Get(index);
}
inline void Transform::set_matrix(int index, float value) {
  matrix_.Set(index, value);
}
inline void Transform::add_matrix(float value) {
  matrix_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
Transform::matrix() const {
  return matrix_;
}
inline ::google::protobuf::RepeatedField< float >*
Transform::mutable_matrix() {
  return &matrix_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cc

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_transform_2eproto__INCLUDED
