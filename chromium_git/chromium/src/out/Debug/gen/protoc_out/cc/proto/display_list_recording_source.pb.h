// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: display_list_recording_source.proto

#ifndef PROTOBUF_display_5flist_5frecording_5fsource_2eproto__INCLUDED
#define PROTOBUF_display_5flist_5frecording_5fsource_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "display_item.pb.h"
#include "rect.pb.h"
#include "size.pb.h"
// @@protoc_insertion_point(includes)
#include "cc/proto/cc_proto_export.h"

namespace cc {
namespace proto {

// Internal implementation detail -- do not call these.
void CC_PROTO_EXPORT protobuf_AddDesc_display_5flist_5frecording_5fsource_2eproto();
void protobuf_AssignDesc_display_5flist_5frecording_5fsource_2eproto();
void protobuf_ShutdownFile_display_5flist_5frecording_5fsource_2eproto();

class DisplayListRecordingSource;

// ===================================================================

class CC_PROTO_EXPORT DisplayListRecordingSource : public ::google::protobuf::MessageLite {
 public:
  DisplayListRecordingSource();
  virtual ~DisplayListRecordingSource();

  DisplayListRecordingSource(const DisplayListRecordingSource& from);

  inline DisplayListRecordingSource& operator=(const DisplayListRecordingSource& from) {
    CopyFrom(from);
    return *this;
  }

  static const DisplayListRecordingSource& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DisplayListRecordingSource* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DisplayListRecordingSource* other);

  // implements Message ----------------------------------------------

  DisplayListRecordingSource* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DisplayListRecordingSource& from);
  void MergeFrom(const DisplayListRecordingSource& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cc.proto.Rect recorded_viewport = 1;
  inline bool has_recorded_viewport() const;
  inline void clear_recorded_viewport();
  static const int kRecordedViewportFieldNumber = 1;
  inline const ::cc::proto::Rect& recorded_viewport() const;
  inline ::cc::proto::Rect* mutable_recorded_viewport();
  inline ::cc::proto::Rect* release_recorded_viewport();
  inline void set_allocated_recorded_viewport(::cc::proto::Rect* recorded_viewport);

  // optional .cc.proto.Size size = 2;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 2;
  inline const ::cc::proto::Size& size() const;
  inline ::cc::proto::Size* mutable_size();
  inline ::cc::proto::Size* release_size();
  inline void set_allocated_size(::cc::proto::Size* size);

  // optional int64 slow_down_raster_scale_factor_for_debug = 3;
  inline bool has_slow_down_raster_scale_factor_for_debug() const;
  inline void clear_slow_down_raster_scale_factor_for_debug();
  static const int kSlowDownRasterScaleFactorForDebugFieldNumber = 3;
  inline ::google::protobuf::int64 slow_down_raster_scale_factor_for_debug() const;
  inline void set_slow_down_raster_scale_factor_for_debug(::google::protobuf::int64 value);

  // optional bool generate_discardable_images_metadata = 4;
  inline bool has_generate_discardable_images_metadata() const;
  inline void clear_generate_discardable_images_metadata();
  static const int kGenerateDiscardableImagesMetadataFieldNumber = 4;
  inline bool generate_discardable_images_metadata() const;
  inline void set_generate_discardable_images_metadata(bool value);

  // optional bool requires_clear = 5;
  inline bool has_requires_clear() const;
  inline void clear_requires_clear();
  static const int kRequiresClearFieldNumber = 5;
  inline bool requires_clear() const;
  inline void set_requires_clear(bool value);

  // optional bool is_solid_color = 6;
  inline bool has_is_solid_color() const;
  inline void clear_is_solid_color();
  static const int kIsSolidColorFieldNumber = 6;
  inline bool is_solid_color() const;
  inline void set_is_solid_color(bool value);

  // optional bool clear_canvas_with_debug_color = 7;
  inline bool has_clear_canvas_with_debug_color() const;
  inline void clear_clear_canvas_with_debug_color();
  static const int kClearCanvasWithDebugColorFieldNumber = 7;
  inline bool clear_canvas_with_debug_color() const;
  inline void set_clear_canvas_with_debug_color(bool value);

  // optional uint64 solid_color = 8;
  inline bool has_solid_color() const;
  inline void clear_solid_color();
  static const int kSolidColorFieldNumber = 8;
  inline ::google::protobuf::uint64 solid_color() const;
  inline void set_solid_color(::google::protobuf::uint64 value);

  // optional uint64 background_color = 9;
  inline bool has_background_color() const;
  inline void clear_background_color();
  static const int kBackgroundColorFieldNumber = 9;
  inline ::google::protobuf::uint64 background_color() const;
  inline void set_background_color(::google::protobuf::uint64 value);

  // optional .cc.proto.DisplayItemList display_list = 10;
  inline bool has_display_list() const;
  inline void clear_display_list();
  static const int kDisplayListFieldNumber = 10;
  inline const ::cc::proto::DisplayItemList& display_list() const;
  inline ::cc::proto::DisplayItemList* mutable_display_list();
  inline ::cc::proto::DisplayItemList* release_display_list();
  inline void set_allocated_display_list(::cc::proto::DisplayItemList* display_list);

  // @@protoc_insertion_point(class_scope:cc.proto.DisplayListRecordingSource)
 private:
  inline void set_has_recorded_viewport();
  inline void clear_has_recorded_viewport();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_slow_down_raster_scale_factor_for_debug();
  inline void clear_has_slow_down_raster_scale_factor_for_debug();
  inline void set_has_generate_discardable_images_metadata();
  inline void clear_has_generate_discardable_images_metadata();
  inline void set_has_requires_clear();
  inline void clear_has_requires_clear();
  inline void set_has_is_solid_color();
  inline void clear_has_is_solid_color();
  inline void set_has_clear_canvas_with_debug_color();
  inline void clear_has_clear_canvas_with_debug_color();
  inline void set_has_solid_color();
  inline void clear_has_solid_color();
  inline void set_has_background_color();
  inline void clear_has_background_color();
  inline void set_has_display_list();
  inline void clear_has_display_list();

  ::cc::proto::Rect* recorded_viewport_;
  ::cc::proto::Size* size_;
  ::google::protobuf::int64 slow_down_raster_scale_factor_for_debug_;
  ::google::protobuf::uint64 solid_color_;
  ::google::protobuf::uint64 background_color_;
  ::cc::proto::DisplayItemList* display_list_;
  bool generate_discardable_images_metadata_;
  bool requires_clear_;
  bool is_solid_color_;
  bool clear_canvas_with_debug_color_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void CC_PROTO_EXPORT protobuf_AddDesc_display_5flist_5frecording_5fsource_2eproto_impl();
  #else
  friend void CC_PROTO_EXPORT protobuf_AddDesc_display_5flist_5frecording_5fsource_2eproto();
  #endif
  friend void protobuf_AssignDesc_display_5flist_5frecording_5fsource_2eproto();
  friend void protobuf_ShutdownFile_display_5flist_5frecording_5fsource_2eproto();

  void InitAsDefaultInstance();
  static DisplayListRecordingSource* default_instance_;
};
// ===================================================================


// ===================================================================

// DisplayListRecordingSource

// optional .cc.proto.Rect recorded_viewport = 1;
inline bool DisplayListRecordingSource::has_recorded_viewport() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DisplayListRecordingSource::set_has_recorded_viewport() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DisplayListRecordingSource::clear_has_recorded_viewport() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DisplayListRecordingSource::clear_recorded_viewport() {
  if (recorded_viewport_ != NULL) recorded_viewport_->::cc::proto::Rect::Clear();
  clear_has_recorded_viewport();
}
inline const ::cc::proto::Rect& DisplayListRecordingSource::recorded_viewport() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return recorded_viewport_ != NULL ? *recorded_viewport_ : *default_instance().recorded_viewport_;
#else
  return recorded_viewport_ != NULL ? *recorded_viewport_ : *default_instance_->recorded_viewport_;
#endif
}
inline ::cc::proto::Rect* DisplayListRecordingSource::mutable_recorded_viewport() {
  set_has_recorded_viewport();
  if (recorded_viewport_ == NULL) recorded_viewport_ = new ::cc::proto::Rect;
  return recorded_viewport_;
}
inline ::cc::proto::Rect* DisplayListRecordingSource::release_recorded_viewport() {
  clear_has_recorded_viewport();
  ::cc::proto::Rect* temp = recorded_viewport_;
  recorded_viewport_ = NULL;
  return temp;
}
inline void DisplayListRecordingSource::set_allocated_recorded_viewport(::cc::proto::Rect* recorded_viewport) {
  delete recorded_viewport_;
  recorded_viewport_ = recorded_viewport;
  if (recorded_viewport) {
    set_has_recorded_viewport();
  } else {
    clear_has_recorded_viewport();
  }
}

// optional .cc.proto.Size size = 2;
inline bool DisplayListRecordingSource::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DisplayListRecordingSource::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DisplayListRecordingSource::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DisplayListRecordingSource::clear_size() {
  if (size_ != NULL) size_->::cc::proto::Size::Clear();
  clear_has_size();
}
inline const ::cc::proto::Size& DisplayListRecordingSource::size() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return size_ != NULL ? *size_ : *default_instance().size_;
#else
  return size_ != NULL ? *size_ : *default_instance_->size_;
#endif
}
inline ::cc::proto::Size* DisplayListRecordingSource::mutable_size() {
  set_has_size();
  if (size_ == NULL) size_ = new ::cc::proto::Size;
  return size_;
}
inline ::cc::proto::Size* DisplayListRecordingSource::release_size() {
  clear_has_size();
  ::cc::proto::Size* temp = size_;
  size_ = NULL;
  return temp;
}
inline void DisplayListRecordingSource::set_allocated_size(::cc::proto::Size* size) {
  delete size_;
  size_ = size;
  if (size) {
    set_has_size();
  } else {
    clear_has_size();
  }
}

// optional int64 slow_down_raster_scale_factor_for_debug = 3;
inline bool DisplayListRecordingSource::has_slow_down_raster_scale_factor_for_debug() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DisplayListRecordingSource::set_has_slow_down_raster_scale_factor_for_debug() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DisplayListRecordingSource::clear_has_slow_down_raster_scale_factor_for_debug() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DisplayListRecordingSource::clear_slow_down_raster_scale_factor_for_debug() {
  slow_down_raster_scale_factor_for_debug_ = GOOGLE_LONGLONG(0);
  clear_has_slow_down_raster_scale_factor_for_debug();
}
inline ::google::protobuf::int64 DisplayListRecordingSource::slow_down_raster_scale_factor_for_debug() const {
  return slow_down_raster_scale_factor_for_debug_;
}
inline void DisplayListRecordingSource::set_slow_down_raster_scale_factor_for_debug(::google::protobuf::int64 value) {
  set_has_slow_down_raster_scale_factor_for_debug();
  slow_down_raster_scale_factor_for_debug_ = value;
}

// optional bool generate_discardable_images_metadata = 4;
inline bool DisplayListRecordingSource::has_generate_discardable_images_metadata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DisplayListRecordingSource::set_has_generate_discardable_images_metadata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DisplayListRecordingSource::clear_has_generate_discardable_images_metadata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DisplayListRecordingSource::clear_generate_discardable_images_metadata() {
  generate_discardable_images_metadata_ = false;
  clear_has_generate_discardable_images_metadata();
}
inline bool DisplayListRecordingSource::generate_discardable_images_metadata() const {
  return generate_discardable_images_metadata_;
}
inline void DisplayListRecordingSource::set_generate_discardable_images_metadata(bool value) {
  set_has_generate_discardable_images_metadata();
  generate_discardable_images_metadata_ = value;
}

// optional bool requires_clear = 5;
inline bool DisplayListRecordingSource::has_requires_clear() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DisplayListRecordingSource::set_has_requires_clear() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DisplayListRecordingSource::clear_has_requires_clear() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DisplayListRecordingSource::clear_requires_clear() {
  requires_clear_ = false;
  clear_has_requires_clear();
}
inline bool DisplayListRecordingSource::requires_clear() const {
  return requires_clear_;
}
inline void DisplayListRecordingSource::set_requires_clear(bool value) {
  set_has_requires_clear();
  requires_clear_ = value;
}

// optional bool is_solid_color = 6;
inline bool DisplayListRecordingSource::has_is_solid_color() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DisplayListRecordingSource::set_has_is_solid_color() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DisplayListRecordingSource::clear_has_is_solid_color() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DisplayListRecordingSource::clear_is_solid_color() {
  is_solid_color_ = false;
  clear_has_is_solid_color();
}
inline bool DisplayListRecordingSource::is_solid_color() const {
  return is_solid_color_;
}
inline void DisplayListRecordingSource::set_is_solid_color(bool value) {
  set_has_is_solid_color();
  is_solid_color_ = value;
}

// optional bool clear_canvas_with_debug_color = 7;
inline bool DisplayListRecordingSource::has_clear_canvas_with_debug_color() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DisplayListRecordingSource::set_has_clear_canvas_with_debug_color() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DisplayListRecordingSource::clear_has_clear_canvas_with_debug_color() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DisplayListRecordingSource::clear_clear_canvas_with_debug_color() {
  clear_canvas_with_debug_color_ = false;
  clear_has_clear_canvas_with_debug_color();
}
inline bool DisplayListRecordingSource::clear_canvas_with_debug_color() const {
  return clear_canvas_with_debug_color_;
}
inline void DisplayListRecordingSource::set_clear_canvas_with_debug_color(bool value) {
  set_has_clear_canvas_with_debug_color();
  clear_canvas_with_debug_color_ = value;
}

// optional uint64 solid_color = 8;
inline bool DisplayListRecordingSource::has_solid_color() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DisplayListRecordingSource::set_has_solid_color() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DisplayListRecordingSource::clear_has_solid_color() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DisplayListRecordingSource::clear_solid_color() {
  solid_color_ = GOOGLE_ULONGLONG(0);
  clear_has_solid_color();
}
inline ::google::protobuf::uint64 DisplayListRecordingSource::solid_color() const {
  return solid_color_;
}
inline void DisplayListRecordingSource::set_solid_color(::google::protobuf::uint64 value) {
  set_has_solid_color();
  solid_color_ = value;
}

// optional uint64 background_color = 9;
inline bool DisplayListRecordingSource::has_background_color() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DisplayListRecordingSource::set_has_background_color() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DisplayListRecordingSource::clear_has_background_color() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DisplayListRecordingSource::clear_background_color() {
  background_color_ = GOOGLE_ULONGLONG(0);
  clear_has_background_color();
}
inline ::google::protobuf::uint64 DisplayListRecordingSource::background_color() const {
  return background_color_;
}
inline void DisplayListRecordingSource::set_background_color(::google::protobuf::uint64 value) {
  set_has_background_color();
  background_color_ = value;
}

// optional .cc.proto.DisplayItemList display_list = 10;
inline bool DisplayListRecordingSource::has_display_list() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DisplayListRecordingSource::set_has_display_list() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DisplayListRecordingSource::clear_has_display_list() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DisplayListRecordingSource::clear_display_list() {
  if (display_list_ != NULL) display_list_->::cc::proto::DisplayItemList::Clear();
  clear_has_display_list();
}
inline const ::cc::proto::DisplayItemList& DisplayListRecordingSource::display_list() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return display_list_ != NULL ? *display_list_ : *default_instance().display_list_;
#else
  return display_list_ != NULL ? *display_list_ : *default_instance_->display_list_;
#endif
}
inline ::cc::proto::DisplayItemList* DisplayListRecordingSource::mutable_display_list() {
  set_has_display_list();
  if (display_list_ == NULL) display_list_ = new ::cc::proto::DisplayItemList;
  return display_list_;
}
inline ::cc::proto::DisplayItemList* DisplayListRecordingSource::release_display_list() {
  clear_has_display_list();
  ::cc::proto::DisplayItemList* temp = display_list_;
  display_list_ = NULL;
  return temp;
}
inline void DisplayListRecordingSource::set_allocated_display_list(::cc::proto::DisplayItemList* display_list) {
  delete display_list_;
  display_list_ = display_list;
  if (display_list) {
    set_has_display_list();
  } else {
    clear_has_display_list();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cc

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_display_5flist_5frecording_5fsource_2eproto__INCLUDED
