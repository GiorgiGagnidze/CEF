// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: property_tree.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "property_tree.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace cc {
namespace proto {

void protobuf_ShutdownFile_property_5ftree_2eproto() {
  delete TranformNodeData::default_instance_;
  delete ClipNodeData::default_instance_;
  delete EffectNodeData::default_instance_;
  delete ScrollNodeData::default_instance_;
  delete TreeNode::default_instance_;
  delete PropertyTree::default_instance_;
  delete TransformTreeData::default_instance_;
  delete PropertyTrees::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_property_5ftree_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_property_5ftree_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::cc::proto::protobuf_AddDesc_rectf_2eproto();
  ::cc::proto::protobuf_AddDesc_scroll_5foffset_2eproto();
  ::cc::proto::protobuf_AddDesc_transform_2eproto();
  ::cc::proto::protobuf_AddDesc_vector2df_2eproto();
  TranformNodeData::default_instance_ = new TranformNodeData();
  ClipNodeData::default_instance_ = new ClipNodeData();
  EffectNodeData::default_instance_ = new EffectNodeData();
  ScrollNodeData::default_instance_ = new ScrollNodeData();
  TreeNode::default_instance_ = new TreeNode();
  PropertyTree::default_instance_ = new PropertyTree();
  TransformTreeData::default_instance_ = new TransformTreeData();
  PropertyTrees::default_instance_ = new PropertyTrees();
  TranformNodeData::default_instance_->InitAsDefaultInstance();
  ClipNodeData::default_instance_->InitAsDefaultInstance();
  EffectNodeData::default_instance_->InitAsDefaultInstance();
  ScrollNodeData::default_instance_->InitAsDefaultInstance();
  TreeNode::default_instance_->InitAsDefaultInstance();
  PropertyTree::default_instance_->InitAsDefaultInstance();
  TransformTreeData::default_instance_->InitAsDefaultInstance();
  PropertyTrees::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_property_5ftree_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_property_5ftree_2eproto_once_);
void protobuf_AddDesc_property_5ftree_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_property_5ftree_2eproto_once_,
                 &protobuf_AddDesc_property_5ftree_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_property_5ftree_2eproto {
  StaticDescriptorInitializer_property_5ftree_2eproto() {
    protobuf_AddDesc_property_5ftree_2eproto();
  }
} static_descriptor_initializer_property_5ftree_2eproto_;
#endif

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TranformNodeData::kPreLocalFieldNumber;
const int TranformNodeData::kLocalFieldNumber;
const int TranformNodeData::kPostLocalFieldNumber;
const int TranformNodeData::kToParentFieldNumber;
const int TranformNodeData::kToTargetFieldNumber;
const int TranformNodeData::kFromTargetFieldNumber;
const int TranformNodeData::kToScreenFieldNumber;
const int TranformNodeData::kFromScreenFieldNumber;
const int TranformNodeData::kTargetIdFieldNumber;
const int TranformNodeData::kContentTargetIdFieldNumber;
const int TranformNodeData::kSourceNodeIdFieldNumber;
const int TranformNodeData::kNeedsLocalTransformUpdateFieldNumber;
const int TranformNodeData::kIsInvertibleFieldNumber;
const int TranformNodeData::kAncestorsAreInvertibleFieldNumber;
const int TranformNodeData::kIsAnimatedFieldNumber;
const int TranformNodeData::kToScreenIsAnimatedFieldNumber;
const int TranformNodeData::kHasOnlyTranslationAnimationsFieldNumber;
const int TranformNodeData::kToScreenHasScaleAnimationFieldNumber;
const int TranformNodeData::kFlattensInheritedTransformFieldNumber;
const int TranformNodeData::kNodeAndAncestorsAreFlatFieldNumber;
const int TranformNodeData::kNodeAndAncestorsHaveOnlyIntegerTranslationFieldNumber;
const int TranformNodeData::kScrollsFieldNumber;
const int TranformNodeData::kNeedsSublayerScaleFieldNumber;
const int TranformNodeData::kAffectedByInnerViewportBoundsDeltaXFieldNumber;
const int TranformNodeData::kAffectedByInnerViewportBoundsDeltaYFieldNumber;
const int TranformNodeData::kAffectedByOuterViewportBoundsDeltaXFieldNumber;
const int TranformNodeData::kAffectedByOuterViewportBoundsDeltaYFieldNumber;
const int TranformNodeData::kInSubtreeOfPageScaleLayerFieldNumber;
const int TranformNodeData::kPostLocalScaleFactorFieldNumber;
const int TranformNodeData::kLocalMaximumAnimationTargetScaleFieldNumber;
const int TranformNodeData::kLocalStartingAnimationScaleFieldNumber;
const int TranformNodeData::kCombinedMaximumAnimationTargetScaleFieldNumber;
const int TranformNodeData::kCombinedStartingAnimationScaleFieldNumber;
const int TranformNodeData::kSublayerScaleFieldNumber;
const int TranformNodeData::kScrollOffsetFieldNumber;
const int TranformNodeData::kScrollSnapFieldNumber;
const int TranformNodeData::kSourceOffsetFieldNumber;
const int TranformNodeData::kSourceToParentFieldNumber;
const int TranformNodeData::kSortingContextIdFieldNumber;
#endif  // !_MSC_VER

TranformNodeData::TranformNodeData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TranformNodeData::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pre_local_ = const_cast< ::cc::proto::Transform*>(
      ::cc::proto::Transform::internal_default_instance());
#else
  pre_local_ = const_cast< ::cc::proto::Transform*>(&::cc::proto::Transform::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  local_ = const_cast< ::cc::proto::Transform*>(
      ::cc::proto::Transform::internal_default_instance());
#else
  local_ = const_cast< ::cc::proto::Transform*>(&::cc::proto::Transform::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  post_local_ = const_cast< ::cc::proto::Transform*>(
      ::cc::proto::Transform::internal_default_instance());
#else
  post_local_ = const_cast< ::cc::proto::Transform*>(&::cc::proto::Transform::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  to_parent_ = const_cast< ::cc::proto::Transform*>(
      ::cc::proto::Transform::internal_default_instance());
#else
  to_parent_ = const_cast< ::cc::proto::Transform*>(&::cc::proto::Transform::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  to_target_ = const_cast< ::cc::proto::Transform*>(
      ::cc::proto::Transform::internal_default_instance());
#else
  to_target_ = const_cast< ::cc::proto::Transform*>(&::cc::proto::Transform::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  from_target_ = const_cast< ::cc::proto::Transform*>(
      ::cc::proto::Transform::internal_default_instance());
#else
  from_target_ = const_cast< ::cc::proto::Transform*>(&::cc::proto::Transform::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  to_screen_ = const_cast< ::cc::proto::Transform*>(
      ::cc::proto::Transform::internal_default_instance());
#else
  to_screen_ = const_cast< ::cc::proto::Transform*>(&::cc::proto::Transform::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  from_screen_ = const_cast< ::cc::proto::Transform*>(
      ::cc::proto::Transform::internal_default_instance());
#else
  from_screen_ = const_cast< ::cc::proto::Transform*>(&::cc::proto::Transform::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  sublayer_scale_ = const_cast< ::cc::proto::Vector2dF*>(
      ::cc::proto::Vector2dF::internal_default_instance());
#else
  sublayer_scale_ = const_cast< ::cc::proto::Vector2dF*>(&::cc::proto::Vector2dF::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  scroll_offset_ = const_cast< ::cc::proto::ScrollOffset*>(
      ::cc::proto::ScrollOffset::internal_default_instance());
#else
  scroll_offset_ = const_cast< ::cc::proto::ScrollOffset*>(&::cc::proto::ScrollOffset::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  scroll_snap_ = const_cast< ::cc::proto::Vector2dF*>(
      ::cc::proto::Vector2dF::internal_default_instance());
#else
  scroll_snap_ = const_cast< ::cc::proto::Vector2dF*>(&::cc::proto::Vector2dF::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  source_offset_ = const_cast< ::cc::proto::Vector2dF*>(
      ::cc::proto::Vector2dF::internal_default_instance());
#else
  source_offset_ = const_cast< ::cc::proto::Vector2dF*>(&::cc::proto::Vector2dF::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  source_to_parent_ = const_cast< ::cc::proto::Vector2dF*>(
      ::cc::proto::Vector2dF::internal_default_instance());
#else
  source_to_parent_ = const_cast< ::cc::proto::Vector2dF*>(&::cc::proto::Vector2dF::default_instance());
#endif
}

TranformNodeData::TranformNodeData(const TranformNodeData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TranformNodeData::SharedCtor() {
  _cached_size_ = 0;
  pre_local_ = NULL;
  local_ = NULL;
  post_local_ = NULL;
  to_parent_ = NULL;
  to_target_ = NULL;
  from_target_ = NULL;
  to_screen_ = NULL;
  from_screen_ = NULL;
  target_id_ = GOOGLE_LONGLONG(0);
  content_target_id_ = GOOGLE_LONGLONG(0);
  source_node_id_ = GOOGLE_LONGLONG(0);
  needs_local_transform_update_ = false;
  is_invertible_ = false;
  ancestors_are_invertible_ = false;
  is_animated_ = false;
  to_screen_is_animated_ = false;
  has_only_translation_animations_ = false;
  to_screen_has_scale_animation_ = false;
  flattens_inherited_transform_ = false;
  node_and_ancestors_are_flat_ = false;
  node_and_ancestors_have_only_integer_translation_ = false;
  scrolls_ = false;
  needs_sublayer_scale_ = false;
  affected_by_inner_viewport_bounds_delta_x_ = false;
  affected_by_inner_viewport_bounds_delta_y_ = false;
  affected_by_outer_viewport_bounds_delta_x_ = false;
  affected_by_outer_viewport_bounds_delta_y_ = false;
  in_subtree_of_page_scale_layer_ = false;
  post_local_scale_factor_ = 0;
  local_maximum_animation_target_scale_ = 0;
  local_starting_animation_scale_ = 0;
  combined_maximum_animation_target_scale_ = 0;
  combined_starting_animation_scale_ = 0;
  sublayer_scale_ = NULL;
  scroll_offset_ = NULL;
  scroll_snap_ = NULL;
  source_offset_ = NULL;
  source_to_parent_ = NULL;
  sorting_context_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TranformNodeData::~TranformNodeData() {
  SharedDtor();
}

void TranformNodeData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete pre_local_;
    delete local_;
    delete post_local_;
    delete to_parent_;
    delete to_target_;
    delete from_target_;
    delete to_screen_;
    delete from_screen_;
    delete sublayer_scale_;
    delete scroll_offset_;
    delete scroll_snap_;
    delete source_offset_;
    delete source_to_parent_;
  }
}

void TranformNodeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TranformNodeData& TranformNodeData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_property_5ftree_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_property_5ftree_2eproto();
#endif
  return *default_instance_;
}

TranformNodeData* TranformNodeData::default_instance_ = NULL;

TranformNodeData* TranformNodeData::New() const {
  return new TranformNodeData;
}

void TranformNodeData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pre_local()) {
      if (pre_local_ != NULL) pre_local_->::cc::proto::Transform::Clear();
    }
    if (has_local()) {
      if (local_ != NULL) local_->::cc::proto::Transform::Clear();
    }
    if (has_post_local()) {
      if (post_local_ != NULL) post_local_->::cc::proto::Transform::Clear();
    }
    if (has_to_parent()) {
      if (to_parent_ != NULL) to_parent_->::cc::proto::Transform::Clear();
    }
    if (has_to_target()) {
      if (to_target_ != NULL) to_target_->::cc::proto::Transform::Clear();
    }
    if (has_from_target()) {
      if (from_target_ != NULL) from_target_->::cc::proto::Transform::Clear();
    }
    if (has_to_screen()) {
      if (to_screen_ != NULL) to_screen_->::cc::proto::Transform::Clear();
    }
    if (has_from_screen()) {
      if (from_screen_ != NULL) from_screen_->::cc::proto::Transform::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    target_id_ = GOOGLE_LONGLONG(0);
    content_target_id_ = GOOGLE_LONGLONG(0);
    source_node_id_ = GOOGLE_LONGLONG(0);
    needs_local_transform_update_ = false;
    is_invertible_ = false;
    ancestors_are_invertible_ = false;
    is_animated_ = false;
    to_screen_is_animated_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    has_only_translation_animations_ = false;
    to_screen_has_scale_animation_ = false;
    flattens_inherited_transform_ = false;
    node_and_ancestors_are_flat_ = false;
    node_and_ancestors_have_only_integer_translation_ = false;
    scrolls_ = false;
    needs_sublayer_scale_ = false;
    affected_by_inner_viewport_bounds_delta_x_ = false;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    affected_by_inner_viewport_bounds_delta_y_ = false;
    affected_by_outer_viewport_bounds_delta_x_ = false;
    affected_by_outer_viewport_bounds_delta_y_ = false;
    in_subtree_of_page_scale_layer_ = false;
    post_local_scale_factor_ = 0;
    local_maximum_animation_target_scale_ = 0;
    local_starting_animation_scale_ = 0;
    combined_maximum_animation_target_scale_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    combined_starting_animation_scale_ = 0;
    if (has_sublayer_scale()) {
      if (sublayer_scale_ != NULL) sublayer_scale_->::cc::proto::Vector2dF::Clear();
    }
    if (has_scroll_offset()) {
      if (scroll_offset_ != NULL) scroll_offset_->::cc::proto::ScrollOffset::Clear();
    }
    if (has_scroll_snap()) {
      if (scroll_snap_ != NULL) scroll_snap_->::cc::proto::Vector2dF::Clear();
    }
    if (has_source_offset()) {
      if (source_offset_ != NULL) source_offset_->::cc::proto::Vector2dF::Clear();
    }
    if (has_source_to_parent()) {
      if (source_to_parent_ != NULL) source_to_parent_->::cc::proto::Vector2dF::Clear();
    }
    sorting_context_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TranformNodeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cc.proto.Transform pre_local = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pre_local()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_local;
        break;
      }

      // optional .cc.proto.Transform local = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_local:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_local()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_post_local;
        break;
      }

      // optional .cc.proto.Transform post_local = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_post_local:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_post_local()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_to_parent;
        break;
      }

      // optional .cc.proto.Transform to_parent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_parent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to_parent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_to_target;
        break;
      }

      // optional .cc.proto.Transform to_target = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_from_target;
        break;
      }

      // optional .cc.proto.Transform from_target = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_from_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_to_screen;
        break;
      }

      // optional .cc.proto.Transform to_screen = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_screen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to_screen()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_from_screen;
        break;
      }

      // optional .cc.proto.Transform from_screen = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_screen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_from_screen()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_target_id;
        break;
      }

      // optional int64 target_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_content_target_id;
        break;
      }

      // optional int64 content_target_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_content_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &content_target_id_)));
          set_has_content_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_source_node_id;
        break;
      }

      // optional int64 source_node_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_node_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &source_node_id_)));
          set_has_source_node_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_needs_local_transform_update;
        break;
      }

      // optional bool needs_local_transform_update = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needs_local_transform_update:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needs_local_transform_update_)));
          set_has_needs_local_transform_update();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_is_invertible;
        break;
      }

      // optional bool is_invertible = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_invertible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_invertible_)));
          set_has_is_invertible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_ancestors_are_invertible;
        break;
      }

      // optional bool ancestors_are_invertible = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ancestors_are_invertible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ancestors_are_invertible_)));
          set_has_ancestors_are_invertible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_is_animated;
        break;
      }

      // optional bool is_animated = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_animated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_animated_)));
          set_has_is_animated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_to_screen_is_animated;
        break;
      }

      // optional bool to_screen_is_animated = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_screen_is_animated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &to_screen_is_animated_)));
          set_has_to_screen_is_animated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_has_only_translation_animations;
        break;
      }

      // optional bool has_only_translation_animations = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_only_translation_animations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_only_translation_animations_)));
          set_has_has_only_translation_animations();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_to_screen_has_scale_animation;
        break;
      }

      // optional bool to_screen_has_scale_animation = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_screen_has_scale_animation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &to_screen_has_scale_animation_)));
          set_has_to_screen_has_scale_animation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_flattens_inherited_transform;
        break;
      }

      // optional bool flattens_inherited_transform = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flattens_inherited_transform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flattens_inherited_transform_)));
          set_has_flattens_inherited_transform();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_node_and_ancestors_are_flat;
        break;
      }

      // optional bool node_and_ancestors_are_flat = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_node_and_ancestors_are_flat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &node_and_ancestors_are_flat_)));
          set_has_node_and_ancestors_are_flat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_node_and_ancestors_have_only_integer_translation;
        break;
      }

      // optional bool node_and_ancestors_have_only_integer_translation = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_node_and_ancestors_have_only_integer_translation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &node_and_ancestors_have_only_integer_translation_)));
          set_has_node_and_ancestors_have_only_integer_translation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_scrolls;
        break;
      }

      // optional bool scrolls = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scrolls:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &scrolls_)));
          set_has_scrolls();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_needs_sublayer_scale;
        break;
      }

      // optional bool needs_sublayer_scale = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needs_sublayer_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needs_sublayer_scale_)));
          set_has_needs_sublayer_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_affected_by_inner_viewport_bounds_delta_x;
        break;
      }

      // optional bool affected_by_inner_viewport_bounds_delta_x = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_affected_by_inner_viewport_bounds_delta_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &affected_by_inner_viewport_bounds_delta_x_)));
          set_has_affected_by_inner_viewport_bounds_delta_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_affected_by_inner_viewport_bounds_delta_y;
        break;
      }

      // optional bool affected_by_inner_viewport_bounds_delta_y = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_affected_by_inner_viewport_bounds_delta_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &affected_by_inner_viewport_bounds_delta_y_)));
          set_has_affected_by_inner_viewport_bounds_delta_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_affected_by_outer_viewport_bounds_delta_x;
        break;
      }

      // optional bool affected_by_outer_viewport_bounds_delta_x = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_affected_by_outer_viewport_bounds_delta_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &affected_by_outer_viewport_bounds_delta_x_)));
          set_has_affected_by_outer_viewport_bounds_delta_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_affected_by_outer_viewport_bounds_delta_y;
        break;
      }

      // optional bool affected_by_outer_viewport_bounds_delta_y = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_affected_by_outer_viewport_bounds_delta_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &affected_by_outer_viewport_bounds_delta_y_)));
          set_has_affected_by_outer_viewport_bounds_delta_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_in_subtree_of_page_scale_layer;
        break;
      }

      // optional bool in_subtree_of_page_scale_layer = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in_subtree_of_page_scale_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_subtree_of_page_scale_layer_)));
          set_has_in_subtree_of_page_scale_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(237)) goto parse_post_local_scale_factor;
        break;
      }

      // optional float post_local_scale_factor = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_post_local_scale_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &post_local_scale_factor_)));
          set_has_post_local_scale_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(245)) goto parse_local_maximum_animation_target_scale;
        break;
      }

      // optional float local_maximum_animation_target_scale = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_local_maximum_animation_target_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &local_maximum_animation_target_scale_)));
          set_has_local_maximum_animation_target_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(253)) goto parse_local_starting_animation_scale;
        break;
      }

      // optional float local_starting_animation_scale = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_local_starting_animation_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &local_starting_animation_scale_)));
          set_has_local_starting_animation_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(261)) goto parse_combined_maximum_animation_target_scale;
        break;
      }

      // optional float combined_maximum_animation_target_scale = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_combined_maximum_animation_target_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &combined_maximum_animation_target_scale_)));
          set_has_combined_maximum_animation_target_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(269)) goto parse_combined_starting_animation_scale;
        break;
      }

      // optional float combined_starting_animation_scale = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_combined_starting_animation_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &combined_starting_animation_scale_)));
          set_has_combined_starting_animation_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_sublayer_scale;
        break;
      }

      // optional .cc.proto.Vector2dF sublayer_scale = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sublayer_scale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sublayer_scale()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_scroll_offset;
        break;
      }

      // optional .cc.proto.ScrollOffset scroll_offset = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scroll_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scroll_offset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_scroll_snap;
        break;
      }

      // optional .cc.proto.Vector2dF scroll_snap = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scroll_snap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scroll_snap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_source_offset;
        break;
      }

      // optional .cc.proto.Vector2dF source_offset = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_source_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source_offset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_source_to_parent;
        break;
      }

      // optional .cc.proto.Vector2dF source_to_parent = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_source_to_parent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source_to_parent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_sorting_context_id;
        break;
      }

      // optional int64 sorting_context_id = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sorting_context_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sorting_context_id_)));
          set_has_sorting_context_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TranformNodeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cc.proto.Transform pre_local = 1;
  if (has_pre_local()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->pre_local(), output);
  }

  // optional .cc.proto.Transform local = 2;
  if (has_local()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->local(), output);
  }

  // optional .cc.proto.Transform post_local = 3;
  if (has_post_local()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->post_local(), output);
  }

  // optional .cc.proto.Transform to_parent = 4;
  if (has_to_parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->to_parent(), output);
  }

  // optional .cc.proto.Transform to_target = 5;
  if (has_to_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->to_target(), output);
  }

  // optional .cc.proto.Transform from_target = 6;
  if (has_from_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->from_target(), output);
  }

  // optional .cc.proto.Transform to_screen = 7;
  if (has_to_screen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->to_screen(), output);
  }

  // optional .cc.proto.Transform from_screen = 8;
  if (has_from_screen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->from_screen(), output);
  }

  // optional int64 target_id = 9;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->target_id(), output);
  }

  // optional int64 content_target_id = 10;
  if (has_content_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->content_target_id(), output);
  }

  // optional int64 source_node_id = 11;
  if (has_source_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->source_node_id(), output);
  }

  // optional bool needs_local_transform_update = 12;
  if (has_needs_local_transform_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->needs_local_transform_update(), output);
  }

  // optional bool is_invertible = 13;
  if (has_is_invertible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_invertible(), output);
  }

  // optional bool ancestors_are_invertible = 14;
  if (has_ancestors_are_invertible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->ancestors_are_invertible(), output);
  }

  // optional bool is_animated = 15;
  if (has_is_animated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->is_animated(), output);
  }

  // optional bool to_screen_is_animated = 16;
  if (has_to_screen_is_animated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->to_screen_is_animated(), output);
  }

  // optional bool has_only_translation_animations = 17;
  if (has_has_only_translation_animations()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->has_only_translation_animations(), output);
  }

  // optional bool to_screen_has_scale_animation = 18;
  if (has_to_screen_has_scale_animation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->to_screen_has_scale_animation(), output);
  }

  // optional bool flattens_inherited_transform = 19;
  if (has_flattens_inherited_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->flattens_inherited_transform(), output);
  }

  // optional bool node_and_ancestors_are_flat = 20;
  if (has_node_and_ancestors_are_flat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->node_and_ancestors_are_flat(), output);
  }

  // optional bool node_and_ancestors_have_only_integer_translation = 21;
  if (has_node_and_ancestors_have_only_integer_translation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->node_and_ancestors_have_only_integer_translation(), output);
  }

  // optional bool scrolls = 22;
  if (has_scrolls()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->scrolls(), output);
  }

  // optional bool needs_sublayer_scale = 23;
  if (has_needs_sublayer_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->needs_sublayer_scale(), output);
  }

  // optional bool affected_by_inner_viewport_bounds_delta_x = 24;
  if (has_affected_by_inner_viewport_bounds_delta_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->affected_by_inner_viewport_bounds_delta_x(), output);
  }

  // optional bool affected_by_inner_viewport_bounds_delta_y = 25;
  if (has_affected_by_inner_viewport_bounds_delta_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->affected_by_inner_viewport_bounds_delta_y(), output);
  }

  // optional bool affected_by_outer_viewport_bounds_delta_x = 26;
  if (has_affected_by_outer_viewport_bounds_delta_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->affected_by_outer_viewport_bounds_delta_x(), output);
  }

  // optional bool affected_by_outer_viewport_bounds_delta_y = 27;
  if (has_affected_by_outer_viewport_bounds_delta_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->affected_by_outer_viewport_bounds_delta_y(), output);
  }

  // optional bool in_subtree_of_page_scale_layer = 28;
  if (has_in_subtree_of_page_scale_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->in_subtree_of_page_scale_layer(), output);
  }

  // optional float post_local_scale_factor = 29;
  if (has_post_local_scale_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->post_local_scale_factor(), output);
  }

  // optional float local_maximum_animation_target_scale = 30;
  if (has_local_maximum_animation_target_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->local_maximum_animation_target_scale(), output);
  }

  // optional float local_starting_animation_scale = 31;
  if (has_local_starting_animation_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->local_starting_animation_scale(), output);
  }

  // optional float combined_maximum_animation_target_scale = 32;
  if (has_combined_maximum_animation_target_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->combined_maximum_animation_target_scale(), output);
  }

  // optional float combined_starting_animation_scale = 33;
  if (has_combined_starting_animation_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(33, this->combined_starting_animation_scale(), output);
  }

  // optional .cc.proto.Vector2dF sublayer_scale = 34;
  if (has_sublayer_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      34, this->sublayer_scale(), output);
  }

  // optional .cc.proto.ScrollOffset scroll_offset = 35;
  if (has_scroll_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      35, this->scroll_offset(), output);
  }

  // optional .cc.proto.Vector2dF scroll_snap = 36;
  if (has_scroll_snap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      36, this->scroll_snap(), output);
  }

  // optional .cc.proto.Vector2dF source_offset = 37;
  if (has_source_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      37, this->source_offset(), output);
  }

  // optional .cc.proto.Vector2dF source_to_parent = 38;
  if (has_source_to_parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      38, this->source_to_parent(), output);
  }

  // optional int64 sorting_context_id = 39;
  if (has_sorting_context_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(39, this->sorting_context_id(), output);
  }

}

int TranformNodeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cc.proto.Transform pre_local = 1;
    if (has_pre_local()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pre_local());
    }

    // optional .cc.proto.Transform local = 2;
    if (has_local()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->local());
    }

    // optional .cc.proto.Transform post_local = 3;
    if (has_post_local()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->post_local());
    }

    // optional .cc.proto.Transform to_parent = 4;
    if (has_to_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->to_parent());
    }

    // optional .cc.proto.Transform to_target = 5;
    if (has_to_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->to_target());
    }

    // optional .cc.proto.Transform from_target = 6;
    if (has_from_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->from_target());
    }

    // optional .cc.proto.Transform to_screen = 7;
    if (has_to_screen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->to_screen());
    }

    // optional .cc.proto.Transform from_screen = 8;
    if (has_from_screen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->from_screen());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 target_id = 9;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->target_id());
    }

    // optional int64 content_target_id = 10;
    if (has_content_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->content_target_id());
    }

    // optional int64 source_node_id = 11;
    if (has_source_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->source_node_id());
    }

    // optional bool needs_local_transform_update = 12;
    if (has_needs_local_transform_update()) {
      total_size += 1 + 1;
    }

    // optional bool is_invertible = 13;
    if (has_is_invertible()) {
      total_size += 1 + 1;
    }

    // optional bool ancestors_are_invertible = 14;
    if (has_ancestors_are_invertible()) {
      total_size += 1 + 1;
    }

    // optional bool is_animated = 15;
    if (has_is_animated()) {
      total_size += 1 + 1;
    }

    // optional bool to_screen_is_animated = 16;
    if (has_to_screen_is_animated()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool has_only_translation_animations = 17;
    if (has_has_only_translation_animations()) {
      total_size += 2 + 1;
    }

    // optional bool to_screen_has_scale_animation = 18;
    if (has_to_screen_has_scale_animation()) {
      total_size += 2 + 1;
    }

    // optional bool flattens_inherited_transform = 19;
    if (has_flattens_inherited_transform()) {
      total_size += 2 + 1;
    }

    // optional bool node_and_ancestors_are_flat = 20;
    if (has_node_and_ancestors_are_flat()) {
      total_size += 2 + 1;
    }

    // optional bool node_and_ancestors_have_only_integer_translation = 21;
    if (has_node_and_ancestors_have_only_integer_translation()) {
      total_size += 2 + 1;
    }

    // optional bool scrolls = 22;
    if (has_scrolls()) {
      total_size += 2 + 1;
    }

    // optional bool needs_sublayer_scale = 23;
    if (has_needs_sublayer_scale()) {
      total_size += 2 + 1;
    }

    // optional bool affected_by_inner_viewport_bounds_delta_x = 24;
    if (has_affected_by_inner_viewport_bounds_delta_x()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool affected_by_inner_viewport_bounds_delta_y = 25;
    if (has_affected_by_inner_viewport_bounds_delta_y()) {
      total_size += 2 + 1;
    }

    // optional bool affected_by_outer_viewport_bounds_delta_x = 26;
    if (has_affected_by_outer_viewport_bounds_delta_x()) {
      total_size += 2 + 1;
    }

    // optional bool affected_by_outer_viewport_bounds_delta_y = 27;
    if (has_affected_by_outer_viewport_bounds_delta_y()) {
      total_size += 2 + 1;
    }

    // optional bool in_subtree_of_page_scale_layer = 28;
    if (has_in_subtree_of_page_scale_layer()) {
      total_size += 2 + 1;
    }

    // optional float post_local_scale_factor = 29;
    if (has_post_local_scale_factor()) {
      total_size += 2 + 4;
    }

    // optional float local_maximum_animation_target_scale = 30;
    if (has_local_maximum_animation_target_scale()) {
      total_size += 2 + 4;
    }

    // optional float local_starting_animation_scale = 31;
    if (has_local_starting_animation_scale()) {
      total_size += 2 + 4;
    }

    // optional float combined_maximum_animation_target_scale = 32;
    if (has_combined_maximum_animation_target_scale()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional float combined_starting_animation_scale = 33;
    if (has_combined_starting_animation_scale()) {
      total_size += 2 + 4;
    }

    // optional .cc.proto.Vector2dF sublayer_scale = 34;
    if (has_sublayer_scale()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sublayer_scale());
    }

    // optional .cc.proto.ScrollOffset scroll_offset = 35;
    if (has_scroll_offset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scroll_offset());
    }

    // optional .cc.proto.Vector2dF scroll_snap = 36;
    if (has_scroll_snap()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scroll_snap());
    }

    // optional .cc.proto.Vector2dF source_offset = 37;
    if (has_source_offset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->source_offset());
    }

    // optional .cc.proto.Vector2dF source_to_parent = 38;
    if (has_source_to_parent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->source_to_parent());
    }

    // optional int64 sorting_context_id = 39;
    if (has_sorting_context_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sorting_context_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TranformNodeData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TranformNodeData*>(&from));
}

void TranformNodeData::MergeFrom(const TranformNodeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pre_local()) {
      mutable_pre_local()->::cc::proto::Transform::MergeFrom(from.pre_local());
    }
    if (from.has_local()) {
      mutable_local()->::cc::proto::Transform::MergeFrom(from.local());
    }
    if (from.has_post_local()) {
      mutable_post_local()->::cc::proto::Transform::MergeFrom(from.post_local());
    }
    if (from.has_to_parent()) {
      mutable_to_parent()->::cc::proto::Transform::MergeFrom(from.to_parent());
    }
    if (from.has_to_target()) {
      mutable_to_target()->::cc::proto::Transform::MergeFrom(from.to_target());
    }
    if (from.has_from_target()) {
      mutable_from_target()->::cc::proto::Transform::MergeFrom(from.from_target());
    }
    if (from.has_to_screen()) {
      mutable_to_screen()->::cc::proto::Transform::MergeFrom(from.to_screen());
    }
    if (from.has_from_screen()) {
      mutable_from_screen()->::cc::proto::Transform::MergeFrom(from.from_screen());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
    if (from.has_content_target_id()) {
      set_content_target_id(from.content_target_id());
    }
    if (from.has_source_node_id()) {
      set_source_node_id(from.source_node_id());
    }
    if (from.has_needs_local_transform_update()) {
      set_needs_local_transform_update(from.needs_local_transform_update());
    }
    if (from.has_is_invertible()) {
      set_is_invertible(from.is_invertible());
    }
    if (from.has_ancestors_are_invertible()) {
      set_ancestors_are_invertible(from.ancestors_are_invertible());
    }
    if (from.has_is_animated()) {
      set_is_animated(from.is_animated());
    }
    if (from.has_to_screen_is_animated()) {
      set_to_screen_is_animated(from.to_screen_is_animated());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_has_only_translation_animations()) {
      set_has_only_translation_animations(from.has_only_translation_animations());
    }
    if (from.has_to_screen_has_scale_animation()) {
      set_to_screen_has_scale_animation(from.to_screen_has_scale_animation());
    }
    if (from.has_flattens_inherited_transform()) {
      set_flattens_inherited_transform(from.flattens_inherited_transform());
    }
    if (from.has_node_and_ancestors_are_flat()) {
      set_node_and_ancestors_are_flat(from.node_and_ancestors_are_flat());
    }
    if (from.has_node_and_ancestors_have_only_integer_translation()) {
      set_node_and_ancestors_have_only_integer_translation(from.node_and_ancestors_have_only_integer_translation());
    }
    if (from.has_scrolls()) {
      set_scrolls(from.scrolls());
    }
    if (from.has_needs_sublayer_scale()) {
      set_needs_sublayer_scale(from.needs_sublayer_scale());
    }
    if (from.has_affected_by_inner_viewport_bounds_delta_x()) {
      set_affected_by_inner_viewport_bounds_delta_x(from.affected_by_inner_viewport_bounds_delta_x());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_affected_by_inner_viewport_bounds_delta_y()) {
      set_affected_by_inner_viewport_bounds_delta_y(from.affected_by_inner_viewport_bounds_delta_y());
    }
    if (from.has_affected_by_outer_viewport_bounds_delta_x()) {
      set_affected_by_outer_viewport_bounds_delta_x(from.affected_by_outer_viewport_bounds_delta_x());
    }
    if (from.has_affected_by_outer_viewport_bounds_delta_y()) {
      set_affected_by_outer_viewport_bounds_delta_y(from.affected_by_outer_viewport_bounds_delta_y());
    }
    if (from.has_in_subtree_of_page_scale_layer()) {
      set_in_subtree_of_page_scale_layer(from.in_subtree_of_page_scale_layer());
    }
    if (from.has_post_local_scale_factor()) {
      set_post_local_scale_factor(from.post_local_scale_factor());
    }
    if (from.has_local_maximum_animation_target_scale()) {
      set_local_maximum_animation_target_scale(from.local_maximum_animation_target_scale());
    }
    if (from.has_local_starting_animation_scale()) {
      set_local_starting_animation_scale(from.local_starting_animation_scale());
    }
    if (from.has_combined_maximum_animation_target_scale()) {
      set_combined_maximum_animation_target_scale(from.combined_maximum_animation_target_scale());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_combined_starting_animation_scale()) {
      set_combined_starting_animation_scale(from.combined_starting_animation_scale());
    }
    if (from.has_sublayer_scale()) {
      mutable_sublayer_scale()->::cc::proto::Vector2dF::MergeFrom(from.sublayer_scale());
    }
    if (from.has_scroll_offset()) {
      mutable_scroll_offset()->::cc::proto::ScrollOffset::MergeFrom(from.scroll_offset());
    }
    if (from.has_scroll_snap()) {
      mutable_scroll_snap()->::cc::proto::Vector2dF::MergeFrom(from.scroll_snap());
    }
    if (from.has_source_offset()) {
      mutable_source_offset()->::cc::proto::Vector2dF::MergeFrom(from.source_offset());
    }
    if (from.has_source_to_parent()) {
      mutable_source_to_parent()->::cc::proto::Vector2dF::MergeFrom(from.source_to_parent());
    }
    if (from.has_sorting_context_id()) {
      set_sorting_context_id(from.sorting_context_id());
    }
  }
}

void TranformNodeData::CopyFrom(const TranformNodeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranformNodeData::IsInitialized() const {

  return true;
}

void TranformNodeData::Swap(TranformNodeData* other) {
  if (other != this) {
    std::swap(pre_local_, other->pre_local_);
    std::swap(local_, other->local_);
    std::swap(post_local_, other->post_local_);
    std::swap(to_parent_, other->to_parent_);
    std::swap(to_target_, other->to_target_);
    std::swap(from_target_, other->from_target_);
    std::swap(to_screen_, other->to_screen_);
    std::swap(from_screen_, other->from_screen_);
    std::swap(target_id_, other->target_id_);
    std::swap(content_target_id_, other->content_target_id_);
    std::swap(source_node_id_, other->source_node_id_);
    std::swap(needs_local_transform_update_, other->needs_local_transform_update_);
    std::swap(is_invertible_, other->is_invertible_);
    std::swap(ancestors_are_invertible_, other->ancestors_are_invertible_);
    std::swap(is_animated_, other->is_animated_);
    std::swap(to_screen_is_animated_, other->to_screen_is_animated_);
    std::swap(has_only_translation_animations_, other->has_only_translation_animations_);
    std::swap(to_screen_has_scale_animation_, other->to_screen_has_scale_animation_);
    std::swap(flattens_inherited_transform_, other->flattens_inherited_transform_);
    std::swap(node_and_ancestors_are_flat_, other->node_and_ancestors_are_flat_);
    std::swap(node_and_ancestors_have_only_integer_translation_, other->node_and_ancestors_have_only_integer_translation_);
    std::swap(scrolls_, other->scrolls_);
    std::swap(needs_sublayer_scale_, other->needs_sublayer_scale_);
    std::swap(affected_by_inner_viewport_bounds_delta_x_, other->affected_by_inner_viewport_bounds_delta_x_);
    std::swap(affected_by_inner_viewport_bounds_delta_y_, other->affected_by_inner_viewport_bounds_delta_y_);
    std::swap(affected_by_outer_viewport_bounds_delta_x_, other->affected_by_outer_viewport_bounds_delta_x_);
    std::swap(affected_by_outer_viewport_bounds_delta_y_, other->affected_by_outer_viewport_bounds_delta_y_);
    std::swap(in_subtree_of_page_scale_layer_, other->in_subtree_of_page_scale_layer_);
    std::swap(post_local_scale_factor_, other->post_local_scale_factor_);
    std::swap(local_maximum_animation_target_scale_, other->local_maximum_animation_target_scale_);
    std::swap(local_starting_animation_scale_, other->local_starting_animation_scale_);
    std::swap(combined_maximum_animation_target_scale_, other->combined_maximum_animation_target_scale_);
    std::swap(combined_starting_animation_scale_, other->combined_starting_animation_scale_);
    std::swap(sublayer_scale_, other->sublayer_scale_);
    std::swap(scroll_offset_, other->scroll_offset_);
    std::swap(scroll_snap_, other->scroll_snap_);
    std::swap(source_offset_, other->source_offset_);
    std::swap(source_to_parent_, other->source_to_parent_);
    std::swap(sorting_context_id_, other->sorting_context_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TranformNodeData::GetTypeName() const {
  return "cc.proto.TranformNodeData";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClipNodeData::kClipFieldNumber;
const int ClipNodeData::kCombinedClipInTargetSpaceFieldNumber;
const int ClipNodeData::kClipInTargetSpaceFieldNumber;
const int ClipNodeData::kTransformIdFieldNumber;
const int ClipNodeData::kTargetIdFieldNumber;
const int ClipNodeData::kAppliesLocalClipFieldNumber;
const int ClipNodeData::kLayerClippingUsesOnlyLocalClipFieldNumber;
const int ClipNodeData::kTargetIsClippedFieldNumber;
const int ClipNodeData::kLayersAreClippedFieldNumber;
const int ClipNodeData::kLayersAreClippedWhenSurfacesDisabledFieldNumber;
const int ClipNodeData::kResetsClipFieldNumber;
#endif  // !_MSC_VER

ClipNodeData::ClipNodeData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ClipNodeData::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  clip_ = const_cast< ::cc::proto::RectF*>(
      ::cc::proto::RectF::internal_default_instance());
#else
  clip_ = const_cast< ::cc::proto::RectF*>(&::cc::proto::RectF::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  combined_clip_in_target_space_ = const_cast< ::cc::proto::RectF*>(
      ::cc::proto::RectF::internal_default_instance());
#else
  combined_clip_in_target_space_ = const_cast< ::cc::proto::RectF*>(&::cc::proto::RectF::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  clip_in_target_space_ = const_cast< ::cc::proto::RectF*>(
      ::cc::proto::RectF::internal_default_instance());
#else
  clip_in_target_space_ = const_cast< ::cc::proto::RectF*>(&::cc::proto::RectF::default_instance());
#endif
}

ClipNodeData::ClipNodeData(const ClipNodeData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ClipNodeData::SharedCtor() {
  _cached_size_ = 0;
  clip_ = NULL;
  combined_clip_in_target_space_ = NULL;
  clip_in_target_space_ = NULL;
  transform_id_ = GOOGLE_LONGLONG(0);
  target_id_ = GOOGLE_LONGLONG(0);
  applies_local_clip_ = false;
  layer_clipping_uses_only_local_clip_ = false;
  target_is_clipped_ = false;
  layers_are_clipped_ = false;
  layers_are_clipped_when_surfaces_disabled_ = false;
  resets_clip_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClipNodeData::~ClipNodeData() {
  SharedDtor();
}

void ClipNodeData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete clip_;
    delete combined_clip_in_target_space_;
    delete clip_in_target_space_;
  }
}

void ClipNodeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClipNodeData& ClipNodeData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_property_5ftree_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_property_5ftree_2eproto();
#endif
  return *default_instance_;
}

ClipNodeData* ClipNodeData::default_instance_ = NULL;

ClipNodeData* ClipNodeData::New() const {
  return new ClipNodeData;
}

void ClipNodeData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_clip()) {
      if (clip_ != NULL) clip_->::cc::proto::RectF::Clear();
    }
    if (has_combined_clip_in_target_space()) {
      if (combined_clip_in_target_space_ != NULL) combined_clip_in_target_space_->::cc::proto::RectF::Clear();
    }
    if (has_clip_in_target_space()) {
      if (clip_in_target_space_ != NULL) clip_in_target_space_->::cc::proto::RectF::Clear();
    }
    transform_id_ = GOOGLE_LONGLONG(0);
    target_id_ = GOOGLE_LONGLONG(0);
    applies_local_clip_ = false;
    layer_clipping_uses_only_local_clip_ = false;
    target_is_clipped_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    layers_are_clipped_ = false;
    layers_are_clipped_when_surfaces_disabled_ = false;
    resets_clip_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ClipNodeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cc.proto.RectF clip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_combined_clip_in_target_space;
        break;
      }

      // optional .cc.proto.RectF combined_clip_in_target_space = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_combined_clip_in_target_space:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_combined_clip_in_target_space()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_clip_in_target_space;
        break;
      }

      // optional .cc.proto.RectF clip_in_target_space = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clip_in_target_space:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clip_in_target_space()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_transform_id;
        break;
      }

      // optional int64 transform_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transform_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transform_id_)));
          set_has_transform_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_target_id;
        break;
      }

      // optional int64 target_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_applies_local_clip;
        break;
      }

      // optional bool applies_local_clip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_applies_local_clip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &applies_local_clip_)));
          set_has_applies_local_clip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_layer_clipping_uses_only_local_clip;
        break;
      }

      // optional bool layer_clipping_uses_only_local_clip = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layer_clipping_uses_only_local_clip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &layer_clipping_uses_only_local_clip_)));
          set_has_layer_clipping_uses_only_local_clip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_target_is_clipped;
        break;
      }

      // optional bool target_is_clipped = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_is_clipped:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &target_is_clipped_)));
          set_has_target_is_clipped();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_layers_are_clipped;
        break;
      }

      // optional bool layers_are_clipped = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layers_are_clipped:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &layers_are_clipped_)));
          set_has_layers_are_clipped();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_layers_are_clipped_when_surfaces_disabled;
        break;
      }

      // optional bool layers_are_clipped_when_surfaces_disabled = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layers_are_clipped_when_surfaces_disabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &layers_are_clipped_when_surfaces_disabled_)));
          set_has_layers_are_clipped_when_surfaces_disabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_resets_clip;
        break;
      }

      // optional bool resets_clip = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resets_clip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &resets_clip_)));
          set_has_resets_clip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClipNodeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cc.proto.RectF clip = 1;
  if (has_clip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->clip(), output);
  }

  // optional .cc.proto.RectF combined_clip_in_target_space = 2;
  if (has_combined_clip_in_target_space()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->combined_clip_in_target_space(), output);
  }

  // optional .cc.proto.RectF clip_in_target_space = 3;
  if (has_clip_in_target_space()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->clip_in_target_space(), output);
  }

  // optional int64 transform_id = 4;
  if (has_transform_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->transform_id(), output);
  }

  // optional int64 target_id = 5;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->target_id(), output);
  }

  // optional bool applies_local_clip = 6;
  if (has_applies_local_clip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->applies_local_clip(), output);
  }

  // optional bool layer_clipping_uses_only_local_clip = 7;
  if (has_layer_clipping_uses_only_local_clip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->layer_clipping_uses_only_local_clip(), output);
  }

  // optional bool target_is_clipped = 8;
  if (has_target_is_clipped()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->target_is_clipped(), output);
  }

  // optional bool layers_are_clipped = 9;
  if (has_layers_are_clipped()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->layers_are_clipped(), output);
  }

  // optional bool layers_are_clipped_when_surfaces_disabled = 10;
  if (has_layers_are_clipped_when_surfaces_disabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->layers_are_clipped_when_surfaces_disabled(), output);
  }

  // optional bool resets_clip = 11;
  if (has_resets_clip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->resets_clip(), output);
  }

}

int ClipNodeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cc.proto.RectF clip = 1;
    if (has_clip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clip());
    }

    // optional .cc.proto.RectF combined_clip_in_target_space = 2;
    if (has_combined_clip_in_target_space()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->combined_clip_in_target_space());
    }

    // optional .cc.proto.RectF clip_in_target_space = 3;
    if (has_clip_in_target_space()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clip_in_target_space());
    }

    // optional int64 transform_id = 4;
    if (has_transform_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->transform_id());
    }

    // optional int64 target_id = 5;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->target_id());
    }

    // optional bool applies_local_clip = 6;
    if (has_applies_local_clip()) {
      total_size += 1 + 1;
    }

    // optional bool layer_clipping_uses_only_local_clip = 7;
    if (has_layer_clipping_uses_only_local_clip()) {
      total_size += 1 + 1;
    }

    // optional bool target_is_clipped = 8;
    if (has_target_is_clipped()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool layers_are_clipped = 9;
    if (has_layers_are_clipped()) {
      total_size += 1 + 1;
    }

    // optional bool layers_are_clipped_when_surfaces_disabled = 10;
    if (has_layers_are_clipped_when_surfaces_disabled()) {
      total_size += 1 + 1;
    }

    // optional bool resets_clip = 11;
    if (has_resets_clip()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClipNodeData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClipNodeData*>(&from));
}

void ClipNodeData::MergeFrom(const ClipNodeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clip()) {
      mutable_clip()->::cc::proto::RectF::MergeFrom(from.clip());
    }
    if (from.has_combined_clip_in_target_space()) {
      mutable_combined_clip_in_target_space()->::cc::proto::RectF::MergeFrom(from.combined_clip_in_target_space());
    }
    if (from.has_clip_in_target_space()) {
      mutable_clip_in_target_space()->::cc::proto::RectF::MergeFrom(from.clip_in_target_space());
    }
    if (from.has_transform_id()) {
      set_transform_id(from.transform_id());
    }
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
    if (from.has_applies_local_clip()) {
      set_applies_local_clip(from.applies_local_clip());
    }
    if (from.has_layer_clipping_uses_only_local_clip()) {
      set_layer_clipping_uses_only_local_clip(from.layer_clipping_uses_only_local_clip());
    }
    if (from.has_target_is_clipped()) {
      set_target_is_clipped(from.target_is_clipped());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_layers_are_clipped()) {
      set_layers_are_clipped(from.layers_are_clipped());
    }
    if (from.has_layers_are_clipped_when_surfaces_disabled()) {
      set_layers_are_clipped_when_surfaces_disabled(from.layers_are_clipped_when_surfaces_disabled());
    }
    if (from.has_resets_clip()) {
      set_resets_clip(from.resets_clip());
    }
  }
}

void ClipNodeData::CopyFrom(const ClipNodeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClipNodeData::IsInitialized() const {

  return true;
}

void ClipNodeData::Swap(ClipNodeData* other) {
  if (other != this) {
    std::swap(clip_, other->clip_);
    std::swap(combined_clip_in_target_space_, other->combined_clip_in_target_space_);
    std::swap(clip_in_target_space_, other->clip_in_target_space_);
    std::swap(transform_id_, other->transform_id_);
    std::swap(target_id_, other->target_id_);
    std::swap(applies_local_clip_, other->applies_local_clip_);
    std::swap(layer_clipping_uses_only_local_clip_, other->layer_clipping_uses_only_local_clip_);
    std::swap(target_is_clipped_, other->target_is_clipped_);
    std::swap(layers_are_clipped_, other->layers_are_clipped_);
    std::swap(layers_are_clipped_when_surfaces_disabled_, other->layers_are_clipped_when_surfaces_disabled_);
    std::swap(resets_clip_, other->resets_clip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClipNodeData::GetTypeName() const {
  return "cc.proto.ClipNodeData";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EffectNodeData::kOpacityFieldNumber;
const int EffectNodeData::kScreenSpaceOpacityFieldNumber;
const int EffectNodeData::kHasRenderSurfaceFieldNumber;
const int EffectNodeData::kHasCopyRequestFieldNumber;
const int EffectNodeData::kHasBackgroundFiltersFieldNumber;
const int EffectNodeData::kIsDrawnFieldNumber;
const int EffectNodeData::kHasAnimatedOpacityFieldNumber;
const int EffectNodeData::kNumCopyRequestsInSubtreeFieldNumber;
const int EffectNodeData::kTransformIdFieldNumber;
const int EffectNodeData::kClipIdFieldNumber;
#endif  // !_MSC_VER

EffectNodeData::EffectNodeData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void EffectNodeData::InitAsDefaultInstance() {
}

EffectNodeData::EffectNodeData(const EffectNodeData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void EffectNodeData::SharedCtor() {
  _cached_size_ = 0;
  opacity_ = 0;
  screen_space_opacity_ = 0;
  has_render_surface_ = false;
  has_copy_request_ = false;
  has_background_filters_ = false;
  is_drawn_ = false;
  has_animated_opacity_ = false;
  num_copy_requests_in_subtree_ = GOOGLE_LONGLONG(0);
  transform_id_ = GOOGLE_LONGLONG(0);
  clip_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EffectNodeData::~EffectNodeData() {
  SharedDtor();
}

void EffectNodeData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EffectNodeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EffectNodeData& EffectNodeData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_property_5ftree_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_property_5ftree_2eproto();
#endif
  return *default_instance_;
}

EffectNodeData* EffectNodeData::default_instance_ = NULL;

EffectNodeData* EffectNodeData::New() const {
  return new EffectNodeData;
}

void EffectNodeData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opacity_ = 0;
    screen_space_opacity_ = 0;
    has_render_surface_ = false;
    has_copy_request_ = false;
    has_background_filters_ = false;
    is_drawn_ = false;
    has_animated_opacity_ = false;
    num_copy_requests_in_subtree_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    transform_id_ = GOOGLE_LONGLONG(0);
    clip_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool EffectNodeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float opacity = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &opacity_)));
          set_has_opacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_screen_space_opacity;
        break;
      }

      // optional float screen_space_opacity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_screen_space_opacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &screen_space_opacity_)));
          set_has_screen_space_opacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_has_render_surface;
        break;
      }

      // optional bool has_render_surface = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_render_surface:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_render_surface_)));
          set_has_has_render_surface();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_has_copy_request;
        break;
      }

      // optional bool has_copy_request = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_copy_request:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_copy_request_)));
          set_has_has_copy_request();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_has_background_filters;
        break;
      }

      // optional bool has_background_filters = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_background_filters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_background_filters_)));
          set_has_has_background_filters();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_drawn;
        break;
      }

      // optional bool is_drawn = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_drawn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_drawn_)));
          set_has_is_drawn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_has_animated_opacity;
        break;
      }

      // optional bool has_animated_opacity = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_animated_opacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_animated_opacity_)));
          set_has_has_animated_opacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_num_copy_requests_in_subtree;
        break;
      }

      // optional int64 num_copy_requests_in_subtree = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_copy_requests_in_subtree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_copy_requests_in_subtree_)));
          set_has_num_copy_requests_in_subtree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_transform_id;
        break;
      }

      // optional int64 transform_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transform_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transform_id_)));
          set_has_transform_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_clip_id;
        break;
      }

      // optional int64 clip_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clip_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &clip_id_)));
          set_has_clip_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EffectNodeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float opacity = 1;
  if (has_opacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->opacity(), output);
  }

  // optional float screen_space_opacity = 2;
  if (has_screen_space_opacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->screen_space_opacity(), output);
  }

  // optional bool has_render_surface = 3;
  if (has_has_render_surface()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->has_render_surface(), output);
  }

  // optional bool has_copy_request = 4;
  if (has_has_copy_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->has_copy_request(), output);
  }

  // optional bool has_background_filters = 5;
  if (has_has_background_filters()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->has_background_filters(), output);
  }

  // optional bool is_drawn = 6;
  if (has_is_drawn()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_drawn(), output);
  }

  // optional bool has_animated_opacity = 7;
  if (has_has_animated_opacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->has_animated_opacity(), output);
  }

  // optional int64 num_copy_requests_in_subtree = 8;
  if (has_num_copy_requests_in_subtree()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->num_copy_requests_in_subtree(), output);
  }

  // optional int64 transform_id = 9;
  if (has_transform_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->transform_id(), output);
  }

  // optional int64 clip_id = 10;
  if (has_clip_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->clip_id(), output);
  }

}

int EffectNodeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float opacity = 1;
    if (has_opacity()) {
      total_size += 1 + 4;
    }

    // optional float screen_space_opacity = 2;
    if (has_screen_space_opacity()) {
      total_size += 1 + 4;
    }

    // optional bool has_render_surface = 3;
    if (has_has_render_surface()) {
      total_size += 1 + 1;
    }

    // optional bool has_copy_request = 4;
    if (has_has_copy_request()) {
      total_size += 1 + 1;
    }

    // optional bool has_background_filters = 5;
    if (has_has_background_filters()) {
      total_size += 1 + 1;
    }

    // optional bool is_drawn = 6;
    if (has_is_drawn()) {
      total_size += 1 + 1;
    }

    // optional bool has_animated_opacity = 7;
    if (has_has_animated_opacity()) {
      total_size += 1 + 1;
    }

    // optional int64 num_copy_requests_in_subtree = 8;
    if (has_num_copy_requests_in_subtree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num_copy_requests_in_subtree());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 transform_id = 9;
    if (has_transform_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->transform_id());
    }

    // optional int64 clip_id = 10;
    if (has_clip_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->clip_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EffectNodeData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EffectNodeData*>(&from));
}

void EffectNodeData::MergeFrom(const EffectNodeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opacity()) {
      set_opacity(from.opacity());
    }
    if (from.has_screen_space_opacity()) {
      set_screen_space_opacity(from.screen_space_opacity());
    }
    if (from.has_has_render_surface()) {
      set_has_render_surface(from.has_render_surface());
    }
    if (from.has_has_copy_request()) {
      set_has_copy_request(from.has_copy_request());
    }
    if (from.has_has_background_filters()) {
      set_has_background_filters(from.has_background_filters());
    }
    if (from.has_is_drawn()) {
      set_is_drawn(from.is_drawn());
    }
    if (from.has_has_animated_opacity()) {
      set_has_animated_opacity(from.has_animated_opacity());
    }
    if (from.has_num_copy_requests_in_subtree()) {
      set_num_copy_requests_in_subtree(from.num_copy_requests_in_subtree());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_transform_id()) {
      set_transform_id(from.transform_id());
    }
    if (from.has_clip_id()) {
      set_clip_id(from.clip_id());
    }
  }
}

void EffectNodeData::CopyFrom(const EffectNodeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EffectNodeData::IsInitialized() const {

  return true;
}

void EffectNodeData::Swap(EffectNodeData* other) {
  if (other != this) {
    std::swap(opacity_, other->opacity_);
    std::swap(screen_space_opacity_, other->screen_space_opacity_);
    std::swap(has_render_surface_, other->has_render_surface_);
    std::swap(has_copy_request_, other->has_copy_request_);
    std::swap(has_background_filters_, other->has_background_filters_);
    std::swap(is_drawn_, other->is_drawn_);
    std::swap(has_animated_opacity_, other->has_animated_opacity_);
    std::swap(num_copy_requests_in_subtree_, other->num_copy_requests_in_subtree_);
    std::swap(transform_id_, other->transform_id_);
    std::swap(clip_id_, other->clip_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EffectNodeData::GetTypeName() const {
  return "cc.proto.EffectNodeData";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScrollNodeData::kScrollableFieldNumber;
const int ScrollNodeData::kMainThreadScrollingReasonsFieldNumber;
const int ScrollNodeData::kContainsNonFastScrollableRegionFieldNumber;
const int ScrollNodeData::kTransformIdFieldNumber;
#endif  // !_MSC_VER

ScrollNodeData::ScrollNodeData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ScrollNodeData::InitAsDefaultInstance() {
}

ScrollNodeData::ScrollNodeData(const ScrollNodeData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ScrollNodeData::SharedCtor() {
  _cached_size_ = 0;
  scrollable_ = false;
  main_thread_scrolling_reasons_ = 0;
  contains_non_fast_scrollable_region_ = false;
  transform_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScrollNodeData::~ScrollNodeData() {
  SharedDtor();
}

void ScrollNodeData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ScrollNodeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ScrollNodeData& ScrollNodeData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_property_5ftree_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_property_5ftree_2eproto();
#endif
  return *default_instance_;
}

ScrollNodeData* ScrollNodeData::default_instance_ = NULL;

ScrollNodeData* ScrollNodeData::New() const {
  return new ScrollNodeData;
}

void ScrollNodeData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scrollable_ = false;
    main_thread_scrolling_reasons_ = 0;
    contains_non_fast_scrollable_region_ = false;
    transform_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ScrollNodeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool scrollable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &scrollable_)));
          set_has_scrollable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_main_thread_scrolling_reasons;
        break;
      }

      // optional int32 main_thread_scrolling_reasons = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_main_thread_scrolling_reasons:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &main_thread_scrolling_reasons_)));
          set_has_main_thread_scrolling_reasons();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_contains_non_fast_scrollable_region;
        break;
      }

      // optional bool contains_non_fast_scrollable_region = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contains_non_fast_scrollable_region:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &contains_non_fast_scrollable_region_)));
          set_has_contains_non_fast_scrollable_region();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_transform_id;
        break;
      }

      // optional int64 transform_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transform_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transform_id_)));
          set_has_transform_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScrollNodeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool scrollable = 1;
  if (has_scrollable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->scrollable(), output);
  }

  // optional int32 main_thread_scrolling_reasons = 2;
  if (has_main_thread_scrolling_reasons()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->main_thread_scrolling_reasons(), output);
  }

  // optional bool contains_non_fast_scrollable_region = 3;
  if (has_contains_non_fast_scrollable_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->contains_non_fast_scrollable_region(), output);
  }

  // optional int64 transform_id = 4;
  if (has_transform_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->transform_id(), output);
  }

}

int ScrollNodeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool scrollable = 1;
    if (has_scrollable()) {
      total_size += 1 + 1;
    }

    // optional int32 main_thread_scrolling_reasons = 2;
    if (has_main_thread_scrolling_reasons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->main_thread_scrolling_reasons());
    }

    // optional bool contains_non_fast_scrollable_region = 3;
    if (has_contains_non_fast_scrollable_region()) {
      total_size += 1 + 1;
    }

    // optional int64 transform_id = 4;
    if (has_transform_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->transform_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScrollNodeData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ScrollNodeData*>(&from));
}

void ScrollNodeData::MergeFrom(const ScrollNodeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scrollable()) {
      set_scrollable(from.scrollable());
    }
    if (from.has_main_thread_scrolling_reasons()) {
      set_main_thread_scrolling_reasons(from.main_thread_scrolling_reasons());
    }
    if (from.has_contains_non_fast_scrollable_region()) {
      set_contains_non_fast_scrollable_region(from.contains_non_fast_scrollable_region());
    }
    if (from.has_transform_id()) {
      set_transform_id(from.transform_id());
    }
  }
}

void ScrollNodeData::CopyFrom(const ScrollNodeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScrollNodeData::IsInitialized() const {

  return true;
}

void ScrollNodeData::Swap(ScrollNodeData* other) {
  if (other != this) {
    std::swap(scrollable_, other->scrollable_);
    std::swap(main_thread_scrolling_reasons_, other->main_thread_scrolling_reasons_);
    std::swap(contains_non_fast_scrollable_region_, other->contains_non_fast_scrollable_region_);
    std::swap(transform_id_, other->transform_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ScrollNodeData::GetTypeName() const {
  return "cc.proto.ScrollNodeData";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TreeNode::kIdFieldNumber;
const int TreeNode::kParentIdFieldNumber;
const int TreeNode::kOwnerIdFieldNumber;
const int TreeNode::kTransformNodeDataFieldNumber;
const int TreeNode::kClipNodeDataFieldNumber;
const int TreeNode::kEffectNodeDataFieldNumber;
const int TreeNode::kScrollNodeDataFieldNumber;
#endif  // !_MSC_VER

TreeNode::TreeNode()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TreeNode::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  transform_node_data_ = const_cast< ::cc::proto::TranformNodeData*>(
      ::cc::proto::TranformNodeData::internal_default_instance());
#else
  transform_node_data_ = const_cast< ::cc::proto::TranformNodeData*>(&::cc::proto::TranformNodeData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  clip_node_data_ = const_cast< ::cc::proto::ClipNodeData*>(
      ::cc::proto::ClipNodeData::internal_default_instance());
#else
  clip_node_data_ = const_cast< ::cc::proto::ClipNodeData*>(&::cc::proto::ClipNodeData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  effect_node_data_ = const_cast< ::cc::proto::EffectNodeData*>(
      ::cc::proto::EffectNodeData::internal_default_instance());
#else
  effect_node_data_ = const_cast< ::cc::proto::EffectNodeData*>(&::cc::proto::EffectNodeData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  scroll_node_data_ = const_cast< ::cc::proto::ScrollNodeData*>(
      ::cc::proto::ScrollNodeData::internal_default_instance());
#else
  scroll_node_data_ = const_cast< ::cc::proto::ScrollNodeData*>(&::cc::proto::ScrollNodeData::default_instance());
#endif
}

TreeNode::TreeNode(const TreeNode& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TreeNode::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  parent_id_ = GOOGLE_LONGLONG(0);
  owner_id_ = GOOGLE_LONGLONG(0);
  transform_node_data_ = NULL;
  clip_node_data_ = NULL;
  effect_node_data_ = NULL;
  scroll_node_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreeNode::~TreeNode() {
  SharedDtor();
}

void TreeNode::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete transform_node_data_;
    delete clip_node_data_;
    delete effect_node_data_;
    delete scroll_node_data_;
  }
}

void TreeNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TreeNode& TreeNode::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_property_5ftree_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_property_5ftree_2eproto();
#endif
  return *default_instance_;
}

TreeNode* TreeNode::default_instance_ = NULL;

TreeNode* TreeNode::New() const {
  return new TreeNode;
}

void TreeNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    parent_id_ = GOOGLE_LONGLONG(0);
    owner_id_ = GOOGLE_LONGLONG(0);
    if (has_transform_node_data()) {
      if (transform_node_data_ != NULL) transform_node_data_->::cc::proto::TranformNodeData::Clear();
    }
    if (has_clip_node_data()) {
      if (clip_node_data_ != NULL) clip_node_data_->::cc::proto::ClipNodeData::Clear();
    }
    if (has_effect_node_data()) {
      if (effect_node_data_ != NULL) effect_node_data_->::cc::proto::EffectNodeData::Clear();
    }
    if (has_scroll_node_data()) {
      if (scroll_node_data_ != NULL) scroll_node_data_->::cc::proto::ScrollNodeData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TreeNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_parent_id;
        break;
      }

      // optional int64 parent_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &parent_id_)));
          set_has_parent_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_owner_id;
        break;
      }

      // optional int64 owner_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_owner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &owner_id_)));
          set_has_owner_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_transform_node_data;
        break;
      }

      // optional .cc.proto.TranformNodeData transform_node_data = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transform_node_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform_node_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8010)) goto parse_clip_node_data;
        break;
      }

      // optional .cc.proto.ClipNodeData clip_node_data = 1001;
      case 1001: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clip_node_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clip_node_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8018)) goto parse_effect_node_data;
        break;
      }

      // optional .cc.proto.EffectNodeData effect_node_data = 1002;
      case 1002: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effect_node_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_effect_node_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8026)) goto parse_scroll_node_data;
        break;
      }

      // optional .cc.proto.ScrollNodeData scroll_node_data = 1003;
      case 1003: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scroll_node_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scroll_node_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TreeNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int64 parent_id = 2;
  if (has_parent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->parent_id(), output);
  }

  // optional int64 owner_id = 3;
  if (has_owner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->owner_id(), output);
  }

  // optional .cc.proto.TranformNodeData transform_node_data = 1000;
  if (has_transform_node_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1000, this->transform_node_data(), output);
  }

  // optional .cc.proto.ClipNodeData clip_node_data = 1001;
  if (has_clip_node_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1001, this->clip_node_data(), output);
  }

  // optional .cc.proto.EffectNodeData effect_node_data = 1002;
  if (has_effect_node_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1002, this->effect_node_data(), output);
  }

  // optional .cc.proto.ScrollNodeData scroll_node_data = 1003;
  if (has_scroll_node_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1003, this->scroll_node_data(), output);
  }

}

int TreeNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int64 parent_id = 2;
    if (has_parent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->parent_id());
    }

    // optional int64 owner_id = 3;
    if (has_owner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->owner_id());
    }

    // optional .cc.proto.TranformNodeData transform_node_data = 1000;
    if (has_transform_node_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transform_node_data());
    }

    // optional .cc.proto.ClipNodeData clip_node_data = 1001;
    if (has_clip_node_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clip_node_data());
    }

    // optional .cc.proto.EffectNodeData effect_node_data = 1002;
    if (has_effect_node_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->effect_node_data());
    }

    // optional .cc.proto.ScrollNodeData scroll_node_data = 1003;
    if (has_scroll_node_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scroll_node_data());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreeNode::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TreeNode*>(&from));
}

void TreeNode::MergeFrom(const TreeNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_parent_id()) {
      set_parent_id(from.parent_id());
    }
    if (from.has_owner_id()) {
      set_owner_id(from.owner_id());
    }
    if (from.has_transform_node_data()) {
      mutable_transform_node_data()->::cc::proto::TranformNodeData::MergeFrom(from.transform_node_data());
    }
    if (from.has_clip_node_data()) {
      mutable_clip_node_data()->::cc::proto::ClipNodeData::MergeFrom(from.clip_node_data());
    }
    if (from.has_effect_node_data()) {
      mutable_effect_node_data()->::cc::proto::EffectNodeData::MergeFrom(from.effect_node_data());
    }
    if (from.has_scroll_node_data()) {
      mutable_scroll_node_data()->::cc::proto::ScrollNodeData::MergeFrom(from.scroll_node_data());
    }
  }
}

void TreeNode::CopyFrom(const TreeNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeNode::IsInitialized() const {

  return true;
}

void TreeNode::Swap(TreeNode* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(parent_id_, other->parent_id_);
    std::swap(owner_id_, other->owner_id_);
    std::swap(transform_node_data_, other->transform_node_data_);
    std::swap(clip_node_data_, other->clip_node_data_);
    std::swap(effect_node_data_, other->effect_node_data_);
    std::swap(scroll_node_data_, other->scroll_node_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TreeNode::GetTypeName() const {
  return "cc.proto.TreeNode";
}


// ===================================================================

bool PropertyTree_PropertyType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PropertyTree_PropertyType PropertyTree::Transform;
const PropertyTree_PropertyType PropertyTree::Clip;
const PropertyTree_PropertyType PropertyTree::Effect;
const PropertyTree_PropertyType PropertyTree::Scroll;
const PropertyTree_PropertyType PropertyTree::PropertyType_MIN;
const PropertyTree_PropertyType PropertyTree::PropertyType_MAX;
const int PropertyTree::PropertyType_ARRAYSIZE;
#endif  // _MSC_VER
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PropertyTree::kPropertyTypeFieldNumber;
const int PropertyTree::kNodesFieldNumber;
const int PropertyTree::kNeedsUpdateFieldNumber;
const int PropertyTree::kTransformTreeDataFieldNumber;
#endif  // !_MSC_VER

PropertyTree::PropertyTree()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PropertyTree::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  transform_tree_data_ = const_cast< ::cc::proto::TransformTreeData*>(
      ::cc::proto::TransformTreeData::internal_default_instance());
#else
  transform_tree_data_ = const_cast< ::cc::proto::TransformTreeData*>(&::cc::proto::TransformTreeData::default_instance());
#endif
}

PropertyTree::PropertyTree(const PropertyTree& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PropertyTree::SharedCtor() {
  _cached_size_ = 0;
  property_type_ = 1;
  needs_update_ = false;
  transform_tree_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropertyTree::~PropertyTree() {
  SharedDtor();
}

void PropertyTree::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete transform_tree_data_;
  }
}

void PropertyTree::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PropertyTree& PropertyTree::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_property_5ftree_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_property_5ftree_2eproto();
#endif
  return *default_instance_;
}

PropertyTree* PropertyTree::default_instance_ = NULL;

PropertyTree* PropertyTree::New() const {
  return new PropertyTree;
}

void PropertyTree::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    property_type_ = 1;
    needs_update_ = false;
    if (has_transform_tree_data()) {
      if (transform_tree_data_ != NULL) transform_tree_data_->::cc::proto::TransformTreeData::Clear();
    }
  }
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PropertyTree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cc.proto.PropertyTree.PropertyType property_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cc::proto::PropertyTree_PropertyType_IsValid(value)) {
            set_property_type(static_cast< ::cc::proto::PropertyTree_PropertyType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nodes;
        break;
      }

      // repeated .cc.proto.TreeNode nodes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nodes;
        if (input->ExpectTag(24)) goto parse_needs_update;
        break;
      }

      // optional bool needs_update = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needs_update:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needs_update_)));
          set_has_needs_update();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_transform_tree_data;
        break;
      }

      // optional .cc.proto.TransformTreeData transform_tree_data = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transform_tree_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform_tree_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PropertyTree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cc.proto.PropertyTree.PropertyType property_type = 1;
  if (has_property_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->property_type(), output);
  }

  // repeated .cc.proto.TreeNode nodes = 2;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->nodes(i), output);
  }

  // optional bool needs_update = 3;
  if (has_needs_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->needs_update(), output);
  }

  // optional .cc.proto.TransformTreeData transform_tree_data = 1000;
  if (has_transform_tree_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1000, this->transform_tree_data(), output);
  }

}

int PropertyTree::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cc.proto.PropertyTree.PropertyType property_type = 1;
    if (has_property_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->property_type());
    }

    // optional bool needs_update = 3;
    if (has_needs_update()) {
      total_size += 1 + 1;
    }

    // optional .cc.proto.TransformTreeData transform_tree_data = 1000;
    if (has_transform_tree_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transform_tree_data());
    }

  }
  // repeated .cc.proto.TreeNode nodes = 2;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyTree::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PropertyTree*>(&from));
}

void PropertyTree::MergeFrom(const PropertyTree& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_.MergeFrom(from.nodes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_property_type()) {
      set_property_type(from.property_type());
    }
    if (from.has_needs_update()) {
      set_needs_update(from.needs_update());
    }
    if (from.has_transform_tree_data()) {
      mutable_transform_tree_data()->::cc::proto::TransformTreeData::MergeFrom(from.transform_tree_data());
    }
  }
}

void PropertyTree::CopyFrom(const PropertyTree& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyTree::IsInitialized() const {

  return true;
}

void PropertyTree::Swap(PropertyTree* other) {
  if (other != this) {
    std::swap(property_type_, other->property_type_);
    nodes_.Swap(&other->nodes_);
    std::swap(needs_update_, other->needs_update_);
    std::swap(transform_tree_data_, other->transform_tree_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PropertyTree::GetTypeName() const {
  return "cc.proto.PropertyTree";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransformTreeData::kSourceToParentUpdatesAllowedFieldNumber;
const int TransformTreeData::kPageScaleFactorFieldNumber;
const int TransformTreeData::kDeviceScaleFactorFieldNumber;
const int TransformTreeData::kDeviceTransformScaleFactorFieldNumber;
const int TransformTreeData::kInnerViewportBoundsDeltaFieldNumber;
const int TransformTreeData::kOuterViewportBoundsDeltaFieldNumber;
const int TransformTreeData::kNodesAffectedByInnerViewportBoundsDeltaFieldNumber;
const int TransformTreeData::kNodesAffectedByOuterViewportBoundsDeltaFieldNumber;
#endif  // !_MSC_VER

TransformTreeData::TransformTreeData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TransformTreeData::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  inner_viewport_bounds_delta_ = const_cast< ::cc::proto::Vector2dF*>(
      ::cc::proto::Vector2dF::internal_default_instance());
#else
  inner_viewport_bounds_delta_ = const_cast< ::cc::proto::Vector2dF*>(&::cc::proto::Vector2dF::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  outer_viewport_bounds_delta_ = const_cast< ::cc::proto::Vector2dF*>(
      ::cc::proto::Vector2dF::internal_default_instance());
#else
  outer_viewport_bounds_delta_ = const_cast< ::cc::proto::Vector2dF*>(&::cc::proto::Vector2dF::default_instance());
#endif
}

TransformTreeData::TransformTreeData(const TransformTreeData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TransformTreeData::SharedCtor() {
  _cached_size_ = 0;
  source_to_parent_updates_allowed_ = false;
  page_scale_factor_ = 0;
  device_scale_factor_ = 0;
  device_transform_scale_factor_ = 0;
  inner_viewport_bounds_delta_ = NULL;
  outer_viewport_bounds_delta_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransformTreeData::~TransformTreeData() {
  SharedDtor();
}

void TransformTreeData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete inner_viewport_bounds_delta_;
    delete outer_viewport_bounds_delta_;
  }
}

void TransformTreeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TransformTreeData& TransformTreeData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_property_5ftree_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_property_5ftree_2eproto();
#endif
  return *default_instance_;
}

TransformTreeData* TransformTreeData::default_instance_ = NULL;

TransformTreeData* TransformTreeData::New() const {
  return new TransformTreeData;
}

void TransformTreeData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    source_to_parent_updates_allowed_ = false;
    page_scale_factor_ = 0;
    device_scale_factor_ = 0;
    device_transform_scale_factor_ = 0;
    if (has_inner_viewport_bounds_delta()) {
      if (inner_viewport_bounds_delta_ != NULL) inner_viewport_bounds_delta_->::cc::proto::Vector2dF::Clear();
    }
    if (has_outer_viewport_bounds_delta()) {
      if (outer_viewport_bounds_delta_ != NULL) outer_viewport_bounds_delta_->::cc::proto::Vector2dF::Clear();
    }
  }
  nodes_affected_by_inner_viewport_bounds_delta_.Clear();
  nodes_affected_by_outer_viewport_bounds_delta_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TransformTreeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool source_to_parent_updates_allowed = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &source_to_parent_updates_allowed_)));
          set_has_source_to_parent_updates_allowed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_page_scale_factor;
        break;
      }

      // optional float page_scale_factor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_page_scale_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &page_scale_factor_)));
          set_has_page_scale_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_device_scale_factor;
        break;
      }

      // optional float device_scale_factor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_device_scale_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &device_scale_factor_)));
          set_has_device_scale_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_device_transform_scale_factor;
        break;
      }

      // optional float device_transform_scale_factor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_device_transform_scale_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &device_transform_scale_factor_)));
          set_has_device_transform_scale_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_inner_viewport_bounds_delta;
        break;
      }

      // optional .cc.proto.Vector2dF inner_viewport_bounds_delta = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inner_viewport_bounds_delta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inner_viewport_bounds_delta()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_outer_viewport_bounds_delta;
        break;
      }

      // optional .cc.proto.Vector2dF outer_viewport_bounds_delta = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_outer_viewport_bounds_delta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_outer_viewport_bounds_delta()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_nodes_affected_by_inner_viewport_bounds_delta;
        break;
      }

      // repeated int64 nodes_affected_by_inner_viewport_bounds_delta = 7 [packed = true];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodes_affected_by_inner_viewport_bounds_delta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_nodes_affected_by_inner_viewport_bounds_delta())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 58, input, this->mutable_nodes_affected_by_inner_viewport_bounds_delta())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_nodes_affected_by_outer_viewport_bounds_delta;
        break;
      }

      // repeated int64 nodes_affected_by_outer_viewport_bounds_delta = 8 [packed = true];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodes_affected_by_outer_viewport_bounds_delta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_nodes_affected_by_outer_viewport_bounds_delta())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 66, input, this->mutable_nodes_affected_by_outer_viewport_bounds_delta())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransformTreeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool source_to_parent_updates_allowed = 1;
  if (has_source_to_parent_updates_allowed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->source_to_parent_updates_allowed(), output);
  }

  // optional float page_scale_factor = 2;
  if (has_page_scale_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->page_scale_factor(), output);
  }

  // optional float device_scale_factor = 3;
  if (has_device_scale_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->device_scale_factor(), output);
  }

  // optional float device_transform_scale_factor = 4;
  if (has_device_transform_scale_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->device_transform_scale_factor(), output);
  }

  // optional .cc.proto.Vector2dF inner_viewport_bounds_delta = 5;
  if (has_inner_viewport_bounds_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->inner_viewport_bounds_delta(), output);
  }

  // optional .cc.proto.Vector2dF outer_viewport_bounds_delta = 6;
  if (has_outer_viewport_bounds_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->outer_viewport_bounds_delta(), output);
  }

  // repeated int64 nodes_affected_by_inner_viewport_bounds_delta = 7 [packed = true];
  if (this->nodes_affected_by_inner_viewport_bounds_delta_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_nodes_affected_by_inner_viewport_bounds_delta_cached_byte_size_);
  }
  for (int i = 0; i < this->nodes_affected_by_inner_viewport_bounds_delta_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->nodes_affected_by_inner_viewport_bounds_delta(i), output);
  }

  // repeated int64 nodes_affected_by_outer_viewport_bounds_delta = 8 [packed = true];
  if (this->nodes_affected_by_outer_viewport_bounds_delta_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_nodes_affected_by_outer_viewport_bounds_delta_cached_byte_size_);
  }
  for (int i = 0; i < this->nodes_affected_by_outer_viewport_bounds_delta_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->nodes_affected_by_outer_viewport_bounds_delta(i), output);
  }

}

int TransformTreeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool source_to_parent_updates_allowed = 1;
    if (has_source_to_parent_updates_allowed()) {
      total_size += 1 + 1;
    }

    // optional float page_scale_factor = 2;
    if (has_page_scale_factor()) {
      total_size += 1 + 4;
    }

    // optional float device_scale_factor = 3;
    if (has_device_scale_factor()) {
      total_size += 1 + 4;
    }

    // optional float device_transform_scale_factor = 4;
    if (has_device_transform_scale_factor()) {
      total_size += 1 + 4;
    }

    // optional .cc.proto.Vector2dF inner_viewport_bounds_delta = 5;
    if (has_inner_viewport_bounds_delta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inner_viewport_bounds_delta());
    }

    // optional .cc.proto.Vector2dF outer_viewport_bounds_delta = 6;
    if (has_outer_viewport_bounds_delta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->outer_viewport_bounds_delta());
    }

  }
  // repeated int64 nodes_affected_by_inner_viewport_bounds_delta = 7 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->nodes_affected_by_inner_viewport_bounds_delta_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->nodes_affected_by_inner_viewport_bounds_delta(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _nodes_affected_by_inner_viewport_bounds_delta_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int64 nodes_affected_by_outer_viewport_bounds_delta = 8 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->nodes_affected_by_outer_viewport_bounds_delta_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->nodes_affected_by_outer_viewport_bounds_delta(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _nodes_affected_by_outer_viewport_bounds_delta_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransformTreeData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TransformTreeData*>(&from));
}

void TransformTreeData::MergeFrom(const TransformTreeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_affected_by_inner_viewport_bounds_delta_.MergeFrom(from.nodes_affected_by_inner_viewport_bounds_delta_);
  nodes_affected_by_outer_viewport_bounds_delta_.MergeFrom(from.nodes_affected_by_outer_viewport_bounds_delta_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_to_parent_updates_allowed()) {
      set_source_to_parent_updates_allowed(from.source_to_parent_updates_allowed());
    }
    if (from.has_page_scale_factor()) {
      set_page_scale_factor(from.page_scale_factor());
    }
    if (from.has_device_scale_factor()) {
      set_device_scale_factor(from.device_scale_factor());
    }
    if (from.has_device_transform_scale_factor()) {
      set_device_transform_scale_factor(from.device_transform_scale_factor());
    }
    if (from.has_inner_viewport_bounds_delta()) {
      mutable_inner_viewport_bounds_delta()->::cc::proto::Vector2dF::MergeFrom(from.inner_viewport_bounds_delta());
    }
    if (from.has_outer_viewport_bounds_delta()) {
      mutable_outer_viewport_bounds_delta()->::cc::proto::Vector2dF::MergeFrom(from.outer_viewport_bounds_delta());
    }
  }
}

void TransformTreeData::CopyFrom(const TransformTreeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformTreeData::IsInitialized() const {

  return true;
}

void TransformTreeData::Swap(TransformTreeData* other) {
  if (other != this) {
    std::swap(source_to_parent_updates_allowed_, other->source_to_parent_updates_allowed_);
    std::swap(page_scale_factor_, other->page_scale_factor_);
    std::swap(device_scale_factor_, other->device_scale_factor_);
    std::swap(device_transform_scale_factor_, other->device_transform_scale_factor_);
    std::swap(inner_viewport_bounds_delta_, other->inner_viewport_bounds_delta_);
    std::swap(outer_viewport_bounds_delta_, other->outer_viewport_bounds_delta_);
    nodes_affected_by_inner_viewport_bounds_delta_.Swap(&other->nodes_affected_by_inner_viewport_bounds_delta_);
    nodes_affected_by_outer_viewport_bounds_delta_.Swap(&other->nodes_affected_by_outer_viewport_bounds_delta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TransformTreeData::GetTypeName() const {
  return "cc.proto.TransformTreeData";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PropertyTrees::kTransformTreeFieldNumber;
const int PropertyTrees::kEffectTreeFieldNumber;
const int PropertyTrees::kClipTreeFieldNumber;
const int PropertyTrees::kScrollTreeFieldNumber;
const int PropertyTrees::kNeedsRebuildFieldNumber;
const int PropertyTrees::kNonRootSurfacesEnabledFieldNumber;
const int PropertyTrees::kSequenceNumberFieldNumber;
#endif  // !_MSC_VER

PropertyTrees::PropertyTrees()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PropertyTrees::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  transform_tree_ = const_cast< ::cc::proto::PropertyTree*>(
      ::cc::proto::PropertyTree::internal_default_instance());
#else
  transform_tree_ = const_cast< ::cc::proto::PropertyTree*>(&::cc::proto::PropertyTree::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  effect_tree_ = const_cast< ::cc::proto::PropertyTree*>(
      ::cc::proto::PropertyTree::internal_default_instance());
#else
  effect_tree_ = const_cast< ::cc::proto::PropertyTree*>(&::cc::proto::PropertyTree::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  clip_tree_ = const_cast< ::cc::proto::PropertyTree*>(
      ::cc::proto::PropertyTree::internal_default_instance());
#else
  clip_tree_ = const_cast< ::cc::proto::PropertyTree*>(&::cc::proto::PropertyTree::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  scroll_tree_ = const_cast< ::cc::proto::PropertyTree*>(
      ::cc::proto::PropertyTree::internal_default_instance());
#else
  scroll_tree_ = const_cast< ::cc::proto::PropertyTree*>(&::cc::proto::PropertyTree::default_instance());
#endif
}

PropertyTrees::PropertyTrees(const PropertyTrees& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PropertyTrees::SharedCtor() {
  _cached_size_ = 0;
  transform_tree_ = NULL;
  effect_tree_ = NULL;
  clip_tree_ = NULL;
  scroll_tree_ = NULL;
  needs_rebuild_ = false;
  non_root_surfaces_enabled_ = false;
  sequence_number_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropertyTrees::~PropertyTrees() {
  SharedDtor();
}

void PropertyTrees::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete transform_tree_;
    delete effect_tree_;
    delete clip_tree_;
    delete scroll_tree_;
  }
}

void PropertyTrees::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PropertyTrees& PropertyTrees::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_property_5ftree_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_property_5ftree_2eproto();
#endif
  return *default_instance_;
}

PropertyTrees* PropertyTrees::default_instance_ = NULL;

PropertyTrees* PropertyTrees::New() const {
  return new PropertyTrees;
}

void PropertyTrees::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_transform_tree()) {
      if (transform_tree_ != NULL) transform_tree_->::cc::proto::PropertyTree::Clear();
    }
    if (has_effect_tree()) {
      if (effect_tree_ != NULL) effect_tree_->::cc::proto::PropertyTree::Clear();
    }
    if (has_clip_tree()) {
      if (clip_tree_ != NULL) clip_tree_->::cc::proto::PropertyTree::Clear();
    }
    if (has_scroll_tree()) {
      if (scroll_tree_ != NULL) scroll_tree_->::cc::proto::PropertyTree::Clear();
    }
    needs_rebuild_ = false;
    non_root_surfaces_enabled_ = false;
    sequence_number_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PropertyTrees::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cc.proto.PropertyTree transform_tree = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform_tree()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_effect_tree;
        break;
      }

      // optional .cc.proto.PropertyTree effect_tree = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effect_tree:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_effect_tree()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_clip_tree;
        break;
      }

      // optional .cc.proto.PropertyTree clip_tree = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clip_tree:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clip_tree()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_needs_rebuild;
        break;
      }

      // optional bool needs_rebuild = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needs_rebuild:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needs_rebuild_)));
          set_has_needs_rebuild();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_non_root_surfaces_enabled;
        break;
      }

      // optional bool non_root_surfaces_enabled = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_non_root_surfaces_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &non_root_surfaces_enabled_)));
          set_has_non_root_surfaces_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sequence_number;
        break;
      }

      // optional int64 sequence_number = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sequence_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_number_)));
          set_has_sequence_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_scroll_tree;
        break;
      }

      // optional .cc.proto.PropertyTree scroll_tree = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scroll_tree:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scroll_tree()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PropertyTrees::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cc.proto.PropertyTree transform_tree = 1;
  if (has_transform_tree()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->transform_tree(), output);
  }

  // optional .cc.proto.PropertyTree effect_tree = 2;
  if (has_effect_tree()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->effect_tree(), output);
  }

  // optional .cc.proto.PropertyTree clip_tree = 3;
  if (has_clip_tree()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->clip_tree(), output);
  }

  // optional bool needs_rebuild = 4;
  if (has_needs_rebuild()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->needs_rebuild(), output);
  }

  // optional bool non_root_surfaces_enabled = 5;
  if (has_non_root_surfaces_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->non_root_surfaces_enabled(), output);
  }

  // optional int64 sequence_number = 6;
  if (has_sequence_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->sequence_number(), output);
  }

  // optional .cc.proto.PropertyTree scroll_tree = 7;
  if (has_scroll_tree()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->scroll_tree(), output);
  }

}

int PropertyTrees::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cc.proto.PropertyTree transform_tree = 1;
    if (has_transform_tree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transform_tree());
    }

    // optional .cc.proto.PropertyTree effect_tree = 2;
    if (has_effect_tree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->effect_tree());
    }

    // optional .cc.proto.PropertyTree clip_tree = 3;
    if (has_clip_tree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clip_tree());
    }

    // optional .cc.proto.PropertyTree scroll_tree = 7;
    if (has_scroll_tree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scroll_tree());
    }

    // optional bool needs_rebuild = 4;
    if (has_needs_rebuild()) {
      total_size += 1 + 1;
    }

    // optional bool non_root_surfaces_enabled = 5;
    if (has_non_root_surfaces_enabled()) {
      total_size += 1 + 1;
    }

    // optional int64 sequence_number = 6;
    if (has_sequence_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sequence_number());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyTrees::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PropertyTrees*>(&from));
}

void PropertyTrees::MergeFrom(const PropertyTrees& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transform_tree()) {
      mutable_transform_tree()->::cc::proto::PropertyTree::MergeFrom(from.transform_tree());
    }
    if (from.has_effect_tree()) {
      mutable_effect_tree()->::cc::proto::PropertyTree::MergeFrom(from.effect_tree());
    }
    if (from.has_clip_tree()) {
      mutable_clip_tree()->::cc::proto::PropertyTree::MergeFrom(from.clip_tree());
    }
    if (from.has_scroll_tree()) {
      mutable_scroll_tree()->::cc::proto::PropertyTree::MergeFrom(from.scroll_tree());
    }
    if (from.has_needs_rebuild()) {
      set_needs_rebuild(from.needs_rebuild());
    }
    if (from.has_non_root_surfaces_enabled()) {
      set_non_root_surfaces_enabled(from.non_root_surfaces_enabled());
    }
    if (from.has_sequence_number()) {
      set_sequence_number(from.sequence_number());
    }
  }
}

void PropertyTrees::CopyFrom(const PropertyTrees& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyTrees::IsInitialized() const {

  return true;
}

void PropertyTrees::Swap(PropertyTrees* other) {
  if (other != this) {
    std::swap(transform_tree_, other->transform_tree_);
    std::swap(effect_tree_, other->effect_tree_);
    std::swap(clip_tree_, other->clip_tree_);
    std::swap(scroll_tree_, other->scroll_tree_);
    std::swap(needs_rebuild_, other->needs_rebuild_);
    std::swap(non_root_surfaces_enabled_, other->non_root_surfaces_enabled_);
    std::swap(sequence_number_, other->sequence_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PropertyTrees::GetTypeName() const {
  return "cc.proto.PropertyTrees";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cc

// @@protoc_insertion_point(global_scope)
