// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: layer_tree_settings.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "layer_tree_settings.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace cc {
namespace proto {

void protobuf_ShutdownFile_layer_5ftree_5fsettings_2eproto() {
  delete LayerTreeSettings::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_layer_5ftree_5fsettings_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_layer_5ftree_5fsettings_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::cc::proto::protobuf_AddDesc_layer_5ftree_5fdebug_5fstate_2eproto();
  ::cc::proto::protobuf_AddDesc_managed_5fmemory_5fpolicy_2eproto();
  ::cc::proto::protobuf_AddDesc_renderer_5fsettings_2eproto();
  ::cc::proto::protobuf_AddDesc_size_2eproto();
  LayerTreeSettings::default_instance_ = new LayerTreeSettings();
  LayerTreeSettings::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_layer_5ftree_5fsettings_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_layer_5ftree_5fsettings_2eproto_once_);
void protobuf_AddDesc_layer_5ftree_5fsettings_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_layer_5ftree_5fsettings_2eproto_once_,
                 &protobuf_AddDesc_layer_5ftree_5fsettings_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_layer_5ftree_5fsettings_2eproto {
  StaticDescriptorInitializer_layer_5ftree_5fsettings_2eproto() {
    protobuf_AddDesc_layer_5ftree_5fsettings_2eproto();
  }
} static_descriptor_initializer_layer_5ftree_5fsettings_2eproto_;
#endif

// ===================================================================

bool LayerTreeSettings_ScrollbarAnimator_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LayerTreeSettings_ScrollbarAnimator LayerTreeSettings::UNKNOWN;
const LayerTreeSettings_ScrollbarAnimator LayerTreeSettings::NO_ANIMATOR;
const LayerTreeSettings_ScrollbarAnimator LayerTreeSettings::LINEAR_FADE;
const LayerTreeSettings_ScrollbarAnimator LayerTreeSettings::THINNING;
const LayerTreeSettings_ScrollbarAnimator LayerTreeSettings::ScrollbarAnimator_MIN;
const LayerTreeSettings_ScrollbarAnimator LayerTreeSettings::ScrollbarAnimator_MAX;
const int LayerTreeSettings::ScrollbarAnimator_ARRAYSIZE;
#endif  // _MSC_VER
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LayerTreeSettings::kRendererSettingsFieldNumber;
const int LayerTreeSettings::kSingleThreadProxySchedulerFieldNumber;
const int LayerTreeSettings::kUseExternalBeginFrameSourceFieldNumber;
const int LayerTreeSettings::kMainFrameBeforeActivationEnabledFieldNumber;
const int LayerTreeSettings::kUsingSynchronousRendererCompositorFieldNumber;
const int LayerTreeSettings::kAcceleratedAnimationEnabledFieldNumber;
const int LayerTreeSettings::kCanUseLcdTextFieldNumber;
const int LayerTreeSettings::kUseDistanceFieldTextFieldNumber;
const int LayerTreeSettings::kGpuRasterizationEnabledFieldNumber;
const int LayerTreeSettings::kGpuRasterizationForcedFieldNumber;
const int LayerTreeSettings::kGpuRasterizationMsaaSampleCountFieldNumber;
const int LayerTreeSettings::kGpuRasterizationSkewportTargetTimeInSecondsFieldNumber;
const int LayerTreeSettings::kCreateLowResTilingFieldNumber;
const int LayerTreeSettings::kScrollbarAnimatorFieldNumber;
const int LayerTreeSettings::kScrollbarFadeDelayMsFieldNumber;
const int LayerTreeSettings::kScrollbarFadeResizeDelayMsFieldNumber;
const int LayerTreeSettings::kScrollbarFadeDurationMsFieldNumber;
const int LayerTreeSettings::kSolidColorScrollbarColorFieldNumber;
const int LayerTreeSettings::kTimeoutAndDrawWhenAnimationCheckerboardsFieldNumber;
const int LayerTreeSettings::kLayerTransformsShouldScaleLayerContentsFieldNumber;
const int LayerTreeSettings::kLayersAlwaysAllowedLcdTextFieldNumber;
const int LayerTreeSettings::kMinimumContentsScaleFieldNumber;
const int LayerTreeSettings::kLowResContentsScaleFactorFieldNumber;
const int LayerTreeSettings::kTopControlsShowThresholdFieldNumber;
const int LayerTreeSettings::kTopControlsHideThresholdFieldNumber;
const int LayerTreeSettings::kBackgroundAnimationRateFieldNumber;
const int LayerTreeSettings::kDefaultTileSizeFieldNumber;
const int LayerTreeSettings::kMaxUntiledLayerSizeFieldNumber;
const int LayerTreeSettings::kMinimumOcclusionTrackingSizeFieldNumber;
const int LayerTreeSettings::kTilingInterestAreaPaddingFieldNumber;
const int LayerTreeSettings::kSkewportTargetTimeInSecondsFieldNumber;
const int LayerTreeSettings::kSkewportExtrapolationLimitInContentPixelsFieldNumber;
const int LayerTreeSettings::kMaxMemoryForPrepaintPercentageFieldNumber;
const int LayerTreeSettings::kStrictLayerPropertyChangeCheckingFieldNumber;
const int LayerTreeSettings::kUseZeroCopyFieldNumber;
const int LayerTreeSettings::kUsePartialRasterFieldNumber;
const int LayerTreeSettings::kEnableElasticOverscrollFieldNumber;
const int LayerTreeSettings::kUseImageTextureTargetsFieldNumber;
const int LayerTreeSettings::kIgnoreRootLayerFlingsFieldNumber;
const int LayerTreeSettings::kScheduledRasterTaskLimitFieldNumber;
const int LayerTreeSettings::kUseOcclusionForTilePrioritizationFieldNumber;
const int LayerTreeSettings::kVerifyPropertyTreesFieldNumber;
const int LayerTreeSettings::kUsePropertyTreesFieldNumber;
const int LayerTreeSettings::kImageDecodeTasksEnabledFieldNumber;
const int LayerTreeSettings::kUseCompositorAnimationTimelinesFieldNumber;
const int LayerTreeSettings::kWaitForBeginframeIntervalFieldNumber;
const int LayerTreeSettings::kMaxStagingBufferUsageInBytesFieldNumber;
const int LayerTreeSettings::kMemoryPolicyFieldNumber;
const int LayerTreeSettings::kInitialDebugStateFieldNumber;
#endif  // !_MSC_VER

LayerTreeSettings::LayerTreeSettings()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LayerTreeSettings::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  renderer_settings_ = const_cast< ::cc::proto::RendererSettings*>(
      ::cc::proto::RendererSettings::internal_default_instance());
#else
  renderer_settings_ = const_cast< ::cc::proto::RendererSettings*>(&::cc::proto::RendererSettings::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  default_tile_size_ = const_cast< ::cc::proto::Size*>(
      ::cc::proto::Size::internal_default_instance());
#else
  default_tile_size_ = const_cast< ::cc::proto::Size*>(&::cc::proto::Size::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  max_untiled_layer_size_ = const_cast< ::cc::proto::Size*>(
      ::cc::proto::Size::internal_default_instance());
#else
  max_untiled_layer_size_ = const_cast< ::cc::proto::Size*>(&::cc::proto::Size::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  minimum_occlusion_tracking_size_ = const_cast< ::cc::proto::Size*>(
      ::cc::proto::Size::internal_default_instance());
#else
  minimum_occlusion_tracking_size_ = const_cast< ::cc::proto::Size*>(&::cc::proto::Size::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  memory_policy_ = const_cast< ::cc::proto::ManagedMemoryPolicy*>(
      ::cc::proto::ManagedMemoryPolicy::internal_default_instance());
#else
  memory_policy_ = const_cast< ::cc::proto::ManagedMemoryPolicy*>(&::cc::proto::ManagedMemoryPolicy::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  initial_debug_state_ = const_cast< ::cc::proto::LayerTreeDebugState*>(
      ::cc::proto::LayerTreeDebugState::internal_default_instance());
#else
  initial_debug_state_ = const_cast< ::cc::proto::LayerTreeDebugState*>(&::cc::proto::LayerTreeDebugState::default_instance());
#endif
}

LayerTreeSettings::LayerTreeSettings(const LayerTreeSettings& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LayerTreeSettings::SharedCtor() {
  _cached_size_ = 0;
  renderer_settings_ = NULL;
  single_thread_proxy_scheduler_ = false;
  use_external_begin_frame_source_ = false;
  main_frame_before_activation_enabled_ = false;
  using_synchronous_renderer_compositor_ = false;
  accelerated_animation_enabled_ = false;
  can_use_lcd_text_ = false;
  use_distance_field_text_ = false;
  gpu_rasterization_enabled_ = false;
  gpu_rasterization_forced_ = false;
  gpu_rasterization_msaa_sample_count_ = 0;
  gpu_rasterization_skewport_target_time_in_seconds_ = 0;
  create_low_res_tiling_ = false;
  scrollbar_animator_ = 0;
  scrollbar_fade_delay_ms_ = 0;
  scrollbar_fade_resize_delay_ms_ = 0;
  scrollbar_fade_duration_ms_ = 0;
  solid_color_scrollbar_color_ = 0u;
  timeout_and_draw_when_animation_checkerboards_ = false;
  layer_transforms_should_scale_layer_contents_ = false;
  layers_always_allowed_lcd_text_ = false;
  minimum_contents_scale_ = 0;
  low_res_contents_scale_factor_ = 0;
  top_controls_show_threshold_ = 0;
  top_controls_hide_threshold_ = 0;
  background_animation_rate_ = 0;
  default_tile_size_ = NULL;
  max_untiled_layer_size_ = NULL;
  minimum_occlusion_tracking_size_ = NULL;
  tiling_interest_area_padding_ = 0u;
  skewport_target_time_in_seconds_ = 0;
  skewport_extrapolation_limit_in_content_pixels_ = 0;
  max_memory_for_prepaint_percentage_ = 0u;
  strict_layer_property_change_checking_ = false;
  use_zero_copy_ = false;
  use_partial_raster_ = false;
  enable_elastic_overscroll_ = false;
  ignore_root_layer_flings_ = false;
  scheduled_raster_task_limit_ = 0u;
  use_occlusion_for_tile_prioritization_ = false;
  verify_property_trees_ = false;
  use_property_trees_ = false;
  image_decode_tasks_enabled_ = false;
  use_compositor_animation_timelines_ = false;
  wait_for_beginframe_interval_ = false;
  max_staging_buffer_usage_in_bytes_ = 0;
  memory_policy_ = NULL;
  initial_debug_state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LayerTreeSettings::~LayerTreeSettings() {
  SharedDtor();
}

void LayerTreeSettings::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete renderer_settings_;
    delete default_tile_size_;
    delete max_untiled_layer_size_;
    delete minimum_occlusion_tracking_size_;
    delete memory_policy_;
    delete initial_debug_state_;
  }
}

void LayerTreeSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LayerTreeSettings& LayerTreeSettings::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_layer_5ftree_5fsettings_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_layer_5ftree_5fsettings_2eproto();
#endif
  return *default_instance_;
}

LayerTreeSettings* LayerTreeSettings::default_instance_ = NULL;

LayerTreeSettings* LayerTreeSettings::New() const {
  return new LayerTreeSettings;
}

void LayerTreeSettings::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_renderer_settings()) {
      if (renderer_settings_ != NULL) renderer_settings_->::cc::proto::RendererSettings::Clear();
    }
    single_thread_proxy_scheduler_ = false;
    use_external_begin_frame_source_ = false;
    main_frame_before_activation_enabled_ = false;
    using_synchronous_renderer_compositor_ = false;
    accelerated_animation_enabled_ = false;
    can_use_lcd_text_ = false;
    use_distance_field_text_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    gpu_rasterization_enabled_ = false;
    gpu_rasterization_forced_ = false;
    gpu_rasterization_msaa_sample_count_ = 0;
    gpu_rasterization_skewport_target_time_in_seconds_ = 0;
    create_low_res_tiling_ = false;
    scrollbar_animator_ = 0;
    scrollbar_fade_delay_ms_ = 0;
    scrollbar_fade_resize_delay_ms_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    scrollbar_fade_duration_ms_ = 0;
    solid_color_scrollbar_color_ = 0u;
    timeout_and_draw_when_animation_checkerboards_ = false;
    layer_transforms_should_scale_layer_contents_ = false;
    layers_always_allowed_lcd_text_ = false;
    minimum_contents_scale_ = 0;
    low_res_contents_scale_factor_ = 0;
    top_controls_show_threshold_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    top_controls_hide_threshold_ = 0;
    background_animation_rate_ = 0;
    if (has_default_tile_size()) {
      if (default_tile_size_ != NULL) default_tile_size_->::cc::proto::Size::Clear();
    }
    if (has_max_untiled_layer_size()) {
      if (max_untiled_layer_size_ != NULL) max_untiled_layer_size_->::cc::proto::Size::Clear();
    }
    if (has_minimum_occlusion_tracking_size()) {
      if (minimum_occlusion_tracking_size_ != NULL) minimum_occlusion_tracking_size_->::cc::proto::Size::Clear();
    }
    tiling_interest_area_padding_ = 0u;
    skewport_target_time_in_seconds_ = 0;
    skewport_extrapolation_limit_in_content_pixels_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    max_memory_for_prepaint_percentage_ = 0u;
    strict_layer_property_change_checking_ = false;
    use_zero_copy_ = false;
    use_partial_raster_ = false;
    enable_elastic_overscroll_ = false;
    ignore_root_layer_flings_ = false;
    scheduled_raster_task_limit_ = 0u;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    use_occlusion_for_tile_prioritization_ = false;
    verify_property_trees_ = false;
    use_property_trees_ = false;
    image_decode_tasks_enabled_ = false;
    use_compositor_animation_timelines_ = false;
    wait_for_beginframe_interval_ = false;
    max_staging_buffer_usage_in_bytes_ = 0;
    if (has_memory_policy()) {
      if (memory_policy_ != NULL) memory_policy_->::cc::proto::ManagedMemoryPolicy::Clear();
    }
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (has_initial_debug_state()) {
      if (initial_debug_state_ != NULL) initial_debug_state_->::cc::proto::LayerTreeDebugState::Clear();
    }
  }
  use_image_texture_targets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LayerTreeSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cc.proto.RendererSettings renderer_settings = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_renderer_settings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_single_thread_proxy_scheduler;
        break;
      }

      // optional bool single_thread_proxy_scheduler = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_single_thread_proxy_scheduler:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &single_thread_proxy_scheduler_)));
          set_has_single_thread_proxy_scheduler();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_use_external_begin_frame_source;
        break;
      }

      // optional bool use_external_begin_frame_source = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_external_begin_frame_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_external_begin_frame_source_)));
          set_has_use_external_begin_frame_source();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_main_frame_before_activation_enabled;
        break;
      }

      // optional bool main_frame_before_activation_enabled = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_main_frame_before_activation_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &main_frame_before_activation_enabled_)));
          set_has_main_frame_before_activation_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_using_synchronous_renderer_compositor;
        break;
      }

      // optional bool using_synchronous_renderer_compositor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_using_synchronous_renderer_compositor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &using_synchronous_renderer_compositor_)));
          set_has_using_synchronous_renderer_compositor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_accelerated_animation_enabled;
        break;
      }

      // optional bool accelerated_animation_enabled = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accelerated_animation_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accelerated_animation_enabled_)));
          set_has_accelerated_animation_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_can_use_lcd_text;
        break;
      }

      // optional bool can_use_lcd_text = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_use_lcd_text:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_use_lcd_text_)));
          set_has_can_use_lcd_text();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_use_distance_field_text;
        break;
      }

      // optional bool use_distance_field_text = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_distance_field_text:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_distance_field_text_)));
          set_has_use_distance_field_text();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_gpu_rasterization_enabled;
        break;
      }

      // optional bool gpu_rasterization_enabled = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gpu_rasterization_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gpu_rasterization_enabled_)));
          set_has_gpu_rasterization_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_gpu_rasterization_forced;
        break;
      }

      // optional bool gpu_rasterization_forced = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gpu_rasterization_forced:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gpu_rasterization_forced_)));
          set_has_gpu_rasterization_forced();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_gpu_rasterization_msaa_sample_count;
        break;
      }

      // optional int32 gpu_rasterization_msaa_sample_count = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gpu_rasterization_msaa_sample_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gpu_rasterization_msaa_sample_count_)));
          set_has_gpu_rasterization_msaa_sample_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_gpu_rasterization_skewport_target_time_in_seconds;
        break;
      }

      // optional float gpu_rasterization_skewport_target_time_in_seconds = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gpu_rasterization_skewport_target_time_in_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gpu_rasterization_skewport_target_time_in_seconds_)));
          set_has_gpu_rasterization_skewport_target_time_in_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_create_low_res_tiling;
        break;
      }

      // optional bool create_low_res_tiling = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_low_res_tiling:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &create_low_res_tiling_)));
          set_has_create_low_res_tiling();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_scrollbar_animator;
        break;
      }

      // optional .cc.proto.LayerTreeSettings.ScrollbarAnimator scrollbar_animator = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scrollbar_animator:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cc::proto::LayerTreeSettings_ScrollbarAnimator_IsValid(value)) {
            set_scrollbar_animator(static_cast< ::cc::proto::LayerTreeSettings_ScrollbarAnimator >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_scrollbar_fade_delay_ms;
        break;
      }

      // optional int32 scrollbar_fade_delay_ms = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scrollbar_fade_delay_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scrollbar_fade_delay_ms_)));
          set_has_scrollbar_fade_delay_ms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_scrollbar_fade_resize_delay_ms;
        break;
      }

      // optional int32 scrollbar_fade_resize_delay_ms = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scrollbar_fade_resize_delay_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scrollbar_fade_resize_delay_ms_)));
          set_has_scrollbar_fade_resize_delay_ms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_scrollbar_fade_duration_ms;
        break;
      }

      // optional int32 scrollbar_fade_duration_ms = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scrollbar_fade_duration_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scrollbar_fade_duration_ms_)));
          set_has_scrollbar_fade_duration_ms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_solid_color_scrollbar_color;
        break;
      }

      // optional uint32 solid_color_scrollbar_color = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_solid_color_scrollbar_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solid_color_scrollbar_color_)));
          set_has_solid_color_scrollbar_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_timeout_and_draw_when_animation_checkerboards;
        break;
      }

      // optional bool timeout_and_draw_when_animation_checkerboards = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeout_and_draw_when_animation_checkerboards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &timeout_and_draw_when_animation_checkerboards_)));
          set_has_timeout_and_draw_when_animation_checkerboards();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_layer_transforms_should_scale_layer_contents;
        break;
      }

      // optional bool layer_transforms_should_scale_layer_contents = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layer_transforms_should_scale_layer_contents:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &layer_transforms_should_scale_layer_contents_)));
          set_has_layer_transforms_should_scale_layer_contents();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_layers_always_allowed_lcd_text;
        break;
      }

      // optional bool layers_always_allowed_lcd_text = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layers_always_allowed_lcd_text:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &layers_always_allowed_lcd_text_)));
          set_has_layers_always_allowed_lcd_text();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(181)) goto parse_minimum_contents_scale;
        break;
      }

      // optional float minimum_contents_scale = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_minimum_contents_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minimum_contents_scale_)));
          set_has_minimum_contents_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(189)) goto parse_low_res_contents_scale_factor;
        break;
      }

      // optional float low_res_contents_scale_factor = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_low_res_contents_scale_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &low_res_contents_scale_factor_)));
          set_has_low_res_contents_scale_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(197)) goto parse_top_controls_show_threshold;
        break;
      }

      // optional float top_controls_show_threshold = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_top_controls_show_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &top_controls_show_threshold_)));
          set_has_top_controls_show_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(205)) goto parse_top_controls_hide_threshold;
        break;
      }

      // optional float top_controls_hide_threshold = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_top_controls_hide_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &top_controls_hide_threshold_)));
          set_has_top_controls_hide_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(209)) goto parse_background_animation_rate;
        break;
      }

      // optional double background_animation_rate = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_background_animation_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &background_animation_rate_)));
          set_has_background_animation_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_default_tile_size;
        break;
      }

      // optional .cc.proto.Size default_tile_size = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_default_tile_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_default_tile_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_max_untiled_layer_size;
        break;
      }

      // optional .cc.proto.Size max_untiled_layer_size = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_max_untiled_layer_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_untiled_layer_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_minimum_occlusion_tracking_size;
        break;
      }

      // optional .cc.proto.Size minimum_occlusion_tracking_size = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_minimum_occlusion_tracking_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_minimum_occlusion_tracking_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_tiling_interest_area_padding;
        break;
      }

      // optional uint32 tiling_interest_area_padding = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tiling_interest_area_padding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tiling_interest_area_padding_)));
          set_has_tiling_interest_area_padding();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(253)) goto parse_skewport_target_time_in_seconds;
        break;
      }

      // optional float skewport_target_time_in_seconds = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_skewport_target_time_in_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &skewport_target_time_in_seconds_)));
          set_has_skewport_target_time_in_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_skewport_extrapolation_limit_in_content_pixels;
        break;
      }

      // optional int32 skewport_extrapolation_limit_in_content_pixels = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skewport_extrapolation_limit_in_content_pixels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skewport_extrapolation_limit_in_content_pixels_)));
          set_has_skewport_extrapolation_limit_in_content_pixels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_max_memory_for_prepaint_percentage;
        break;
      }

      // optional uint32 max_memory_for_prepaint_percentage = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_memory_for_prepaint_percentage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_memory_for_prepaint_percentage_)));
          set_has_max_memory_for_prepaint_percentage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_strict_layer_property_change_checking;
        break;
      }

      // optional bool strict_layer_property_change_checking = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strict_layer_property_change_checking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &strict_layer_property_change_checking_)));
          set_has_strict_layer_property_change_checking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_use_zero_copy;
        break;
      }

      // optional bool use_zero_copy = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_zero_copy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_zero_copy_)));
          set_has_use_zero_copy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_use_partial_raster;
        break;
      }

      // optional bool use_partial_raster = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_partial_raster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_partial_raster_)));
          set_has_use_partial_raster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_enable_elastic_overscroll;
        break;
      }

      // optional bool enable_elastic_overscroll = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_elastic_overscroll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_elastic_overscroll_)));
          set_has_enable_elastic_overscroll();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_use_image_texture_targets;
        break;
      }

      // repeated uint32 use_image_texture_targets = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_image_texture_targets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 304, input, this->mutable_use_image_texture_targets())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_use_image_texture_targets())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_use_image_texture_targets;
        if (input->ExpectTag(312)) goto parse_ignore_root_layer_flings;
        break;
      }

      // optional bool ignore_root_layer_flings = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ignore_root_layer_flings:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignore_root_layer_flings_)));
          set_has_ignore_root_layer_flings();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_scheduled_raster_task_limit;
        break;
      }

      // optional uint32 scheduled_raster_task_limit = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scheduled_raster_task_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scheduled_raster_task_limit_)));
          set_has_scheduled_raster_task_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_use_occlusion_for_tile_prioritization;
        break;
      }

      // optional bool use_occlusion_for_tile_prioritization = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_occlusion_for_tile_prioritization:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_occlusion_for_tile_prioritization_)));
          set_has_use_occlusion_for_tile_prioritization();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_verify_property_trees;
        break;
      }

      // optional bool verify_property_trees = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_verify_property_trees:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &verify_property_trees_)));
          set_has_verify_property_trees();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_use_property_trees;
        break;
      }

      // optional bool use_property_trees = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_property_trees:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_property_trees_)));
          set_has_use_property_trees();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_image_decode_tasks_enabled;
        break;
      }

      // optional bool image_decode_tasks_enabled = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_image_decode_tasks_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &image_decode_tasks_enabled_)));
          set_has_image_decode_tasks_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_use_compositor_animation_timelines;
        break;
      }

      // optional bool use_compositor_animation_timelines = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_compositor_animation_timelines:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_compositor_animation_timelines_)));
          set_has_use_compositor_animation_timelines();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_wait_for_beginframe_interval;
        break;
      }

      // optional bool wait_for_beginframe_interval = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wait_for_beginframe_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wait_for_beginframe_interval_)));
          set_has_wait_for_beginframe_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_max_staging_buffer_usage_in_bytes;
        break;
      }

      // optional int32 max_staging_buffer_usage_in_bytes = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_staging_buffer_usage_in_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_staging_buffer_usage_in_bytes_)));
          set_has_max_staging_buffer_usage_in_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(386)) goto parse_memory_policy;
        break;
      }

      // optional .cc.proto.ManagedMemoryPolicy memory_policy = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_memory_policy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memory_policy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(394)) goto parse_initial_debug_state;
        break;
      }

      // optional .cc.proto.LayerTreeDebugState initial_debug_state = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_initial_debug_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initial_debug_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LayerTreeSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cc.proto.RendererSettings renderer_settings = 1;
  if (has_renderer_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->renderer_settings(), output);
  }

  // optional bool single_thread_proxy_scheduler = 2;
  if (has_single_thread_proxy_scheduler()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->single_thread_proxy_scheduler(), output);
  }

  // optional bool use_external_begin_frame_source = 3;
  if (has_use_external_begin_frame_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->use_external_begin_frame_source(), output);
  }

  // optional bool main_frame_before_activation_enabled = 4;
  if (has_main_frame_before_activation_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->main_frame_before_activation_enabled(), output);
  }

  // optional bool using_synchronous_renderer_compositor = 5;
  if (has_using_synchronous_renderer_compositor()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->using_synchronous_renderer_compositor(), output);
  }

  // optional bool accelerated_animation_enabled = 6;
  if (has_accelerated_animation_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->accelerated_animation_enabled(), output);
  }

  // optional bool can_use_lcd_text = 7;
  if (has_can_use_lcd_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->can_use_lcd_text(), output);
  }

  // optional bool use_distance_field_text = 8;
  if (has_use_distance_field_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->use_distance_field_text(), output);
  }

  // optional bool gpu_rasterization_enabled = 9;
  if (has_gpu_rasterization_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->gpu_rasterization_enabled(), output);
  }

  // optional bool gpu_rasterization_forced = 10;
  if (has_gpu_rasterization_forced()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->gpu_rasterization_forced(), output);
  }

  // optional int32 gpu_rasterization_msaa_sample_count = 11;
  if (has_gpu_rasterization_msaa_sample_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->gpu_rasterization_msaa_sample_count(), output);
  }

  // optional float gpu_rasterization_skewport_target_time_in_seconds = 12;
  if (has_gpu_rasterization_skewport_target_time_in_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->gpu_rasterization_skewport_target_time_in_seconds(), output);
  }

  // optional bool create_low_res_tiling = 13;
  if (has_create_low_res_tiling()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->create_low_res_tiling(), output);
  }

  // optional .cc.proto.LayerTreeSettings.ScrollbarAnimator scrollbar_animator = 14;
  if (has_scrollbar_animator()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->scrollbar_animator(), output);
  }

  // optional int32 scrollbar_fade_delay_ms = 15;
  if (has_scrollbar_fade_delay_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->scrollbar_fade_delay_ms(), output);
  }

  // optional int32 scrollbar_fade_resize_delay_ms = 16;
  if (has_scrollbar_fade_resize_delay_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->scrollbar_fade_resize_delay_ms(), output);
  }

  // optional int32 scrollbar_fade_duration_ms = 17;
  if (has_scrollbar_fade_duration_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->scrollbar_fade_duration_ms(), output);
  }

  // optional uint32 solid_color_scrollbar_color = 18;
  if (has_solid_color_scrollbar_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->solid_color_scrollbar_color(), output);
  }

  // optional bool timeout_and_draw_when_animation_checkerboards = 19;
  if (has_timeout_and_draw_when_animation_checkerboards()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->timeout_and_draw_when_animation_checkerboards(), output);
  }

  // optional bool layer_transforms_should_scale_layer_contents = 20;
  if (has_layer_transforms_should_scale_layer_contents()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->layer_transforms_should_scale_layer_contents(), output);
  }

  // optional bool layers_always_allowed_lcd_text = 21;
  if (has_layers_always_allowed_lcd_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->layers_always_allowed_lcd_text(), output);
  }

  // optional float minimum_contents_scale = 22;
  if (has_minimum_contents_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->minimum_contents_scale(), output);
  }

  // optional float low_res_contents_scale_factor = 23;
  if (has_low_res_contents_scale_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->low_res_contents_scale_factor(), output);
  }

  // optional float top_controls_show_threshold = 24;
  if (has_top_controls_show_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->top_controls_show_threshold(), output);
  }

  // optional float top_controls_hide_threshold = 25;
  if (has_top_controls_hide_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->top_controls_hide_threshold(), output);
  }

  // optional double background_animation_rate = 26;
  if (has_background_animation_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->background_animation_rate(), output);
  }

  // optional .cc.proto.Size default_tile_size = 27;
  if (has_default_tile_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      27, this->default_tile_size(), output);
  }

  // optional .cc.proto.Size max_untiled_layer_size = 28;
  if (has_max_untiled_layer_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      28, this->max_untiled_layer_size(), output);
  }

  // optional .cc.proto.Size minimum_occlusion_tracking_size = 29;
  if (has_minimum_occlusion_tracking_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      29, this->minimum_occlusion_tracking_size(), output);
  }

  // optional uint32 tiling_interest_area_padding = 30;
  if (has_tiling_interest_area_padding()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->tiling_interest_area_padding(), output);
  }

  // optional float skewport_target_time_in_seconds = 31;
  if (has_skewport_target_time_in_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->skewport_target_time_in_seconds(), output);
  }

  // optional int32 skewport_extrapolation_limit_in_content_pixels = 32;
  if (has_skewport_extrapolation_limit_in_content_pixels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->skewport_extrapolation_limit_in_content_pixels(), output);
  }

  // optional uint32 max_memory_for_prepaint_percentage = 33;
  if (has_max_memory_for_prepaint_percentage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->max_memory_for_prepaint_percentage(), output);
  }

  // optional bool strict_layer_property_change_checking = 34;
  if (has_strict_layer_property_change_checking()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->strict_layer_property_change_checking(), output);
  }

  // optional bool use_zero_copy = 35;
  if (has_use_zero_copy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->use_zero_copy(), output);
  }

  // optional bool use_partial_raster = 36;
  if (has_use_partial_raster()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(36, this->use_partial_raster(), output);
  }

  // optional bool enable_elastic_overscroll = 37;
  if (has_enable_elastic_overscroll()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->enable_elastic_overscroll(), output);
  }

  // repeated uint32 use_image_texture_targets = 38;
  for (int i = 0; i < this->use_image_texture_targets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      38, this->use_image_texture_targets(i), output);
  }

  // optional bool ignore_root_layer_flings = 39;
  if (has_ignore_root_layer_flings()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(39, this->ignore_root_layer_flings(), output);
  }

  // optional uint32 scheduled_raster_task_limit = 40;
  if (has_scheduled_raster_task_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->scheduled_raster_task_limit(), output);
  }

  // optional bool use_occlusion_for_tile_prioritization = 41;
  if (has_use_occlusion_for_tile_prioritization()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->use_occlusion_for_tile_prioritization(), output);
  }

  // optional bool verify_property_trees = 42;
  if (has_verify_property_trees()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(42, this->verify_property_trees(), output);
  }

  // optional bool use_property_trees = 43;
  if (has_use_property_trees()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(43, this->use_property_trees(), output);
  }

  // optional bool image_decode_tasks_enabled = 44;
  if (has_image_decode_tasks_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(44, this->image_decode_tasks_enabled(), output);
  }

  // optional bool use_compositor_animation_timelines = 45;
  if (has_use_compositor_animation_timelines()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(45, this->use_compositor_animation_timelines(), output);
  }

  // optional bool wait_for_beginframe_interval = 46;
  if (has_wait_for_beginframe_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(46, this->wait_for_beginframe_interval(), output);
  }

  // optional int32 max_staging_buffer_usage_in_bytes = 47;
  if (has_max_staging_buffer_usage_in_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(47, this->max_staging_buffer_usage_in_bytes(), output);
  }

  // optional .cc.proto.ManagedMemoryPolicy memory_policy = 48;
  if (has_memory_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      48, this->memory_policy(), output);
  }

  // optional .cc.proto.LayerTreeDebugState initial_debug_state = 49;
  if (has_initial_debug_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      49, this->initial_debug_state(), output);
  }

}

int LayerTreeSettings::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cc.proto.RendererSettings renderer_settings = 1;
    if (has_renderer_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->renderer_settings());
    }

    // optional bool single_thread_proxy_scheduler = 2;
    if (has_single_thread_proxy_scheduler()) {
      total_size += 1 + 1;
    }

    // optional bool use_external_begin_frame_source = 3;
    if (has_use_external_begin_frame_source()) {
      total_size += 1 + 1;
    }

    // optional bool main_frame_before_activation_enabled = 4;
    if (has_main_frame_before_activation_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool using_synchronous_renderer_compositor = 5;
    if (has_using_synchronous_renderer_compositor()) {
      total_size += 1 + 1;
    }

    // optional bool accelerated_animation_enabled = 6;
    if (has_accelerated_animation_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool can_use_lcd_text = 7;
    if (has_can_use_lcd_text()) {
      total_size += 1 + 1;
    }

    // optional bool use_distance_field_text = 8;
    if (has_use_distance_field_text()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool gpu_rasterization_enabled = 9;
    if (has_gpu_rasterization_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool gpu_rasterization_forced = 10;
    if (has_gpu_rasterization_forced()) {
      total_size += 1 + 1;
    }

    // optional int32 gpu_rasterization_msaa_sample_count = 11;
    if (has_gpu_rasterization_msaa_sample_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gpu_rasterization_msaa_sample_count());
    }

    // optional float gpu_rasterization_skewport_target_time_in_seconds = 12;
    if (has_gpu_rasterization_skewport_target_time_in_seconds()) {
      total_size += 1 + 4;
    }

    // optional bool create_low_res_tiling = 13;
    if (has_create_low_res_tiling()) {
      total_size += 1 + 1;
    }

    // optional .cc.proto.LayerTreeSettings.ScrollbarAnimator scrollbar_animator = 14;
    if (has_scrollbar_animator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->scrollbar_animator());
    }

    // optional int32 scrollbar_fade_delay_ms = 15;
    if (has_scrollbar_fade_delay_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scrollbar_fade_delay_ms());
    }

    // optional int32 scrollbar_fade_resize_delay_ms = 16;
    if (has_scrollbar_fade_resize_delay_ms()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scrollbar_fade_resize_delay_ms());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 scrollbar_fade_duration_ms = 17;
    if (has_scrollbar_fade_duration_ms()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scrollbar_fade_duration_ms());
    }

    // optional uint32 solid_color_scrollbar_color = 18;
    if (has_solid_color_scrollbar_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->solid_color_scrollbar_color());
    }

    // optional bool timeout_and_draw_when_animation_checkerboards = 19;
    if (has_timeout_and_draw_when_animation_checkerboards()) {
      total_size += 2 + 1;
    }

    // optional bool layer_transforms_should_scale_layer_contents = 20;
    if (has_layer_transforms_should_scale_layer_contents()) {
      total_size += 2 + 1;
    }

    // optional bool layers_always_allowed_lcd_text = 21;
    if (has_layers_always_allowed_lcd_text()) {
      total_size += 2 + 1;
    }

    // optional float minimum_contents_scale = 22;
    if (has_minimum_contents_scale()) {
      total_size += 2 + 4;
    }

    // optional float low_res_contents_scale_factor = 23;
    if (has_low_res_contents_scale_factor()) {
      total_size += 2 + 4;
    }

    // optional float top_controls_show_threshold = 24;
    if (has_top_controls_show_threshold()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional float top_controls_hide_threshold = 25;
    if (has_top_controls_hide_threshold()) {
      total_size += 2 + 4;
    }

    // optional double background_animation_rate = 26;
    if (has_background_animation_rate()) {
      total_size += 2 + 8;
    }

    // optional .cc.proto.Size default_tile_size = 27;
    if (has_default_tile_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->default_tile_size());
    }

    // optional .cc.proto.Size max_untiled_layer_size = 28;
    if (has_max_untiled_layer_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_untiled_layer_size());
    }

    // optional .cc.proto.Size minimum_occlusion_tracking_size = 29;
    if (has_minimum_occlusion_tracking_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->minimum_occlusion_tracking_size());
    }

    // optional uint32 tiling_interest_area_padding = 30;
    if (has_tiling_interest_area_padding()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tiling_interest_area_padding());
    }

    // optional float skewport_target_time_in_seconds = 31;
    if (has_skewport_target_time_in_seconds()) {
      total_size += 2 + 4;
    }

    // optional int32 skewport_extrapolation_limit_in_content_pixels = 32;
    if (has_skewport_extrapolation_limit_in_content_pixels()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skewport_extrapolation_limit_in_content_pixels());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 max_memory_for_prepaint_percentage = 33;
    if (has_max_memory_for_prepaint_percentage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_memory_for_prepaint_percentage());
    }

    // optional bool strict_layer_property_change_checking = 34;
    if (has_strict_layer_property_change_checking()) {
      total_size += 2 + 1;
    }

    // optional bool use_zero_copy = 35;
    if (has_use_zero_copy()) {
      total_size += 2 + 1;
    }

    // optional bool use_partial_raster = 36;
    if (has_use_partial_raster()) {
      total_size += 2 + 1;
    }

    // optional bool enable_elastic_overscroll = 37;
    if (has_enable_elastic_overscroll()) {
      total_size += 2 + 1;
    }

    // optional bool ignore_root_layer_flings = 39;
    if (has_ignore_root_layer_flings()) {
      total_size += 2 + 1;
    }

    // optional uint32 scheduled_raster_task_limit = 40;
    if (has_scheduled_raster_task_limit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scheduled_raster_task_limit());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional bool use_occlusion_for_tile_prioritization = 41;
    if (has_use_occlusion_for_tile_prioritization()) {
      total_size += 2 + 1;
    }

    // optional bool verify_property_trees = 42;
    if (has_verify_property_trees()) {
      total_size += 2 + 1;
    }

    // optional bool use_property_trees = 43;
    if (has_use_property_trees()) {
      total_size += 2 + 1;
    }

    // optional bool image_decode_tasks_enabled = 44;
    if (has_image_decode_tasks_enabled()) {
      total_size += 2 + 1;
    }

    // optional bool use_compositor_animation_timelines = 45;
    if (has_use_compositor_animation_timelines()) {
      total_size += 2 + 1;
    }

    // optional bool wait_for_beginframe_interval = 46;
    if (has_wait_for_beginframe_interval()) {
      total_size += 2 + 1;
    }

    // optional int32 max_staging_buffer_usage_in_bytes = 47;
    if (has_max_staging_buffer_usage_in_bytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_staging_buffer_usage_in_bytes());
    }

    // optional .cc.proto.ManagedMemoryPolicy memory_policy = 48;
    if (has_memory_policy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memory_policy());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional .cc.proto.LayerTreeDebugState initial_debug_state = 49;
    if (has_initial_debug_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->initial_debug_state());
    }

  }
  // repeated uint32 use_image_texture_targets = 38;
  {
    int data_size = 0;
    for (int i = 0; i < this->use_image_texture_targets_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->use_image_texture_targets(i));
    }
    total_size += 2 * this->use_image_texture_targets_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LayerTreeSettings::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LayerTreeSettings*>(&from));
}

void LayerTreeSettings::MergeFrom(const LayerTreeSettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  use_image_texture_targets_.MergeFrom(from.use_image_texture_targets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_renderer_settings()) {
      mutable_renderer_settings()->::cc::proto::RendererSettings::MergeFrom(from.renderer_settings());
    }
    if (from.has_single_thread_proxy_scheduler()) {
      set_single_thread_proxy_scheduler(from.single_thread_proxy_scheduler());
    }
    if (from.has_use_external_begin_frame_source()) {
      set_use_external_begin_frame_source(from.use_external_begin_frame_source());
    }
    if (from.has_main_frame_before_activation_enabled()) {
      set_main_frame_before_activation_enabled(from.main_frame_before_activation_enabled());
    }
    if (from.has_using_synchronous_renderer_compositor()) {
      set_using_synchronous_renderer_compositor(from.using_synchronous_renderer_compositor());
    }
    if (from.has_accelerated_animation_enabled()) {
      set_accelerated_animation_enabled(from.accelerated_animation_enabled());
    }
    if (from.has_can_use_lcd_text()) {
      set_can_use_lcd_text(from.can_use_lcd_text());
    }
    if (from.has_use_distance_field_text()) {
      set_use_distance_field_text(from.use_distance_field_text());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gpu_rasterization_enabled()) {
      set_gpu_rasterization_enabled(from.gpu_rasterization_enabled());
    }
    if (from.has_gpu_rasterization_forced()) {
      set_gpu_rasterization_forced(from.gpu_rasterization_forced());
    }
    if (from.has_gpu_rasterization_msaa_sample_count()) {
      set_gpu_rasterization_msaa_sample_count(from.gpu_rasterization_msaa_sample_count());
    }
    if (from.has_gpu_rasterization_skewport_target_time_in_seconds()) {
      set_gpu_rasterization_skewport_target_time_in_seconds(from.gpu_rasterization_skewport_target_time_in_seconds());
    }
    if (from.has_create_low_res_tiling()) {
      set_create_low_res_tiling(from.create_low_res_tiling());
    }
    if (from.has_scrollbar_animator()) {
      set_scrollbar_animator(from.scrollbar_animator());
    }
    if (from.has_scrollbar_fade_delay_ms()) {
      set_scrollbar_fade_delay_ms(from.scrollbar_fade_delay_ms());
    }
    if (from.has_scrollbar_fade_resize_delay_ms()) {
      set_scrollbar_fade_resize_delay_ms(from.scrollbar_fade_resize_delay_ms());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_scrollbar_fade_duration_ms()) {
      set_scrollbar_fade_duration_ms(from.scrollbar_fade_duration_ms());
    }
    if (from.has_solid_color_scrollbar_color()) {
      set_solid_color_scrollbar_color(from.solid_color_scrollbar_color());
    }
    if (from.has_timeout_and_draw_when_animation_checkerboards()) {
      set_timeout_and_draw_when_animation_checkerboards(from.timeout_and_draw_when_animation_checkerboards());
    }
    if (from.has_layer_transforms_should_scale_layer_contents()) {
      set_layer_transforms_should_scale_layer_contents(from.layer_transforms_should_scale_layer_contents());
    }
    if (from.has_layers_always_allowed_lcd_text()) {
      set_layers_always_allowed_lcd_text(from.layers_always_allowed_lcd_text());
    }
    if (from.has_minimum_contents_scale()) {
      set_minimum_contents_scale(from.minimum_contents_scale());
    }
    if (from.has_low_res_contents_scale_factor()) {
      set_low_res_contents_scale_factor(from.low_res_contents_scale_factor());
    }
    if (from.has_top_controls_show_threshold()) {
      set_top_controls_show_threshold(from.top_controls_show_threshold());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_top_controls_hide_threshold()) {
      set_top_controls_hide_threshold(from.top_controls_hide_threshold());
    }
    if (from.has_background_animation_rate()) {
      set_background_animation_rate(from.background_animation_rate());
    }
    if (from.has_default_tile_size()) {
      mutable_default_tile_size()->::cc::proto::Size::MergeFrom(from.default_tile_size());
    }
    if (from.has_max_untiled_layer_size()) {
      mutable_max_untiled_layer_size()->::cc::proto::Size::MergeFrom(from.max_untiled_layer_size());
    }
    if (from.has_minimum_occlusion_tracking_size()) {
      mutable_minimum_occlusion_tracking_size()->::cc::proto::Size::MergeFrom(from.minimum_occlusion_tracking_size());
    }
    if (from.has_tiling_interest_area_padding()) {
      set_tiling_interest_area_padding(from.tiling_interest_area_padding());
    }
    if (from.has_skewport_target_time_in_seconds()) {
      set_skewport_target_time_in_seconds(from.skewport_target_time_in_seconds());
    }
    if (from.has_skewport_extrapolation_limit_in_content_pixels()) {
      set_skewport_extrapolation_limit_in_content_pixels(from.skewport_extrapolation_limit_in_content_pixels());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_max_memory_for_prepaint_percentage()) {
      set_max_memory_for_prepaint_percentage(from.max_memory_for_prepaint_percentage());
    }
    if (from.has_strict_layer_property_change_checking()) {
      set_strict_layer_property_change_checking(from.strict_layer_property_change_checking());
    }
    if (from.has_use_zero_copy()) {
      set_use_zero_copy(from.use_zero_copy());
    }
    if (from.has_use_partial_raster()) {
      set_use_partial_raster(from.use_partial_raster());
    }
    if (from.has_enable_elastic_overscroll()) {
      set_enable_elastic_overscroll(from.enable_elastic_overscroll());
    }
    if (from.has_ignore_root_layer_flings()) {
      set_ignore_root_layer_flings(from.ignore_root_layer_flings());
    }
    if (from.has_scheduled_raster_task_limit()) {
      set_scheduled_raster_task_limit(from.scheduled_raster_task_limit());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_use_occlusion_for_tile_prioritization()) {
      set_use_occlusion_for_tile_prioritization(from.use_occlusion_for_tile_prioritization());
    }
    if (from.has_verify_property_trees()) {
      set_verify_property_trees(from.verify_property_trees());
    }
    if (from.has_use_property_trees()) {
      set_use_property_trees(from.use_property_trees());
    }
    if (from.has_image_decode_tasks_enabled()) {
      set_image_decode_tasks_enabled(from.image_decode_tasks_enabled());
    }
    if (from.has_use_compositor_animation_timelines()) {
      set_use_compositor_animation_timelines(from.use_compositor_animation_timelines());
    }
    if (from.has_wait_for_beginframe_interval()) {
      set_wait_for_beginframe_interval(from.wait_for_beginframe_interval());
    }
    if (from.has_max_staging_buffer_usage_in_bytes()) {
      set_max_staging_buffer_usage_in_bytes(from.max_staging_buffer_usage_in_bytes());
    }
    if (from.has_memory_policy()) {
      mutable_memory_policy()->::cc::proto::ManagedMemoryPolicy::MergeFrom(from.memory_policy());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_initial_debug_state()) {
      mutable_initial_debug_state()->::cc::proto::LayerTreeDebugState::MergeFrom(from.initial_debug_state());
    }
  }
}

void LayerTreeSettings::CopyFrom(const LayerTreeSettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerTreeSettings::IsInitialized() const {

  return true;
}

void LayerTreeSettings::Swap(LayerTreeSettings* other) {
  if (other != this) {
    std::swap(renderer_settings_, other->renderer_settings_);
    std::swap(single_thread_proxy_scheduler_, other->single_thread_proxy_scheduler_);
    std::swap(use_external_begin_frame_source_, other->use_external_begin_frame_source_);
    std::swap(main_frame_before_activation_enabled_, other->main_frame_before_activation_enabled_);
    std::swap(using_synchronous_renderer_compositor_, other->using_synchronous_renderer_compositor_);
    std::swap(accelerated_animation_enabled_, other->accelerated_animation_enabled_);
    std::swap(can_use_lcd_text_, other->can_use_lcd_text_);
    std::swap(use_distance_field_text_, other->use_distance_field_text_);
    std::swap(gpu_rasterization_enabled_, other->gpu_rasterization_enabled_);
    std::swap(gpu_rasterization_forced_, other->gpu_rasterization_forced_);
    std::swap(gpu_rasterization_msaa_sample_count_, other->gpu_rasterization_msaa_sample_count_);
    std::swap(gpu_rasterization_skewport_target_time_in_seconds_, other->gpu_rasterization_skewport_target_time_in_seconds_);
    std::swap(create_low_res_tiling_, other->create_low_res_tiling_);
    std::swap(scrollbar_animator_, other->scrollbar_animator_);
    std::swap(scrollbar_fade_delay_ms_, other->scrollbar_fade_delay_ms_);
    std::swap(scrollbar_fade_resize_delay_ms_, other->scrollbar_fade_resize_delay_ms_);
    std::swap(scrollbar_fade_duration_ms_, other->scrollbar_fade_duration_ms_);
    std::swap(solid_color_scrollbar_color_, other->solid_color_scrollbar_color_);
    std::swap(timeout_and_draw_when_animation_checkerboards_, other->timeout_and_draw_when_animation_checkerboards_);
    std::swap(layer_transforms_should_scale_layer_contents_, other->layer_transforms_should_scale_layer_contents_);
    std::swap(layers_always_allowed_lcd_text_, other->layers_always_allowed_lcd_text_);
    std::swap(minimum_contents_scale_, other->minimum_contents_scale_);
    std::swap(low_res_contents_scale_factor_, other->low_res_contents_scale_factor_);
    std::swap(top_controls_show_threshold_, other->top_controls_show_threshold_);
    std::swap(top_controls_hide_threshold_, other->top_controls_hide_threshold_);
    std::swap(background_animation_rate_, other->background_animation_rate_);
    std::swap(default_tile_size_, other->default_tile_size_);
    std::swap(max_untiled_layer_size_, other->max_untiled_layer_size_);
    std::swap(minimum_occlusion_tracking_size_, other->minimum_occlusion_tracking_size_);
    std::swap(tiling_interest_area_padding_, other->tiling_interest_area_padding_);
    std::swap(skewport_target_time_in_seconds_, other->skewport_target_time_in_seconds_);
    std::swap(skewport_extrapolation_limit_in_content_pixels_, other->skewport_extrapolation_limit_in_content_pixels_);
    std::swap(max_memory_for_prepaint_percentage_, other->max_memory_for_prepaint_percentage_);
    std::swap(strict_layer_property_change_checking_, other->strict_layer_property_change_checking_);
    std::swap(use_zero_copy_, other->use_zero_copy_);
    std::swap(use_partial_raster_, other->use_partial_raster_);
    std::swap(enable_elastic_overscroll_, other->enable_elastic_overscroll_);
    use_image_texture_targets_.Swap(&other->use_image_texture_targets_);
    std::swap(ignore_root_layer_flings_, other->ignore_root_layer_flings_);
    std::swap(scheduled_raster_task_limit_, other->scheduled_raster_task_limit_);
    std::swap(use_occlusion_for_tile_prioritization_, other->use_occlusion_for_tile_prioritization_);
    std::swap(verify_property_trees_, other->verify_property_trees_);
    std::swap(use_property_trees_, other->use_property_trees_);
    std::swap(image_decode_tasks_enabled_, other->image_decode_tasks_enabled_);
    std::swap(use_compositor_animation_timelines_, other->use_compositor_animation_timelines_);
    std::swap(wait_for_beginframe_interval_, other->wait_for_beginframe_interval_);
    std::swap(max_staging_buffer_usage_in_bytes_, other->max_staging_buffer_usage_in_bytes_);
    std::swap(memory_policy_, other->memory_policy_);
    std::swap(initial_debug_state_, other->initial_debug_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LayerTreeSettings::GetTypeName() const {
  return "cc.proto.LayerTreeSettings";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cc

// @@protoc_insertion_point(global_scope)
