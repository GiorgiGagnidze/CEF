// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: display_item.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "display_item.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace cc {
namespace proto {

void protobuf_ShutdownFile_display_5fitem_2eproto() {
  delete DisplayItemListSettings::default_instance_;
  delete DisplayItemList::default_instance_;
  delete DisplayItem::default_instance_;
  delete ClipDisplayItem::default_instance_;
  delete ClipPathDisplayItem::default_instance_;
  delete CompositingDisplayItem::default_instance_;
  delete DrawingDisplayItem::default_instance_;
  delete FilterDisplayItem::default_instance_;
  delete FloatClipDisplayItem::default_instance_;
  delete TransformDisplayItem::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_display_5fitem_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_display_5fitem_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::cc::proto::protobuf_AddDesc_skregion_2eproto();
  ::cc::proto::protobuf_AddDesc_skrrect_2eproto();
  ::cc::proto::protobuf_AddDesc_skxfermode_2eproto();
  ::cc::proto::protobuf_AddDesc_rect_2eproto();
  ::cc::proto::protobuf_AddDesc_rectf_2eproto();
  ::cc::proto::protobuf_AddDesc_transform_2eproto();
  DisplayItemListSettings::default_instance_ = new DisplayItemListSettings();
  DisplayItemList::default_instance_ = new DisplayItemList();
  DisplayItem::default_instance_ = new DisplayItem();
  ClipDisplayItem::default_instance_ = new ClipDisplayItem();
  ClipPathDisplayItem::default_instance_ = new ClipPathDisplayItem();
  CompositingDisplayItem::default_instance_ = new CompositingDisplayItem();
  DrawingDisplayItem::default_instance_ = new DrawingDisplayItem();
  FilterDisplayItem::default_instance_ = new FilterDisplayItem();
  FloatClipDisplayItem::default_instance_ = new FloatClipDisplayItem();
  TransformDisplayItem::default_instance_ = new TransformDisplayItem();
  DisplayItemListSettings::default_instance_->InitAsDefaultInstance();
  DisplayItemList::default_instance_->InitAsDefaultInstance();
  DisplayItem::default_instance_->InitAsDefaultInstance();
  ClipDisplayItem::default_instance_->InitAsDefaultInstance();
  ClipPathDisplayItem::default_instance_->InitAsDefaultInstance();
  CompositingDisplayItem::default_instance_->InitAsDefaultInstance();
  DrawingDisplayItem::default_instance_->InitAsDefaultInstance();
  FilterDisplayItem::default_instance_->InitAsDefaultInstance();
  FloatClipDisplayItem::default_instance_->InitAsDefaultInstance();
  TransformDisplayItem::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_display_5fitem_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_display_5fitem_2eproto_once_);
void protobuf_AddDesc_display_5fitem_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_display_5fitem_2eproto_once_,
                 &protobuf_AddDesc_display_5fitem_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_display_5fitem_2eproto {
  StaticDescriptorInitializer_display_5fitem_2eproto() {
    protobuf_AddDesc_display_5fitem_2eproto();
  }
} static_descriptor_initializer_display_5fitem_2eproto_;
#endif

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DisplayItemListSettings::kUseCachedPictureFieldNumber;
#endif  // !_MSC_VER

DisplayItemListSettings::DisplayItemListSettings()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DisplayItemListSettings::InitAsDefaultInstance() {
}

DisplayItemListSettings::DisplayItemListSettings(const DisplayItemListSettings& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DisplayItemListSettings::SharedCtor() {
  _cached_size_ = 0;
  use_cached_picture_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DisplayItemListSettings::~DisplayItemListSettings() {
  SharedDtor();
}

void DisplayItemListSettings::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DisplayItemListSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DisplayItemListSettings& DisplayItemListSettings::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_display_5fitem_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_display_5fitem_2eproto();
#endif
  return *default_instance_;
}

DisplayItemListSettings* DisplayItemListSettings::default_instance_ = NULL;

DisplayItemListSettings* DisplayItemListSettings::New() const {
  return new DisplayItemListSettings;
}

void DisplayItemListSettings::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    use_cached_picture_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DisplayItemListSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool use_cached_picture = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_cached_picture_)));
          set_has_use_cached_picture();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DisplayItemListSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool use_cached_picture = 1;
  if (has_use_cached_picture()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->use_cached_picture(), output);
  }

}

int DisplayItemListSettings::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool use_cached_picture = 1;
    if (has_use_cached_picture()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DisplayItemListSettings::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DisplayItemListSettings*>(&from));
}

void DisplayItemListSettings::MergeFrom(const DisplayItemListSettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_use_cached_picture()) {
      set_use_cached_picture(from.use_cached_picture());
    }
  }
}

void DisplayItemListSettings::CopyFrom(const DisplayItemListSettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisplayItemListSettings::IsInitialized() const {

  return true;
}

void DisplayItemListSettings::Swap(DisplayItemListSettings* other) {
  if (other != this) {
    std::swap(use_cached_picture_, other->use_cached_picture_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DisplayItemListSettings::GetTypeName() const {
  return "cc.proto.DisplayItemListSettings";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DisplayItemList::kItemsFieldNumber;
const int DisplayItemList::kLayerRectFieldNumber;
const int DisplayItemList::kSettingsFieldNumber;
#endif  // !_MSC_VER

DisplayItemList::DisplayItemList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DisplayItemList::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  layer_rect_ = const_cast< ::cc::proto::Rect*>(
      ::cc::proto::Rect::internal_default_instance());
#else
  layer_rect_ = const_cast< ::cc::proto::Rect*>(&::cc::proto::Rect::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  settings_ = const_cast< ::cc::proto::DisplayItemListSettings*>(
      ::cc::proto::DisplayItemListSettings::internal_default_instance());
#else
  settings_ = const_cast< ::cc::proto::DisplayItemListSettings*>(&::cc::proto::DisplayItemListSettings::default_instance());
#endif
}

DisplayItemList::DisplayItemList(const DisplayItemList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DisplayItemList::SharedCtor() {
  _cached_size_ = 0;
  layer_rect_ = NULL;
  settings_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DisplayItemList::~DisplayItemList() {
  SharedDtor();
}

void DisplayItemList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete layer_rect_;
    delete settings_;
  }
}

void DisplayItemList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DisplayItemList& DisplayItemList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_display_5fitem_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_display_5fitem_2eproto();
#endif
  return *default_instance_;
}

DisplayItemList* DisplayItemList::default_instance_ = NULL;

DisplayItemList* DisplayItemList::New() const {
  return new DisplayItemList;
}

void DisplayItemList::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_layer_rect()) {
      if (layer_rect_ != NULL) layer_rect_->::cc::proto::Rect::Clear();
    }
    if (has_settings()) {
      if (settings_ != NULL) settings_->::cc::proto::DisplayItemListSettings::Clear();
    }
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DisplayItemList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cc.proto.DisplayItem items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectTag(18)) goto parse_layer_rect;
        break;
      }

      // optional .cc.proto.Rect layer_rect = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_layer_rect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_layer_rect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_settings;
        break;
      }

      // optional .cc.proto.DisplayItemListSettings settings = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_settings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DisplayItemList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .cc.proto.DisplayItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->items(i), output);
  }

  // optional .cc.proto.Rect layer_rect = 2;
  if (has_layer_rect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->layer_rect(), output);
  }

  // optional .cc.proto.DisplayItemListSettings settings = 3;
  if (has_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->settings(), output);
  }

}

int DisplayItemList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .cc.proto.Rect layer_rect = 2;
    if (has_layer_rect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->layer_rect());
    }

    // optional .cc.proto.DisplayItemListSettings settings = 3;
    if (has_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->settings());
    }

  }
  // repeated .cc.proto.DisplayItem items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DisplayItemList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DisplayItemList*>(&from));
}

void DisplayItemList::MergeFrom(const DisplayItemList& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_layer_rect()) {
      mutable_layer_rect()->::cc::proto::Rect::MergeFrom(from.layer_rect());
    }
    if (from.has_settings()) {
      mutable_settings()->::cc::proto::DisplayItemListSettings::MergeFrom(from.settings());
    }
  }
}

void DisplayItemList::CopyFrom(const DisplayItemList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisplayItemList::IsInitialized() const {

  return true;
}

void DisplayItemList::Swap(DisplayItemList* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(layer_rect_, other->layer_rect_);
    std::swap(settings_, other->settings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DisplayItemList::GetTypeName() const {
  return "cc.proto.DisplayItemList";
}


// ===================================================================

bool DisplayItem_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DisplayItem_Type DisplayItem::Type_Clip;
const DisplayItem_Type DisplayItem::Type_EndClip;
const DisplayItem_Type DisplayItem::Type_ClipPath;
const DisplayItem_Type DisplayItem::Type_EndClipPath;
const DisplayItem_Type DisplayItem::Type_Compositing;
const DisplayItem_Type DisplayItem::Type_EndCompositing;
const DisplayItem_Type DisplayItem::Type_Drawing;
const DisplayItem_Type DisplayItem::Type_Filter;
const DisplayItem_Type DisplayItem::Type_EndFilter;
const DisplayItem_Type DisplayItem::Type_FloatClip;
const DisplayItem_Type DisplayItem::Type_EndFloatClip;
const DisplayItem_Type DisplayItem::Type_Transform;
const DisplayItem_Type DisplayItem::Type_EndTransform;
const DisplayItem_Type DisplayItem::Type_MIN;
const DisplayItem_Type DisplayItem::Type_MAX;
const int DisplayItem::Type_ARRAYSIZE;
#endif  // _MSC_VER
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DisplayItem::kTypeFieldNumber;
const int DisplayItem::kClipItemFieldNumber;
const int DisplayItem::kClipPathItemFieldNumber;
const int DisplayItem::kCompositingItemFieldNumber;
const int DisplayItem::kDrawingItemFieldNumber;
const int DisplayItem::kFilterItemFieldNumber;
const int DisplayItem::kFloatClipItemFieldNumber;
const int DisplayItem::kTransformItemFieldNumber;
#endif  // !_MSC_VER

DisplayItem::DisplayItem()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DisplayItem::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  clip_item_ = const_cast< ::cc::proto::ClipDisplayItem*>(
      ::cc::proto::ClipDisplayItem::internal_default_instance());
#else
  clip_item_ = const_cast< ::cc::proto::ClipDisplayItem*>(&::cc::proto::ClipDisplayItem::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  clip_path_item_ = const_cast< ::cc::proto::ClipPathDisplayItem*>(
      ::cc::proto::ClipPathDisplayItem::internal_default_instance());
#else
  clip_path_item_ = const_cast< ::cc::proto::ClipPathDisplayItem*>(&::cc::proto::ClipPathDisplayItem::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  compositing_item_ = const_cast< ::cc::proto::CompositingDisplayItem*>(
      ::cc::proto::CompositingDisplayItem::internal_default_instance());
#else
  compositing_item_ = const_cast< ::cc::proto::CompositingDisplayItem*>(&::cc::proto::CompositingDisplayItem::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  drawing_item_ = const_cast< ::cc::proto::DrawingDisplayItem*>(
      ::cc::proto::DrawingDisplayItem::internal_default_instance());
#else
  drawing_item_ = const_cast< ::cc::proto::DrawingDisplayItem*>(&::cc::proto::DrawingDisplayItem::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  filter_item_ = const_cast< ::cc::proto::FilterDisplayItem*>(
      ::cc::proto::FilterDisplayItem::internal_default_instance());
#else
  filter_item_ = const_cast< ::cc::proto::FilterDisplayItem*>(&::cc::proto::FilterDisplayItem::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  float_clip_item_ = const_cast< ::cc::proto::FloatClipDisplayItem*>(
      ::cc::proto::FloatClipDisplayItem::internal_default_instance());
#else
  float_clip_item_ = const_cast< ::cc::proto::FloatClipDisplayItem*>(&::cc::proto::FloatClipDisplayItem::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  transform_item_ = const_cast< ::cc::proto::TransformDisplayItem*>(
      ::cc::proto::TransformDisplayItem::internal_default_instance());
#else
  transform_item_ = const_cast< ::cc::proto::TransformDisplayItem*>(&::cc::proto::TransformDisplayItem::default_instance());
#endif
}

DisplayItem::DisplayItem(const DisplayItem& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DisplayItem::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  clip_item_ = NULL;
  clip_path_item_ = NULL;
  compositing_item_ = NULL;
  drawing_item_ = NULL;
  filter_item_ = NULL;
  float_clip_item_ = NULL;
  transform_item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DisplayItem::~DisplayItem() {
  SharedDtor();
}

void DisplayItem::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete clip_item_;
    delete clip_path_item_;
    delete compositing_item_;
    delete drawing_item_;
    delete filter_item_;
    delete float_clip_item_;
    delete transform_item_;
  }
}

void DisplayItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DisplayItem& DisplayItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_display_5fitem_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_display_5fitem_2eproto();
#endif
  return *default_instance_;
}

DisplayItem* DisplayItem::default_instance_ = NULL;

DisplayItem* DisplayItem::New() const {
  return new DisplayItem;
}

void DisplayItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_clip_item()) {
      if (clip_item_ != NULL) clip_item_->::cc::proto::ClipDisplayItem::Clear();
    }
    if (has_clip_path_item()) {
      if (clip_path_item_ != NULL) clip_path_item_->::cc::proto::ClipPathDisplayItem::Clear();
    }
    if (has_compositing_item()) {
      if (compositing_item_ != NULL) compositing_item_->::cc::proto::CompositingDisplayItem::Clear();
    }
    if (has_drawing_item()) {
      if (drawing_item_ != NULL) drawing_item_->::cc::proto::DrawingDisplayItem::Clear();
    }
    if (has_filter_item()) {
      if (filter_item_ != NULL) filter_item_->::cc::proto::FilterDisplayItem::Clear();
    }
    if (has_float_clip_item()) {
      if (float_clip_item_ != NULL) float_clip_item_->::cc::proto::FloatClipDisplayItem::Clear();
    }
    if (has_transform_item()) {
      if (transform_item_ != NULL) transform_item_->::cc::proto::TransformDisplayItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DisplayItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cc.proto.DisplayItem.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cc::proto::DisplayItem_Type_IsValid(value)) {
            set_type(static_cast< ::cc::proto::DisplayItem_Type >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_clip_item;
        break;
      }

      // optional .cc.proto.ClipDisplayItem clip_item = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clip_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clip_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8010)) goto parse_clip_path_item;
        break;
      }

      // optional .cc.proto.ClipPathDisplayItem clip_path_item = 1001;
      case 1001: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clip_path_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clip_path_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8018)) goto parse_compositing_item;
        break;
      }

      // optional .cc.proto.CompositingDisplayItem compositing_item = 1002;
      case 1002: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_compositing_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_compositing_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8026)) goto parse_drawing_item;
        break;
      }

      // optional .cc.proto.DrawingDisplayItem drawing_item = 1003;
      case 1003: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drawing_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drawing_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8034)) goto parse_filter_item;
        break;
      }

      // optional .cc.proto.FilterDisplayItem filter_item = 1004;
      case 1004: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filter_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8042)) goto parse_float_clip_item;
        break;
      }

      // optional .cc.proto.FloatClipDisplayItem float_clip_item = 1005;
      case 1005: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_float_clip_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_float_clip_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8050)) goto parse_transform_item;
        break;
      }

      // optional .cc.proto.TransformDisplayItem transform_item = 1006;
      case 1006: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transform_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DisplayItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cc.proto.DisplayItem.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .cc.proto.ClipDisplayItem clip_item = 1000;
  if (has_clip_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1000, this->clip_item(), output);
  }

  // optional .cc.proto.ClipPathDisplayItem clip_path_item = 1001;
  if (has_clip_path_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1001, this->clip_path_item(), output);
  }

  // optional .cc.proto.CompositingDisplayItem compositing_item = 1002;
  if (has_compositing_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1002, this->compositing_item(), output);
  }

  // optional .cc.proto.DrawingDisplayItem drawing_item = 1003;
  if (has_drawing_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1003, this->drawing_item(), output);
  }

  // optional .cc.proto.FilterDisplayItem filter_item = 1004;
  if (has_filter_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1004, this->filter_item(), output);
  }

  // optional .cc.proto.FloatClipDisplayItem float_clip_item = 1005;
  if (has_float_clip_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1005, this->float_clip_item(), output);
  }

  // optional .cc.proto.TransformDisplayItem transform_item = 1006;
  if (has_transform_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1006, this->transform_item(), output);
  }

}

int DisplayItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cc.proto.DisplayItem.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .cc.proto.ClipDisplayItem clip_item = 1000;
    if (has_clip_item()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clip_item());
    }

    // optional .cc.proto.ClipPathDisplayItem clip_path_item = 1001;
    if (has_clip_path_item()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clip_path_item());
    }

    // optional .cc.proto.CompositingDisplayItem compositing_item = 1002;
    if (has_compositing_item()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->compositing_item());
    }

    // optional .cc.proto.DrawingDisplayItem drawing_item = 1003;
    if (has_drawing_item()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->drawing_item());
    }

    // optional .cc.proto.FilterDisplayItem filter_item = 1004;
    if (has_filter_item()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filter_item());
    }

    // optional .cc.proto.FloatClipDisplayItem float_clip_item = 1005;
    if (has_float_clip_item()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->float_clip_item());
    }

    // optional .cc.proto.TransformDisplayItem transform_item = 1006;
    if (has_transform_item()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transform_item());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DisplayItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DisplayItem*>(&from));
}

void DisplayItem::MergeFrom(const DisplayItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_clip_item()) {
      mutable_clip_item()->::cc::proto::ClipDisplayItem::MergeFrom(from.clip_item());
    }
    if (from.has_clip_path_item()) {
      mutable_clip_path_item()->::cc::proto::ClipPathDisplayItem::MergeFrom(from.clip_path_item());
    }
    if (from.has_compositing_item()) {
      mutable_compositing_item()->::cc::proto::CompositingDisplayItem::MergeFrom(from.compositing_item());
    }
    if (from.has_drawing_item()) {
      mutable_drawing_item()->::cc::proto::DrawingDisplayItem::MergeFrom(from.drawing_item());
    }
    if (from.has_filter_item()) {
      mutable_filter_item()->::cc::proto::FilterDisplayItem::MergeFrom(from.filter_item());
    }
    if (from.has_float_clip_item()) {
      mutable_float_clip_item()->::cc::proto::FloatClipDisplayItem::MergeFrom(from.float_clip_item());
    }
    if (from.has_transform_item()) {
      mutable_transform_item()->::cc::proto::TransformDisplayItem::MergeFrom(from.transform_item());
    }
  }
}

void DisplayItem::CopyFrom(const DisplayItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisplayItem::IsInitialized() const {

  return true;
}

void DisplayItem::Swap(DisplayItem* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(clip_item_, other->clip_item_);
    std::swap(clip_path_item_, other->clip_path_item_);
    std::swap(compositing_item_, other->compositing_item_);
    std::swap(drawing_item_, other->drawing_item_);
    std::swap(filter_item_, other->filter_item_);
    std::swap(float_clip_item_, other->float_clip_item_);
    std::swap(transform_item_, other->transform_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DisplayItem::GetTypeName() const {
  return "cc.proto.DisplayItem";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClipDisplayItem::kClipRectFieldNumber;
const int ClipDisplayItem::kRoundedRectsFieldNumber;
#endif  // !_MSC_VER

ClipDisplayItem::ClipDisplayItem()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ClipDisplayItem::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  clip_rect_ = const_cast< ::cc::proto::Rect*>(
      ::cc::proto::Rect::internal_default_instance());
#else
  clip_rect_ = const_cast< ::cc::proto::Rect*>(&::cc::proto::Rect::default_instance());
#endif
}

ClipDisplayItem::ClipDisplayItem(const ClipDisplayItem& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ClipDisplayItem::SharedCtor() {
  _cached_size_ = 0;
  clip_rect_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClipDisplayItem::~ClipDisplayItem() {
  SharedDtor();
}

void ClipDisplayItem::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete clip_rect_;
  }
}

void ClipDisplayItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClipDisplayItem& ClipDisplayItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_display_5fitem_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_display_5fitem_2eproto();
#endif
  return *default_instance_;
}

ClipDisplayItem* ClipDisplayItem::default_instance_ = NULL;

ClipDisplayItem* ClipDisplayItem::New() const {
  return new ClipDisplayItem;
}

void ClipDisplayItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_clip_rect()) {
      if (clip_rect_ != NULL) clip_rect_->::cc::proto::Rect::Clear();
    }
  }
  rounded_rects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ClipDisplayItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cc.proto.Rect clip_rect = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clip_rect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rounded_rects;
        break;
      }

      // repeated .cc.proto.SkRRect rounded_rects = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rounded_rects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rounded_rects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rounded_rects;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClipDisplayItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cc.proto.Rect clip_rect = 1;
  if (has_clip_rect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->clip_rect(), output);
  }

  // repeated .cc.proto.SkRRect rounded_rects = 2;
  for (int i = 0; i < this->rounded_rects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->rounded_rects(i), output);
  }

}

int ClipDisplayItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cc.proto.Rect clip_rect = 1;
    if (has_clip_rect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clip_rect());
    }

  }
  // repeated .cc.proto.SkRRect rounded_rects = 2;
  total_size += 1 * this->rounded_rects_size();
  for (int i = 0; i < this->rounded_rects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rounded_rects(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClipDisplayItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClipDisplayItem*>(&from));
}

void ClipDisplayItem::MergeFrom(const ClipDisplayItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  rounded_rects_.MergeFrom(from.rounded_rects_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clip_rect()) {
      mutable_clip_rect()->::cc::proto::Rect::MergeFrom(from.clip_rect());
    }
  }
}

void ClipDisplayItem::CopyFrom(const ClipDisplayItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClipDisplayItem::IsInitialized() const {

  return true;
}

void ClipDisplayItem::Swap(ClipDisplayItem* other) {
  if (other != this) {
    std::swap(clip_rect_, other->clip_rect_);
    rounded_rects_.Swap(&other->rounded_rects_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClipDisplayItem::GetTypeName() const {
  return "cc.proto.ClipDisplayItem";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClipPathDisplayItem::kClipOpFieldNumber;
const int ClipPathDisplayItem::kAntialiasFieldNumber;
const int ClipPathDisplayItem::kClipPathFieldNumber;
#endif  // !_MSC_VER

ClipPathDisplayItem::ClipPathDisplayItem()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ClipPathDisplayItem::InitAsDefaultInstance() {
}

ClipPathDisplayItem::ClipPathDisplayItem(const ClipPathDisplayItem& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ClipPathDisplayItem::SharedCtor() {
  _cached_size_ = 0;
  clip_op_ = 0;
  antialias_ = false;
  clip_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClipPathDisplayItem::~ClipPathDisplayItem() {
  SharedDtor();
}

void ClipPathDisplayItem::SharedDtor() {
  if (clip_path_ != &::google::protobuf::internal::GetEmptyString()) {
    delete clip_path_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ClipPathDisplayItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClipPathDisplayItem& ClipPathDisplayItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_display_5fitem_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_display_5fitem_2eproto();
#endif
  return *default_instance_;
}

ClipPathDisplayItem* ClipPathDisplayItem::default_instance_ = NULL;

ClipPathDisplayItem* ClipPathDisplayItem::New() const {
  return new ClipPathDisplayItem;
}

void ClipPathDisplayItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clip_op_ = 0;
    antialias_ = false;
    if (has_clip_path()) {
      if (clip_path_ != &::google::protobuf::internal::GetEmptyString()) {
        clip_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ClipPathDisplayItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cc.proto.SkRegion.Op clip_op = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cc::proto::SkRegion_Op_IsValid(value)) {
            set_clip_op(static_cast< ::cc::proto::SkRegion_Op >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_antialias;
        break;
      }

      // optional bool antialias = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_antialias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &antialias_)));
          set_has_antialias();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_clip_path;
        break;
      }

      // optional bytes clip_path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clip_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_clip_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClipPathDisplayItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cc.proto.SkRegion.Op clip_op = 1;
  if (has_clip_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->clip_op(), output);
  }

  // optional bool antialias = 2;
  if (has_antialias()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->antialias(), output);
  }

  // optional bytes clip_path = 3;
  if (has_clip_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->clip_path(), output);
  }

}

int ClipPathDisplayItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cc.proto.SkRegion.Op clip_op = 1;
    if (has_clip_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->clip_op());
    }

    // optional bool antialias = 2;
    if (has_antialias()) {
      total_size += 1 + 1;
    }

    // optional bytes clip_path = 3;
    if (has_clip_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->clip_path());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClipPathDisplayItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClipPathDisplayItem*>(&from));
}

void ClipPathDisplayItem::MergeFrom(const ClipPathDisplayItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clip_op()) {
      set_clip_op(from.clip_op());
    }
    if (from.has_antialias()) {
      set_antialias(from.antialias());
    }
    if (from.has_clip_path()) {
      set_clip_path(from.clip_path());
    }
  }
}

void ClipPathDisplayItem::CopyFrom(const ClipPathDisplayItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClipPathDisplayItem::IsInitialized() const {

  return true;
}

void ClipPathDisplayItem::Swap(ClipPathDisplayItem* other) {
  if (other != this) {
    std::swap(clip_op_, other->clip_op_);
    std::swap(antialias_, other->antialias_);
    std::swap(clip_path_, other->clip_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClipPathDisplayItem::GetTypeName() const {
  return "cc.proto.ClipPathDisplayItem";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompositingDisplayItem::kAlphaFieldNumber;
const int CompositingDisplayItem::kModeFieldNumber;
const int CompositingDisplayItem::kBoundsFieldNumber;
const int CompositingDisplayItem::kColorFilterFieldNumber;
const int CompositingDisplayItem::kLcdTextRequiresOpaqueLayerFieldNumber;
#endif  // !_MSC_VER

CompositingDisplayItem::CompositingDisplayItem()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CompositingDisplayItem::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  bounds_ = const_cast< ::cc::proto::RectF*>(
      ::cc::proto::RectF::internal_default_instance());
#else
  bounds_ = const_cast< ::cc::proto::RectF*>(&::cc::proto::RectF::default_instance());
#endif
}

CompositingDisplayItem::CompositingDisplayItem(const CompositingDisplayItem& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CompositingDisplayItem::SharedCtor() {
  _cached_size_ = 0;
  alpha_ = 0u;
  mode_ = 0;
  bounds_ = NULL;
  color_filter_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  lcd_text_requires_opaque_layer_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompositingDisplayItem::~CompositingDisplayItem() {
  SharedDtor();
}

void CompositingDisplayItem::SharedDtor() {
  if (color_filter_ != &::google::protobuf::internal::GetEmptyString()) {
    delete color_filter_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete bounds_;
  }
}

void CompositingDisplayItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CompositingDisplayItem& CompositingDisplayItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_display_5fitem_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_display_5fitem_2eproto();
#endif
  return *default_instance_;
}

CompositingDisplayItem* CompositingDisplayItem::default_instance_ = NULL;

CompositingDisplayItem* CompositingDisplayItem::New() const {
  return new CompositingDisplayItem;
}

void CompositingDisplayItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    alpha_ = 0u;
    mode_ = 0;
    if (has_bounds()) {
      if (bounds_ != NULL) bounds_->::cc::proto::RectF::Clear();
    }
    if (has_color_filter()) {
      if (color_filter_ != &::google::protobuf::internal::GetEmptyString()) {
        color_filter_->clear();
      }
    }
    lcd_text_requires_opaque_layer_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CompositingDisplayItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 alpha = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &alpha_)));
          set_has_alpha();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mode;
        break;
      }

      // optional .cc.proto.SkXfermode.Mode mode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cc::proto::SkXfermode_Mode_IsValid(value)) {
            set_mode(static_cast< ::cc::proto::SkXfermode_Mode >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bounds;
        break;
      }

      // optional .cc.proto.RectF bounds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bounds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bounds()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_color_filter;
        break;
      }

      // optional bytes color_filter = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_color_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_color_filter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lcd_text_requires_opaque_layer;
        break;
      }

      // optional bool lcd_text_requires_opaque_layer = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lcd_text_requires_opaque_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lcd_text_requires_opaque_layer_)));
          set_has_lcd_text_requires_opaque_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CompositingDisplayItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 alpha = 1;
  if (has_alpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->alpha(), output);
  }

  // optional .cc.proto.SkXfermode.Mode mode = 2;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mode(), output);
  }

  // optional .cc.proto.RectF bounds = 3;
  if (has_bounds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->bounds(), output);
  }

  // optional bytes color_filter = 4;
  if (has_color_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->color_filter(), output);
  }

  // optional bool lcd_text_requires_opaque_layer = 5;
  if (has_lcd_text_requires_opaque_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->lcd_text_requires_opaque_layer(), output);
  }

}

int CompositingDisplayItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 alpha = 1;
    if (has_alpha()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->alpha());
    }

    // optional .cc.proto.SkXfermode.Mode mode = 2;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // optional .cc.proto.RectF bounds = 3;
    if (has_bounds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bounds());
    }

    // optional bytes color_filter = 4;
    if (has_color_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->color_filter());
    }

    // optional bool lcd_text_requires_opaque_layer = 5;
    if (has_lcd_text_requires_opaque_layer()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompositingDisplayItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CompositingDisplayItem*>(&from));
}

void CompositingDisplayItem::MergeFrom(const CompositingDisplayItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alpha()) {
      set_alpha(from.alpha());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_bounds()) {
      mutable_bounds()->::cc::proto::RectF::MergeFrom(from.bounds());
    }
    if (from.has_color_filter()) {
      set_color_filter(from.color_filter());
    }
    if (from.has_lcd_text_requires_opaque_layer()) {
      set_lcd_text_requires_opaque_layer(from.lcd_text_requires_opaque_layer());
    }
  }
}

void CompositingDisplayItem::CopyFrom(const CompositingDisplayItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompositingDisplayItem::IsInitialized() const {

  return true;
}

void CompositingDisplayItem::Swap(CompositingDisplayItem* other) {
  if (other != this) {
    std::swap(alpha_, other->alpha_);
    std::swap(mode_, other->mode_);
    std::swap(bounds_, other->bounds_);
    std::swap(color_filter_, other->color_filter_);
    std::swap(lcd_text_requires_opaque_layer_, other->lcd_text_requires_opaque_layer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CompositingDisplayItem::GetTypeName() const {
  return "cc.proto.CompositingDisplayItem";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DrawingDisplayItem::kPictureFieldNumber;
#endif  // !_MSC_VER

DrawingDisplayItem::DrawingDisplayItem()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DrawingDisplayItem::InitAsDefaultInstance() {
}

DrawingDisplayItem::DrawingDisplayItem(const DrawingDisplayItem& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DrawingDisplayItem::SharedCtor() {
  _cached_size_ = 0;
  picture_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DrawingDisplayItem::~DrawingDisplayItem() {
  SharedDtor();
}

void DrawingDisplayItem::SharedDtor() {
  if (picture_ != &::google::protobuf::internal::GetEmptyString()) {
    delete picture_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DrawingDisplayItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DrawingDisplayItem& DrawingDisplayItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_display_5fitem_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_display_5fitem_2eproto();
#endif
  return *default_instance_;
}

DrawingDisplayItem* DrawingDisplayItem::default_instance_ = NULL;

DrawingDisplayItem* DrawingDisplayItem::New() const {
  return new DrawingDisplayItem;
}

void DrawingDisplayItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_picture()) {
      if (picture_ != &::google::protobuf::internal::GetEmptyString()) {
        picture_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DrawingDisplayItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes picture = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_picture()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DrawingDisplayItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes picture = 1;
  if (has_picture()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->picture(), output);
  }

}

int DrawingDisplayItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes picture = 1;
    if (has_picture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->picture());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DrawingDisplayItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DrawingDisplayItem*>(&from));
}

void DrawingDisplayItem::MergeFrom(const DrawingDisplayItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_picture()) {
      set_picture(from.picture());
    }
  }
}

void DrawingDisplayItem::CopyFrom(const DrawingDisplayItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawingDisplayItem::IsInitialized() const {

  return true;
}

void DrawingDisplayItem::Swap(DrawingDisplayItem* other) {
  if (other != this) {
    std::swap(picture_, other->picture_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DrawingDisplayItem::GetTypeName() const {
  return "cc.proto.DrawingDisplayItem";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FilterDisplayItem::kBoundsFieldNumber;
#endif  // !_MSC_VER

FilterDisplayItem::FilterDisplayItem()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FilterDisplayItem::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  bounds_ = const_cast< ::cc::proto::RectF*>(
      ::cc::proto::RectF::internal_default_instance());
#else
  bounds_ = const_cast< ::cc::proto::RectF*>(&::cc::proto::RectF::default_instance());
#endif
}

FilterDisplayItem::FilterDisplayItem(const FilterDisplayItem& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FilterDisplayItem::SharedCtor() {
  _cached_size_ = 0;
  bounds_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FilterDisplayItem::~FilterDisplayItem() {
  SharedDtor();
}

void FilterDisplayItem::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete bounds_;
  }
}

void FilterDisplayItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FilterDisplayItem& FilterDisplayItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_display_5fitem_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_display_5fitem_2eproto();
#endif
  return *default_instance_;
}

FilterDisplayItem* FilterDisplayItem::default_instance_ = NULL;

FilterDisplayItem* FilterDisplayItem::New() const {
  return new FilterDisplayItem;
}

void FilterDisplayItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bounds()) {
      if (bounds_ != NULL) bounds_->::cc::proto::RectF::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FilterDisplayItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cc.proto.RectF bounds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bounds()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FilterDisplayItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cc.proto.RectF bounds = 1;
  if (has_bounds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->bounds(), output);
  }

}

int FilterDisplayItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cc.proto.RectF bounds = 1;
    if (has_bounds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bounds());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FilterDisplayItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FilterDisplayItem*>(&from));
}

void FilterDisplayItem::MergeFrom(const FilterDisplayItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bounds()) {
      mutable_bounds()->::cc::proto::RectF::MergeFrom(from.bounds());
    }
  }
}

void FilterDisplayItem::CopyFrom(const FilterDisplayItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterDisplayItem::IsInitialized() const {

  return true;
}

void FilterDisplayItem::Swap(FilterDisplayItem* other) {
  if (other != this) {
    std::swap(bounds_, other->bounds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FilterDisplayItem::GetTypeName() const {
  return "cc.proto.FilterDisplayItem";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FloatClipDisplayItem::kClipRectFieldNumber;
#endif  // !_MSC_VER

FloatClipDisplayItem::FloatClipDisplayItem()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FloatClipDisplayItem::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  clip_rect_ = const_cast< ::cc::proto::RectF*>(
      ::cc::proto::RectF::internal_default_instance());
#else
  clip_rect_ = const_cast< ::cc::proto::RectF*>(&::cc::proto::RectF::default_instance());
#endif
}

FloatClipDisplayItem::FloatClipDisplayItem(const FloatClipDisplayItem& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FloatClipDisplayItem::SharedCtor() {
  _cached_size_ = 0;
  clip_rect_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FloatClipDisplayItem::~FloatClipDisplayItem() {
  SharedDtor();
}

void FloatClipDisplayItem::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete clip_rect_;
  }
}

void FloatClipDisplayItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FloatClipDisplayItem& FloatClipDisplayItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_display_5fitem_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_display_5fitem_2eproto();
#endif
  return *default_instance_;
}

FloatClipDisplayItem* FloatClipDisplayItem::default_instance_ = NULL;

FloatClipDisplayItem* FloatClipDisplayItem::New() const {
  return new FloatClipDisplayItem;
}

void FloatClipDisplayItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_clip_rect()) {
      if (clip_rect_ != NULL) clip_rect_->::cc::proto::RectF::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FloatClipDisplayItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cc.proto.RectF clip_rect = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clip_rect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FloatClipDisplayItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cc.proto.RectF clip_rect = 1;
  if (has_clip_rect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->clip_rect(), output);
  }

}

int FloatClipDisplayItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cc.proto.RectF clip_rect = 1;
    if (has_clip_rect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clip_rect());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FloatClipDisplayItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FloatClipDisplayItem*>(&from));
}

void FloatClipDisplayItem::MergeFrom(const FloatClipDisplayItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clip_rect()) {
      mutable_clip_rect()->::cc::proto::RectF::MergeFrom(from.clip_rect());
    }
  }
}

void FloatClipDisplayItem::CopyFrom(const FloatClipDisplayItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatClipDisplayItem::IsInitialized() const {

  return true;
}

void FloatClipDisplayItem::Swap(FloatClipDisplayItem* other) {
  if (other != this) {
    std::swap(clip_rect_, other->clip_rect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FloatClipDisplayItem::GetTypeName() const {
  return "cc.proto.FloatClipDisplayItem";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransformDisplayItem::kTransformFieldNumber;
#endif  // !_MSC_VER

TransformDisplayItem::TransformDisplayItem()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TransformDisplayItem::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  transform_ = const_cast< ::cc::proto::Transform*>(
      ::cc::proto::Transform::internal_default_instance());
#else
  transform_ = const_cast< ::cc::proto::Transform*>(&::cc::proto::Transform::default_instance());
#endif
}

TransformDisplayItem::TransformDisplayItem(const TransformDisplayItem& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TransformDisplayItem::SharedCtor() {
  _cached_size_ = 0;
  transform_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransformDisplayItem::~TransformDisplayItem() {
  SharedDtor();
}

void TransformDisplayItem::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete transform_;
  }
}

void TransformDisplayItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TransformDisplayItem& TransformDisplayItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_display_5fitem_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_display_5fitem_2eproto();
#endif
  return *default_instance_;
}

TransformDisplayItem* TransformDisplayItem::default_instance_ = NULL;

TransformDisplayItem* TransformDisplayItem::New() const {
  return new TransformDisplayItem;
}

void TransformDisplayItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_transform()) {
      if (transform_ != NULL) transform_->::cc::proto::Transform::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TransformDisplayItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cc.proto.Transform transform = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransformDisplayItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cc.proto.Transform transform = 1;
  if (has_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->transform(), output);
  }

}

int TransformDisplayItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cc.proto.Transform transform = 1;
    if (has_transform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transform());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransformDisplayItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TransformDisplayItem*>(&from));
}

void TransformDisplayItem::MergeFrom(const TransformDisplayItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transform()) {
      mutable_transform()->::cc::proto::Transform::MergeFrom(from.transform());
    }
  }
}

void TransformDisplayItem::CopyFrom(const TransformDisplayItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformDisplayItem::IsInitialized() const {

  return true;
}

void TransformDisplayItem::Swap(TransformDisplayItem* other) {
  if (other != this) {
    std::swap(transform_, other->transform_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TransformDisplayItem::GetTypeName() const {
  return "cc.proto.TransformDisplayItem";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cc

// @@protoc_insertion_point(global_scope)
