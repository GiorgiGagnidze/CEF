// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: layer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "layer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace cc {
namespace proto {

void protobuf_ShutdownFile_layer_2eproto() {
  delete LayerNode::default_instance_;
  delete LayerUpdate::default_instance_;
  delete LayerProperties::default_instance_;
  delete BaseLayerProperties::default_instance_;
  delete PictureLayerProperties::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_layer_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_layer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::cc::proto::protobuf_AddDesc_display_5flist_5frecording_5fsource_2eproto();
  ::cc::proto::protobuf_AddDesc_layer_5fposition_5fconstraint_2eproto();
  ::cc::proto::protobuf_AddDesc_point3f_2eproto();
  ::cc::proto::protobuf_AddDesc_pointf_2eproto();
  ::cc::proto::protobuf_AddDesc_region_2eproto();
  ::cc::proto::protobuf_AddDesc_rect_2eproto();
  ::cc::proto::protobuf_AddDesc_scroll_5foffset_2eproto();
  ::cc::proto::protobuf_AddDesc_size_2eproto();
  ::cc::proto::protobuf_AddDesc_skxfermode_2eproto();
  ::cc::proto::protobuf_AddDesc_transform_2eproto();
  ::cc::proto::protobuf_AddDesc_vector2df_2eproto();
  LayerNode::default_instance_ = new LayerNode();
  LayerUpdate::default_instance_ = new LayerUpdate();
  LayerProperties::default_instance_ = new LayerProperties();
  BaseLayerProperties::default_instance_ = new BaseLayerProperties();
  PictureLayerProperties::default_instance_ = new PictureLayerProperties();
  LayerNode::default_instance_->InitAsDefaultInstance();
  LayerUpdate::default_instance_->InitAsDefaultInstance();
  LayerProperties::default_instance_->InitAsDefaultInstance();
  BaseLayerProperties::default_instance_->InitAsDefaultInstance();
  PictureLayerProperties::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_layer_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_layer_2eproto_once_);
void protobuf_AddDesc_layer_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_layer_2eproto_once_,
                 &protobuf_AddDesc_layer_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_layer_2eproto {
  StaticDescriptorInitializer_layer_2eproto() {
    protobuf_AddDesc_layer_2eproto();
  }
} static_descriptor_initializer_layer_2eproto_;
#endif
bool LayerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LayerNode::kIdFieldNumber;
const int LayerNode::kTypeFieldNumber;
const int LayerNode::kParentIdFieldNumber;
const int LayerNode::kChildrenFieldNumber;
const int LayerNode::kMaskLayerFieldNumber;
const int LayerNode::kReplicaLayerFieldNumber;
#endif  // !_MSC_VER

LayerNode::LayerNode()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LayerNode::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  mask_layer_ = const_cast< ::cc::proto::LayerNode*>(
      ::cc::proto::LayerNode::internal_default_instance());
#else
  mask_layer_ = const_cast< ::cc::proto::LayerNode*>(&::cc::proto::LayerNode::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  replica_layer_ = const_cast< ::cc::proto::LayerNode*>(
      ::cc::proto::LayerNode::internal_default_instance());
#else
  replica_layer_ = const_cast< ::cc::proto::LayerNode*>(&::cc::proto::LayerNode::default_instance());
#endif
}

LayerNode::LayerNode(const LayerNode& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LayerNode::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  parent_id_ = 0;
  mask_layer_ = NULL;
  replica_layer_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LayerNode::~LayerNode() {
  SharedDtor();
}

void LayerNode::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete mask_layer_;
    delete replica_layer_;
  }
}

void LayerNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LayerNode& LayerNode::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_layer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_layer_2eproto();
#endif
  return *default_instance_;
}

LayerNode* LayerNode::default_instance_ = NULL;

LayerNode* LayerNode::New() const {
  return new LayerNode;
}

void LayerNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    parent_id_ = 0;
    if (has_mask_layer()) {
      if (mask_layer_ != NULL) mask_layer_->::cc::proto::LayerNode::Clear();
    }
    if (has_replica_layer()) {
      if (replica_layer_ != NULL) replica_layer_->::cc::proto::LayerNode::Clear();
    }
  }
  children_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LayerNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .cc.proto.LayerType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cc::proto::LayerType_IsValid(value)) {
            set_type(static_cast< ::cc::proto::LayerType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_parent_id;
        break;
      }

      // optional int32 parent_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_id_)));
          set_has_parent_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_children;
        break;
      }

      // repeated .cc.proto.LayerNode children = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_children:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_children()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_children;
        if (input->ExpectTag(42)) goto parse_mask_layer;
        break;
      }

      // optional .cc.proto.LayerNode mask_layer = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mask_layer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mask_layer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_replica_layer;
        break;
      }

      // optional .cc.proto.LayerNode replica_layer = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_replica_layer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_replica_layer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LayerNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .cc.proto.LayerType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional int32 parent_id = 3;
  if (has_parent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->parent_id(), output);
  }

  // repeated .cc.proto.LayerNode children = 4;
  for (int i = 0; i < this->children_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->children(i), output);
  }

  // optional .cc.proto.LayerNode mask_layer = 5;
  if (has_mask_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->mask_layer(), output);
  }

  // optional .cc.proto.LayerNode replica_layer = 6;
  if (has_replica_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->replica_layer(), output);
  }

}

int LayerNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .cc.proto.LayerType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 parent_id = 3;
    if (has_parent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parent_id());
    }

    // optional .cc.proto.LayerNode mask_layer = 5;
    if (has_mask_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mask_layer());
    }

    // optional .cc.proto.LayerNode replica_layer = 6;
    if (has_replica_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->replica_layer());
    }

  }
  // repeated .cc.proto.LayerNode children = 4;
  total_size += 1 * this->children_size();
  for (int i = 0; i < this->children_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->children(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LayerNode::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LayerNode*>(&from));
}

void LayerNode::MergeFrom(const LayerNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  children_.MergeFrom(from.children_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_parent_id()) {
      set_parent_id(from.parent_id());
    }
    if (from.has_mask_layer()) {
      mutable_mask_layer()->::cc::proto::LayerNode::MergeFrom(from.mask_layer());
    }
    if (from.has_replica_layer()) {
      mutable_replica_layer()->::cc::proto::LayerNode::MergeFrom(from.replica_layer());
    }
  }
}

void LayerNode::CopyFrom(const LayerNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerNode::IsInitialized() const {

  return true;
}

void LayerNode::Swap(LayerNode* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(parent_id_, other->parent_id_);
    children_.Swap(&other->children_);
    std::swap(mask_layer_, other->mask_layer_);
    std::swap(replica_layer_, other->replica_layer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LayerNode::GetTypeName() const {
  return "cc.proto.LayerNode";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LayerUpdate::kLayersFieldNumber;
#endif  // !_MSC_VER

LayerUpdate::LayerUpdate()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LayerUpdate::InitAsDefaultInstance() {
}

LayerUpdate::LayerUpdate(const LayerUpdate& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LayerUpdate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LayerUpdate::~LayerUpdate() {
  SharedDtor();
}

void LayerUpdate::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LayerUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LayerUpdate& LayerUpdate::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_layer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_layer_2eproto();
#endif
  return *default_instance_;
}

LayerUpdate* LayerUpdate::default_instance_ = NULL;

LayerUpdate* LayerUpdate::New() const {
  return new LayerUpdate;
}

void LayerUpdate::Clear() {
  layers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LayerUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cc.proto.LayerProperties layers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_layers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_layers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_layers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LayerUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .cc.proto.LayerProperties layers = 1;
  for (int i = 0; i < this->layers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->layers(i), output);
  }

}

int LayerUpdate::ByteSize() const {
  int total_size = 0;

  // repeated .cc.proto.LayerProperties layers = 1;
  total_size += 1 * this->layers_size();
  for (int i = 0; i < this->layers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->layers(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LayerUpdate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LayerUpdate*>(&from));
}

void LayerUpdate::MergeFrom(const LayerUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  layers_.MergeFrom(from.layers_);
}

void LayerUpdate::CopyFrom(const LayerUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerUpdate::IsInitialized() const {

  return true;
}

void LayerUpdate::Swap(LayerUpdate* other) {
  if (other != this) {
    layers_.Swap(&other->layers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LayerUpdate::GetTypeName() const {
  return "cc.proto.LayerUpdate";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LayerProperties::kIdFieldNumber;
const int LayerProperties::kNeedsPushPropertiesFieldNumber;
const int LayerProperties::kNumDependentsNeedPushPropertiesFieldNumber;
const int LayerProperties::kBaseFieldNumber;
const int LayerProperties::kPictureFieldNumber;
#endif  // !_MSC_VER

LayerProperties::LayerProperties()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LayerProperties::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  base_ = const_cast< ::cc::proto::BaseLayerProperties*>(
      ::cc::proto::BaseLayerProperties::internal_default_instance());
#else
  base_ = const_cast< ::cc::proto::BaseLayerProperties*>(&::cc::proto::BaseLayerProperties::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  picture_ = const_cast< ::cc::proto::PictureLayerProperties*>(
      ::cc::proto::PictureLayerProperties::internal_default_instance());
#else
  picture_ = const_cast< ::cc::proto::PictureLayerProperties*>(&::cc::proto::PictureLayerProperties::default_instance());
#endif
}

LayerProperties::LayerProperties(const LayerProperties& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LayerProperties::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  needs_push_properties_ = false;
  num_dependents_need_push_properties_ = 0;
  base_ = NULL;
  picture_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LayerProperties::~LayerProperties() {
  SharedDtor();
}

void LayerProperties::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete base_;
    delete picture_;
  }
}

void LayerProperties::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LayerProperties& LayerProperties::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_layer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_layer_2eproto();
#endif
  return *default_instance_;
}

LayerProperties* LayerProperties::default_instance_ = NULL;

LayerProperties* LayerProperties::New() const {
  return new LayerProperties;
}

void LayerProperties::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    needs_push_properties_ = false;
    num_dependents_need_push_properties_ = 0;
    if (has_base()) {
      if (base_ != NULL) base_->::cc::proto::BaseLayerProperties::Clear();
    }
    if (has_picture()) {
      if (picture_ != NULL) picture_->::cc::proto::PictureLayerProperties::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LayerProperties::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_needs_push_properties;
        break;
      }

      // optional bool needs_push_properties = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needs_push_properties:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needs_push_properties_)));
          set_has_needs_push_properties();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num_dependents_need_push_properties;
        break;
      }

      // optional int32 num_dependents_need_push_properties = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_dependents_need_push_properties:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_dependents_need_push_properties_)));
          set_has_num_dependents_need_push_properties();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_base;
        break;
      }

      // optional .cc.proto.BaseLayerProperties base = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_picture;
        break;
      }

      // optional .cc.proto.PictureLayerProperties picture = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_picture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_picture()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LayerProperties::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional bool needs_push_properties = 3;
  if (has_needs_push_properties()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->needs_push_properties(), output);
  }

  // optional int32 num_dependents_need_push_properties = 4;
  if (has_num_dependents_need_push_properties()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_dependents_need_push_properties(), output);
  }

  // optional .cc.proto.BaseLayerProperties base = 5;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->base(), output);
  }

  // optional .cc.proto.PictureLayerProperties picture = 6;
  if (has_picture()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->picture(), output);
  }

}

int LayerProperties::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional bool needs_push_properties = 3;
    if (has_needs_push_properties()) {
      total_size += 1 + 1;
    }

    // optional int32 num_dependents_need_push_properties = 4;
    if (has_num_dependents_need_push_properties()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_dependents_need_push_properties());
    }

    // optional .cc.proto.BaseLayerProperties base = 5;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional .cc.proto.PictureLayerProperties picture = 6;
    if (has_picture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->picture());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LayerProperties::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LayerProperties*>(&from));
}

void LayerProperties::MergeFrom(const LayerProperties& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_needs_push_properties()) {
      set_needs_push_properties(from.needs_push_properties());
    }
    if (from.has_num_dependents_need_push_properties()) {
      set_num_dependents_need_push_properties(from.num_dependents_need_push_properties());
    }
    if (from.has_base()) {
      mutable_base()->::cc::proto::BaseLayerProperties::MergeFrom(from.base());
    }
    if (from.has_picture()) {
      mutable_picture()->::cc::proto::PictureLayerProperties::MergeFrom(from.picture());
    }
  }
}

void LayerProperties::CopyFrom(const LayerProperties& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerProperties::IsInitialized() const {

  return true;
}

void LayerProperties::Swap(LayerProperties* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(needs_push_properties_, other->needs_push_properties_);
    std::swap(num_dependents_need_push_properties_, other->num_dependents_need_push_properties_);
    std::swap(base_, other->base_);
    std::swap(picture_, other->picture_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LayerProperties::GetTypeName() const {
  return "cc.proto.LayerProperties";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BaseLayerProperties::kTransformOriginFieldNumber;
const int BaseLayerProperties::kBackgroundColorFieldNumber;
const int BaseLayerProperties::kBoundsFieldNumber;
const int BaseLayerProperties::kTransformFreeIndexFieldNumber;
const int BaseLayerProperties::kEffectTreeIndexFieldNumber;
const int BaseLayerProperties::kClipTreeIndexFieldNumber;
const int BaseLayerProperties::kScrollTreeIndexFieldNumber;
const int BaseLayerProperties::kOffsetToTransformParentFieldNumber;
const int BaseLayerProperties::kDoubleSidedFieldNumber;
const int BaseLayerProperties::kDrawsContentFieldNumber;
const int BaseLayerProperties::kHideLayerAndSubtreeFieldNumber;
const int BaseLayerProperties::kHasRenderSurfaceFieldNumber;
const int BaseLayerProperties::kMasksToBoundsFieldNumber;
const int BaseLayerProperties::kMainThreadScrollingReasonsFieldNumber;
const int BaseLayerProperties::kHaveScrollEventHandlersFieldNumber;
const int BaseLayerProperties::kNonFastScrollableRegionFieldNumber;
const int BaseLayerProperties::kTouchEventHandlerRegionFieldNumber;
const int BaseLayerProperties::kContentsOpaqueFieldNumber;
const int BaseLayerProperties::kOpacityFieldNumber;
const int BaseLayerProperties::kBlendModeFieldNumber;
const int BaseLayerProperties::kIsRootForIsolatedGroupFieldNumber;
const int BaseLayerProperties::kPositionFieldNumber;
const int BaseLayerProperties::kIsContainerForFixedPositionLayersFieldNumber;
const int BaseLayerProperties::kPositionConstraintFieldNumber;
const int BaseLayerProperties::kShouldFlattenTransformFieldNumber;
const int BaseLayerProperties::kShouldFlattenTransformFromPropertyTreeFieldNumber;
const int BaseLayerProperties::kNumLayerOrDescendantsWithCopyRequestFieldNumber;
const int BaseLayerProperties::kDrawBlendModeFieldNumber;
const int BaseLayerProperties::kUseParentBackfaceVisibilityFieldNumber;
const int BaseLayerProperties::kTransformFieldNumber;
const int BaseLayerProperties::kTransformIsInvertibleFieldNumber;
const int BaseLayerProperties::kSortingContextIdFieldNumber;
const int BaseLayerProperties::kNumDescendantsThatDrawContentFieldNumber;
const int BaseLayerProperties::kScrollClipLayerIdFieldNumber;
const int BaseLayerProperties::kUserScrollableHorizontalFieldNumber;
const int BaseLayerProperties::kUserScrollableVerticalFieldNumber;
const int BaseLayerProperties::kScrollParentIdFieldNumber;
const int BaseLayerProperties::kScrollChildrenIdsFieldNumber;
const int BaseLayerProperties::kClipParentIdFieldNumber;
const int BaseLayerProperties::kClipChildrenIdsFieldNumber;
const int BaseLayerProperties::kScrollOffsetFieldNumber;
const int BaseLayerProperties::kScrollCompensationAdjustmentFieldNumber;
const int BaseLayerProperties::kUpdateRectFieldNumber;
const int BaseLayerProperties::kStackingOrderChangedFieldNumber;
#endif  // !_MSC_VER

BaseLayerProperties::BaseLayerProperties()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BaseLayerProperties::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  transform_origin_ = const_cast< ::cc::proto::Point3F*>(
      ::cc::proto::Point3F::internal_default_instance());
#else
  transform_origin_ = const_cast< ::cc::proto::Point3F*>(&::cc::proto::Point3F::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  bounds_ = const_cast< ::cc::proto::Size*>(
      ::cc::proto::Size::internal_default_instance());
#else
  bounds_ = const_cast< ::cc::proto::Size*>(&::cc::proto::Size::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  offset_to_transform_parent_ = const_cast< ::cc::proto::Vector2dF*>(
      ::cc::proto::Vector2dF::internal_default_instance());
#else
  offset_to_transform_parent_ = const_cast< ::cc::proto::Vector2dF*>(&::cc::proto::Vector2dF::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  non_fast_scrollable_region_ = const_cast< ::cc::proto::Region*>(
      ::cc::proto::Region::internal_default_instance());
#else
  non_fast_scrollable_region_ = const_cast< ::cc::proto::Region*>(&::cc::proto::Region::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  touch_event_handler_region_ = const_cast< ::cc::proto::Region*>(
      ::cc::proto::Region::internal_default_instance());
#else
  touch_event_handler_region_ = const_cast< ::cc::proto::Region*>(&::cc::proto::Region::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  position_ = const_cast< ::cc::proto::PointF*>(
      ::cc::proto::PointF::internal_default_instance());
#else
  position_ = const_cast< ::cc::proto::PointF*>(&::cc::proto::PointF::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  position_constraint_ = const_cast< ::cc::proto::LayerPositionConstraint*>(
      ::cc::proto::LayerPositionConstraint::internal_default_instance());
#else
  position_constraint_ = const_cast< ::cc::proto::LayerPositionConstraint*>(&::cc::proto::LayerPositionConstraint::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  transform_ = const_cast< ::cc::proto::Transform*>(
      ::cc::proto::Transform::internal_default_instance());
#else
  transform_ = const_cast< ::cc::proto::Transform*>(&::cc::proto::Transform::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  scroll_offset_ = const_cast< ::cc::proto::ScrollOffset*>(
      ::cc::proto::ScrollOffset::internal_default_instance());
#else
  scroll_offset_ = const_cast< ::cc::proto::ScrollOffset*>(&::cc::proto::ScrollOffset::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  scroll_compensation_adjustment_ = const_cast< ::cc::proto::Vector2dF*>(
      ::cc::proto::Vector2dF::internal_default_instance());
#else
  scroll_compensation_adjustment_ = const_cast< ::cc::proto::Vector2dF*>(&::cc::proto::Vector2dF::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  update_rect_ = const_cast< ::cc::proto::Rect*>(
      ::cc::proto::Rect::internal_default_instance());
#else
  update_rect_ = const_cast< ::cc::proto::Rect*>(&::cc::proto::Rect::default_instance());
#endif
}

BaseLayerProperties::BaseLayerProperties(const BaseLayerProperties& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BaseLayerProperties::SharedCtor() {
  _cached_size_ = 0;
  transform_origin_ = NULL;
  background_color_ = 0u;
  bounds_ = NULL;
  transform_free_index_ = GOOGLE_LONGLONG(0);
  effect_tree_index_ = GOOGLE_LONGLONG(0);
  clip_tree_index_ = GOOGLE_LONGLONG(0);
  scroll_tree_index_ = GOOGLE_LONGLONG(0);
  offset_to_transform_parent_ = NULL;
  double_sided_ = false;
  draws_content_ = false;
  hide_layer_and_subtree_ = false;
  has_render_surface_ = false;
  masks_to_bounds_ = false;
  main_thread_scrolling_reasons_ = 0u;
  have_scroll_event_handlers_ = false;
  non_fast_scrollable_region_ = NULL;
  touch_event_handler_region_ = NULL;
  contents_opaque_ = false;
  opacity_ = 0;
  blend_mode_ = 0;
  is_root_for_isolated_group_ = false;
  position_ = NULL;
  is_container_for_fixed_position_layers_ = false;
  position_constraint_ = NULL;
  should_flatten_transform_ = false;
  should_flatten_transform_from_property_tree_ = false;
  num_layer_or_descendants_with_copy_request_ = 0;
  draw_blend_mode_ = 0;
  use_parent_backface_visibility_ = false;
  transform_ = NULL;
  transform_is_invertible_ = false;
  sorting_context_id_ = 0;
  num_descendants_that_draw_content_ = 0;
  scroll_clip_layer_id_ = 0;
  user_scrollable_horizontal_ = false;
  user_scrollable_vertical_ = false;
  scroll_parent_id_ = 0;
  clip_parent_id_ = 0;
  scroll_offset_ = NULL;
  scroll_compensation_adjustment_ = NULL;
  update_rect_ = NULL;
  stacking_order_changed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaseLayerProperties::~BaseLayerProperties() {
  SharedDtor();
}

void BaseLayerProperties::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete transform_origin_;
    delete bounds_;
    delete offset_to_transform_parent_;
    delete non_fast_scrollable_region_;
    delete touch_event_handler_region_;
    delete position_;
    delete position_constraint_;
    delete transform_;
    delete scroll_offset_;
    delete scroll_compensation_adjustment_;
    delete update_rect_;
  }
}

void BaseLayerProperties::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BaseLayerProperties& BaseLayerProperties::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_layer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_layer_2eproto();
#endif
  return *default_instance_;
}

BaseLayerProperties* BaseLayerProperties::default_instance_ = NULL;

BaseLayerProperties* BaseLayerProperties::New() const {
  return new BaseLayerProperties;
}

void BaseLayerProperties::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_transform_origin()) {
      if (transform_origin_ != NULL) transform_origin_->::cc::proto::Point3F::Clear();
    }
    background_color_ = 0u;
    if (has_bounds()) {
      if (bounds_ != NULL) bounds_->::cc::proto::Size::Clear();
    }
    transform_free_index_ = GOOGLE_LONGLONG(0);
    effect_tree_index_ = GOOGLE_LONGLONG(0);
    clip_tree_index_ = GOOGLE_LONGLONG(0);
    scroll_tree_index_ = GOOGLE_LONGLONG(0);
    if (has_offset_to_transform_parent()) {
      if (offset_to_transform_parent_ != NULL) offset_to_transform_parent_->::cc::proto::Vector2dF::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    double_sided_ = false;
    draws_content_ = false;
    hide_layer_and_subtree_ = false;
    has_render_surface_ = false;
    masks_to_bounds_ = false;
    main_thread_scrolling_reasons_ = 0u;
    have_scroll_event_handlers_ = false;
    if (has_non_fast_scrollable_region()) {
      if (non_fast_scrollable_region_ != NULL) non_fast_scrollable_region_->::cc::proto::Region::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_touch_event_handler_region()) {
      if (touch_event_handler_region_ != NULL) touch_event_handler_region_->::cc::proto::Region::Clear();
    }
    contents_opaque_ = false;
    opacity_ = 0;
    blend_mode_ = 0;
    is_root_for_isolated_group_ = false;
    if (has_position()) {
      if (position_ != NULL) position_->::cc::proto::PointF::Clear();
    }
    is_container_for_fixed_position_layers_ = false;
    if (has_position_constraint()) {
      if (position_constraint_ != NULL) position_constraint_->::cc::proto::LayerPositionConstraint::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    should_flatten_transform_ = false;
    should_flatten_transform_from_property_tree_ = false;
    num_layer_or_descendants_with_copy_request_ = 0;
    draw_blend_mode_ = 0;
    use_parent_backface_visibility_ = false;
    if (has_transform()) {
      if (transform_ != NULL) transform_->::cc::proto::Transform::Clear();
    }
    transform_is_invertible_ = false;
    sorting_context_id_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    num_descendants_that_draw_content_ = 0;
    scroll_clip_layer_id_ = 0;
    user_scrollable_horizontal_ = false;
    user_scrollable_vertical_ = false;
    scroll_parent_id_ = 0;
    clip_parent_id_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (has_scroll_offset()) {
      if (scroll_offset_ != NULL) scroll_offset_->::cc::proto::ScrollOffset::Clear();
    }
    if (has_scroll_compensation_adjustment()) {
      if (scroll_compensation_adjustment_ != NULL) scroll_compensation_adjustment_->::cc::proto::Vector2dF::Clear();
    }
    if (has_update_rect()) {
      if (update_rect_ != NULL) update_rect_->::cc::proto::Rect::Clear();
    }
    stacking_order_changed_ = false;
  }
  scroll_children_ids_.Clear();
  clip_children_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BaseLayerProperties::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cc.proto.Point3F transform_origin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform_origin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_background_color;
        break;
      }

      // optional uint32 background_color = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_background_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &background_color_)));
          set_has_background_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bounds;
        break;
      }

      // optional .cc.proto.Size bounds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bounds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bounds()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_transform_free_index;
        break;
      }

      // optional int64 transform_free_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transform_free_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transform_free_index_)));
          set_has_transform_free_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_effect_tree_index;
        break;
      }

      // optional int64 effect_tree_index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect_tree_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &effect_tree_index_)));
          set_has_effect_tree_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_clip_tree_index;
        break;
      }

      // optional int64 clip_tree_index = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clip_tree_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &clip_tree_index_)));
          set_has_clip_tree_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_offset_to_transform_parent;
        break;
      }

      // optional .cc.proto.Vector2dF offset_to_transform_parent = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_offset_to_transform_parent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_offset_to_transform_parent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_double_sided;
        break;
      }

      // optional bool double_sided = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_double_sided:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &double_sided_)));
          set_has_double_sided();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_draws_content;
        break;
      }

      // optional bool draws_content = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_draws_content:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &draws_content_)));
          set_has_draws_content();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_hide_layer_and_subtree;
        break;
      }

      // optional bool hide_layer_and_subtree = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hide_layer_and_subtree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hide_layer_and_subtree_)));
          set_has_hide_layer_and_subtree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_has_render_surface;
        break;
      }

      // optional bool has_render_surface = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_render_surface:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_render_surface_)));
          set_has_has_render_surface();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_masks_to_bounds;
        break;
      }

      // optional bool masks_to_bounds = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_masks_to_bounds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &masks_to_bounds_)));
          set_has_masks_to_bounds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_main_thread_scrolling_reasons;
        break;
      }

      // optional uint32 main_thread_scrolling_reasons = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_main_thread_scrolling_reasons:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &main_thread_scrolling_reasons_)));
          set_has_main_thread_scrolling_reasons();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_have_scroll_event_handlers;
        break;
      }

      // optional bool have_scroll_event_handlers = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_have_scroll_event_handlers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_scroll_event_handlers_)));
          set_has_have_scroll_event_handlers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_non_fast_scrollable_region;
        break;
      }

      // optional .cc.proto.Region non_fast_scrollable_region = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_non_fast_scrollable_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_non_fast_scrollable_region()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_touch_event_handler_region;
        break;
      }

      // optional .cc.proto.Region touch_event_handler_region = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_touch_event_handler_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_touch_event_handler_region()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_contents_opaque;
        break;
      }

      // optional bool contents_opaque = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contents_opaque:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &contents_opaque_)));
          set_has_contents_opaque();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(181)) goto parse_opacity;
        break;
      }

      // optional float opacity = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_opacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &opacity_)));
          set_has_opacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_blend_mode;
        break;
      }

      // optional .cc.proto.SkXfermode.Mode blend_mode = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blend_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cc::proto::SkXfermode_Mode_IsValid(value)) {
            set_blend_mode(static_cast< ::cc::proto::SkXfermode_Mode >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_is_root_for_isolated_group;
        break;
      }

      // optional bool is_root_for_isolated_group = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_root_for_isolated_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_root_for_isolated_group_)));
          set_has_is_root_for_isolated_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_position;
        break;
      }

      // optional .cc.proto.PointF position = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_is_container_for_fixed_position_layers;
        break;
      }

      // optional bool is_container_for_fixed_position_layers = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_container_for_fixed_position_layers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_container_for_fixed_position_layers_)));
          set_has_is_container_for_fixed_position_layers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_position_constraint;
        break;
      }

      // optional .cc.proto.LayerPositionConstraint position_constraint = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position_constraint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position_constraint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_should_flatten_transform;
        break;
      }

      // optional bool should_flatten_transform = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_should_flatten_transform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &should_flatten_transform_)));
          set_has_should_flatten_transform();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_should_flatten_transform_from_property_tree;
        break;
      }

      // optional bool should_flatten_transform_from_property_tree = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_should_flatten_transform_from_property_tree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &should_flatten_transform_from_property_tree_)));
          set_has_should_flatten_transform_from_property_tree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_num_layer_or_descendants_with_copy_request;
        break;
      }

      // optional int32 num_layer_or_descendants_with_copy_request = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_layer_or_descendants_with_copy_request:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_layer_or_descendants_with_copy_request_)));
          set_has_num_layer_or_descendants_with_copy_request();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_draw_blend_mode;
        break;
      }

      // optional .cc.proto.SkXfermode.Mode draw_blend_mode = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_draw_blend_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cc::proto::SkXfermode_Mode_IsValid(value)) {
            set_draw_blend_mode(static_cast< ::cc::proto::SkXfermode_Mode >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_use_parent_backface_visibility;
        break;
      }

      // optional bool use_parent_backface_visibility = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_parent_backface_visibility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_parent_backface_visibility_)));
          set_has_use_parent_backface_visibility();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_transform;
        break;
      }

      // optional .cc.proto.Transform transform = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_transform_is_invertible;
        break;
      }

      // optional bool transform_is_invertible = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transform_is_invertible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &transform_is_invertible_)));
          set_has_transform_is_invertible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_sorting_context_id;
        break;
      }

      // optional int32 sorting_context_id = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sorting_context_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sorting_context_id_)));
          set_has_sorting_context_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_num_descendants_that_draw_content;
        break;
      }

      // optional int32 num_descendants_that_draw_content = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_descendants_that_draw_content:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_descendants_that_draw_content_)));
          set_has_num_descendants_that_draw_content();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_scroll_clip_layer_id;
        break;
      }

      // optional int32 scroll_clip_layer_id = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scroll_clip_layer_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scroll_clip_layer_id_)));
          set_has_scroll_clip_layer_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_user_scrollable_horizontal;
        break;
      }

      // optional bool user_scrollable_horizontal = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_scrollable_horizontal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &user_scrollable_horizontal_)));
          set_has_user_scrollable_horizontal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_user_scrollable_vertical;
        break;
      }

      // optional bool user_scrollable_vertical = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_scrollable_vertical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &user_scrollable_vertical_)));
          set_has_user_scrollable_vertical();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_scroll_parent_id;
        break;
      }

      // optional int32 scroll_parent_id = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scroll_parent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scroll_parent_id_)));
          set_has_scroll_parent_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_scroll_children_ids;
        break;
      }

      // repeated int32 scroll_children_ids = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scroll_children_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 328, input, this->mutable_scroll_children_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_scroll_children_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_scroll_children_ids;
        if (input->ExpectTag(336)) goto parse_clip_parent_id;
        break;
      }

      // optional int32 clip_parent_id = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clip_parent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clip_parent_id_)));
          set_has_clip_parent_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_clip_children_ids;
        break;
      }

      // repeated int32 clip_children_ids = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clip_children_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 344, input, this->mutable_clip_children_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_clip_children_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_clip_children_ids;
        if (input->ExpectTag(354)) goto parse_scroll_offset;
        break;
      }

      // optional .cc.proto.ScrollOffset scroll_offset = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scroll_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scroll_offset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(362)) goto parse_scroll_compensation_adjustment;
        break;
      }

      // optional .cc.proto.Vector2dF scroll_compensation_adjustment = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scroll_compensation_adjustment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scroll_compensation_adjustment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(370)) goto parse_update_rect;
        break;
      }

      // optional .cc.proto.Rect update_rect = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update_rect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_rect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_stacking_order_changed;
        break;
      }

      // optional bool stacking_order_changed = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stacking_order_changed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stacking_order_changed_)));
          set_has_stacking_order_changed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_scroll_tree_index;
        break;
      }

      // optional int64 scroll_tree_index = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scroll_tree_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &scroll_tree_index_)));
          set_has_scroll_tree_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BaseLayerProperties::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cc.proto.Point3F transform_origin = 1;
  if (has_transform_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->transform_origin(), output);
  }

  // optional uint32 background_color = 2;
  if (has_background_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->background_color(), output);
  }

  // optional .cc.proto.Size bounds = 3;
  if (has_bounds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->bounds(), output);
  }

  // optional int64 transform_free_index = 4;
  if (has_transform_free_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->transform_free_index(), output);
  }

  // optional int64 effect_tree_index = 5;
  if (has_effect_tree_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->effect_tree_index(), output);
  }

  // optional int64 clip_tree_index = 6;
  if (has_clip_tree_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->clip_tree_index(), output);
  }

  // optional .cc.proto.Vector2dF offset_to_transform_parent = 7;
  if (has_offset_to_transform_parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->offset_to_transform_parent(), output);
  }

  // optional bool double_sided = 8;
  if (has_double_sided()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->double_sided(), output);
  }

  // optional bool draws_content = 9;
  if (has_draws_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->draws_content(), output);
  }

  // optional bool hide_layer_and_subtree = 10;
  if (has_hide_layer_and_subtree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->hide_layer_and_subtree(), output);
  }

  // optional bool has_render_surface = 11;
  if (has_has_render_surface()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->has_render_surface(), output);
  }

  // optional bool masks_to_bounds = 14;
  if (has_masks_to_bounds()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->masks_to_bounds(), output);
  }

  // optional uint32 main_thread_scrolling_reasons = 15;
  if (has_main_thread_scrolling_reasons()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->main_thread_scrolling_reasons(), output);
  }

  // optional bool have_scroll_event_handlers = 17;
  if (has_have_scroll_event_handlers()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->have_scroll_event_handlers(), output);
  }

  // optional .cc.proto.Region non_fast_scrollable_region = 18;
  if (has_non_fast_scrollable_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, this->non_fast_scrollable_region(), output);
  }

  // optional .cc.proto.Region touch_event_handler_region = 19;
  if (has_touch_event_handler_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      19, this->touch_event_handler_region(), output);
  }

  // optional bool contents_opaque = 21;
  if (has_contents_opaque()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->contents_opaque(), output);
  }

  // optional float opacity = 22;
  if (has_opacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->opacity(), output);
  }

  // optional .cc.proto.SkXfermode.Mode blend_mode = 23;
  if (has_blend_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->blend_mode(), output);
  }

  // optional bool is_root_for_isolated_group = 24;
  if (has_is_root_for_isolated_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->is_root_for_isolated_group(), output);
  }

  // optional .cc.proto.PointF position = 25;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      25, this->position(), output);
  }

  // optional bool is_container_for_fixed_position_layers = 26;
  if (has_is_container_for_fixed_position_layers()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->is_container_for_fixed_position_layers(), output);
  }

  // optional .cc.proto.LayerPositionConstraint position_constraint = 27;
  if (has_position_constraint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      27, this->position_constraint(), output);
  }

  // optional bool should_flatten_transform = 28;
  if (has_should_flatten_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->should_flatten_transform(), output);
  }

  // optional bool should_flatten_transform_from_property_tree = 29;
  if (has_should_flatten_transform_from_property_tree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->should_flatten_transform_from_property_tree(), output);
  }

  // optional int32 num_layer_or_descendants_with_copy_request = 30;
  if (has_num_layer_or_descendants_with_copy_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->num_layer_or_descendants_with_copy_request(), output);
  }

  // optional .cc.proto.SkXfermode.Mode draw_blend_mode = 31;
  if (has_draw_blend_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      31, this->draw_blend_mode(), output);
  }

  // optional bool use_parent_backface_visibility = 32;
  if (has_use_parent_backface_visibility()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->use_parent_backface_visibility(), output);
  }

  // optional .cc.proto.Transform transform = 33;
  if (has_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      33, this->transform(), output);
  }

  // optional bool transform_is_invertible = 34;
  if (has_transform_is_invertible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->transform_is_invertible(), output);
  }

  // optional int32 sorting_context_id = 35;
  if (has_sorting_context_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->sorting_context_id(), output);
  }

  // optional int32 num_descendants_that_draw_content = 36;
  if (has_num_descendants_that_draw_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->num_descendants_that_draw_content(), output);
  }

  // optional int32 scroll_clip_layer_id = 37;
  if (has_scroll_clip_layer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->scroll_clip_layer_id(), output);
  }

  // optional bool user_scrollable_horizontal = 38;
  if (has_user_scrollable_horizontal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(38, this->user_scrollable_horizontal(), output);
  }

  // optional bool user_scrollable_vertical = 39;
  if (has_user_scrollable_vertical()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(39, this->user_scrollable_vertical(), output);
  }

  // optional int32 scroll_parent_id = 40;
  if (has_scroll_parent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->scroll_parent_id(), output);
  }

  // repeated int32 scroll_children_ids = 41;
  for (int i = 0; i < this->scroll_children_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      41, this->scroll_children_ids(i), output);
  }

  // optional int32 clip_parent_id = 42;
  if (has_clip_parent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->clip_parent_id(), output);
  }

  // repeated int32 clip_children_ids = 43;
  for (int i = 0; i < this->clip_children_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      43, this->clip_children_ids(i), output);
  }

  // optional .cc.proto.ScrollOffset scroll_offset = 44;
  if (has_scroll_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      44, this->scroll_offset(), output);
  }

  // optional .cc.proto.Vector2dF scroll_compensation_adjustment = 45;
  if (has_scroll_compensation_adjustment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      45, this->scroll_compensation_adjustment(), output);
  }

  // optional .cc.proto.Rect update_rect = 46;
  if (has_update_rect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      46, this->update_rect(), output);
  }

  // optional bool stacking_order_changed = 47;
  if (has_stacking_order_changed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(47, this->stacking_order_changed(), output);
  }

  // optional int64 scroll_tree_index = 50;
  if (has_scroll_tree_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(50, this->scroll_tree_index(), output);
  }

}

int BaseLayerProperties::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cc.proto.Point3F transform_origin = 1;
    if (has_transform_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transform_origin());
    }

    // optional uint32 background_color = 2;
    if (has_background_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->background_color());
    }

    // optional .cc.proto.Size bounds = 3;
    if (has_bounds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bounds());
    }

    // optional int64 transform_free_index = 4;
    if (has_transform_free_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->transform_free_index());
    }

    // optional int64 effect_tree_index = 5;
    if (has_effect_tree_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->effect_tree_index());
    }

    // optional int64 clip_tree_index = 6;
    if (has_clip_tree_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->clip_tree_index());
    }

    // optional int64 scroll_tree_index = 50;
    if (has_scroll_tree_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->scroll_tree_index());
    }

    // optional .cc.proto.Vector2dF offset_to_transform_parent = 7;
    if (has_offset_to_transform_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->offset_to_transform_parent());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool double_sided = 8;
    if (has_double_sided()) {
      total_size += 1 + 1;
    }

    // optional bool draws_content = 9;
    if (has_draws_content()) {
      total_size += 1 + 1;
    }

    // optional bool hide_layer_and_subtree = 10;
    if (has_hide_layer_and_subtree()) {
      total_size += 1 + 1;
    }

    // optional bool has_render_surface = 11;
    if (has_has_render_surface()) {
      total_size += 1 + 1;
    }

    // optional bool masks_to_bounds = 14;
    if (has_masks_to_bounds()) {
      total_size += 1 + 1;
    }

    // optional uint32 main_thread_scrolling_reasons = 15;
    if (has_main_thread_scrolling_reasons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->main_thread_scrolling_reasons());
    }

    // optional bool have_scroll_event_handlers = 17;
    if (has_have_scroll_event_handlers()) {
      total_size += 2 + 1;
    }

    // optional .cc.proto.Region non_fast_scrollable_region = 18;
    if (has_non_fast_scrollable_region()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->non_fast_scrollable_region());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .cc.proto.Region touch_event_handler_region = 19;
    if (has_touch_event_handler_region()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->touch_event_handler_region());
    }

    // optional bool contents_opaque = 21;
    if (has_contents_opaque()) {
      total_size += 2 + 1;
    }

    // optional float opacity = 22;
    if (has_opacity()) {
      total_size += 2 + 4;
    }

    // optional .cc.proto.SkXfermode.Mode blend_mode = 23;
    if (has_blend_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->blend_mode());
    }

    // optional bool is_root_for_isolated_group = 24;
    if (has_is_root_for_isolated_group()) {
      total_size += 2 + 1;
    }

    // optional .cc.proto.PointF position = 25;
    if (has_position()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional bool is_container_for_fixed_position_layers = 26;
    if (has_is_container_for_fixed_position_layers()) {
      total_size += 2 + 1;
    }

    // optional .cc.proto.LayerPositionConstraint position_constraint = 27;
    if (has_position_constraint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position_constraint());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool should_flatten_transform = 28;
    if (has_should_flatten_transform()) {
      total_size += 2 + 1;
    }

    // optional bool should_flatten_transform_from_property_tree = 29;
    if (has_should_flatten_transform_from_property_tree()) {
      total_size += 2 + 1;
    }

    // optional int32 num_layer_or_descendants_with_copy_request = 30;
    if (has_num_layer_or_descendants_with_copy_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_layer_or_descendants_with_copy_request());
    }

    // optional .cc.proto.SkXfermode.Mode draw_blend_mode = 31;
    if (has_draw_blend_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->draw_blend_mode());
    }

    // optional bool use_parent_backface_visibility = 32;
    if (has_use_parent_backface_visibility()) {
      total_size += 2 + 1;
    }

    // optional .cc.proto.Transform transform = 33;
    if (has_transform()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transform());
    }

    // optional bool transform_is_invertible = 34;
    if (has_transform_is_invertible()) {
      total_size += 2 + 1;
    }

    // optional int32 sorting_context_id = 35;
    if (has_sorting_context_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sorting_context_id());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 num_descendants_that_draw_content = 36;
    if (has_num_descendants_that_draw_content()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_descendants_that_draw_content());
    }

    // optional int32 scroll_clip_layer_id = 37;
    if (has_scroll_clip_layer_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scroll_clip_layer_id());
    }

    // optional bool user_scrollable_horizontal = 38;
    if (has_user_scrollable_horizontal()) {
      total_size += 2 + 1;
    }

    // optional bool user_scrollable_vertical = 39;
    if (has_user_scrollable_vertical()) {
      total_size += 2 + 1;
    }

    // optional int32 scroll_parent_id = 40;
    if (has_scroll_parent_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scroll_parent_id());
    }

    // optional int32 clip_parent_id = 42;
    if (has_clip_parent_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clip_parent_id());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .cc.proto.ScrollOffset scroll_offset = 44;
    if (has_scroll_offset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scroll_offset());
    }

    // optional .cc.proto.Vector2dF scroll_compensation_adjustment = 45;
    if (has_scroll_compensation_adjustment()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scroll_compensation_adjustment());
    }

    // optional .cc.proto.Rect update_rect = 46;
    if (has_update_rect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_rect());
    }

    // optional bool stacking_order_changed = 47;
    if (has_stacking_order_changed()) {
      total_size += 2 + 1;
    }

  }
  // repeated int32 scroll_children_ids = 41;
  {
    int data_size = 0;
    for (int i = 0; i < this->scroll_children_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->scroll_children_ids(i));
    }
    total_size += 2 * this->scroll_children_ids_size() + data_size;
  }

  // repeated int32 clip_children_ids = 43;
  {
    int data_size = 0;
    for (int i = 0; i < this->clip_children_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->clip_children_ids(i));
    }
    total_size += 2 * this->clip_children_ids_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseLayerProperties::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BaseLayerProperties*>(&from));
}

void BaseLayerProperties::MergeFrom(const BaseLayerProperties& from) {
  GOOGLE_CHECK_NE(&from, this);
  scroll_children_ids_.MergeFrom(from.scroll_children_ids_);
  clip_children_ids_.MergeFrom(from.clip_children_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transform_origin()) {
      mutable_transform_origin()->::cc::proto::Point3F::MergeFrom(from.transform_origin());
    }
    if (from.has_background_color()) {
      set_background_color(from.background_color());
    }
    if (from.has_bounds()) {
      mutable_bounds()->::cc::proto::Size::MergeFrom(from.bounds());
    }
    if (from.has_transform_free_index()) {
      set_transform_free_index(from.transform_free_index());
    }
    if (from.has_effect_tree_index()) {
      set_effect_tree_index(from.effect_tree_index());
    }
    if (from.has_clip_tree_index()) {
      set_clip_tree_index(from.clip_tree_index());
    }
    if (from.has_scroll_tree_index()) {
      set_scroll_tree_index(from.scroll_tree_index());
    }
    if (from.has_offset_to_transform_parent()) {
      mutable_offset_to_transform_parent()->::cc::proto::Vector2dF::MergeFrom(from.offset_to_transform_parent());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_double_sided()) {
      set_double_sided(from.double_sided());
    }
    if (from.has_draws_content()) {
      set_draws_content(from.draws_content());
    }
    if (from.has_hide_layer_and_subtree()) {
      set_hide_layer_and_subtree(from.hide_layer_and_subtree());
    }
    if (from.has_has_render_surface()) {
      set_has_render_surface(from.has_render_surface());
    }
    if (from.has_masks_to_bounds()) {
      set_masks_to_bounds(from.masks_to_bounds());
    }
    if (from.has_main_thread_scrolling_reasons()) {
      set_main_thread_scrolling_reasons(from.main_thread_scrolling_reasons());
    }
    if (from.has_have_scroll_event_handlers()) {
      set_have_scroll_event_handlers(from.have_scroll_event_handlers());
    }
    if (from.has_non_fast_scrollable_region()) {
      mutable_non_fast_scrollable_region()->::cc::proto::Region::MergeFrom(from.non_fast_scrollable_region());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_touch_event_handler_region()) {
      mutable_touch_event_handler_region()->::cc::proto::Region::MergeFrom(from.touch_event_handler_region());
    }
    if (from.has_contents_opaque()) {
      set_contents_opaque(from.contents_opaque());
    }
    if (from.has_opacity()) {
      set_opacity(from.opacity());
    }
    if (from.has_blend_mode()) {
      set_blend_mode(from.blend_mode());
    }
    if (from.has_is_root_for_isolated_group()) {
      set_is_root_for_isolated_group(from.is_root_for_isolated_group());
    }
    if (from.has_position()) {
      mutable_position()->::cc::proto::PointF::MergeFrom(from.position());
    }
    if (from.has_is_container_for_fixed_position_layers()) {
      set_is_container_for_fixed_position_layers(from.is_container_for_fixed_position_layers());
    }
    if (from.has_position_constraint()) {
      mutable_position_constraint()->::cc::proto::LayerPositionConstraint::MergeFrom(from.position_constraint());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_should_flatten_transform()) {
      set_should_flatten_transform(from.should_flatten_transform());
    }
    if (from.has_should_flatten_transform_from_property_tree()) {
      set_should_flatten_transform_from_property_tree(from.should_flatten_transform_from_property_tree());
    }
    if (from.has_num_layer_or_descendants_with_copy_request()) {
      set_num_layer_or_descendants_with_copy_request(from.num_layer_or_descendants_with_copy_request());
    }
    if (from.has_draw_blend_mode()) {
      set_draw_blend_mode(from.draw_blend_mode());
    }
    if (from.has_use_parent_backface_visibility()) {
      set_use_parent_backface_visibility(from.use_parent_backface_visibility());
    }
    if (from.has_transform()) {
      mutable_transform()->::cc::proto::Transform::MergeFrom(from.transform());
    }
    if (from.has_transform_is_invertible()) {
      set_transform_is_invertible(from.transform_is_invertible());
    }
    if (from.has_sorting_context_id()) {
      set_sorting_context_id(from.sorting_context_id());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_num_descendants_that_draw_content()) {
      set_num_descendants_that_draw_content(from.num_descendants_that_draw_content());
    }
    if (from.has_scroll_clip_layer_id()) {
      set_scroll_clip_layer_id(from.scroll_clip_layer_id());
    }
    if (from.has_user_scrollable_horizontal()) {
      set_user_scrollable_horizontal(from.user_scrollable_horizontal());
    }
    if (from.has_user_scrollable_vertical()) {
      set_user_scrollable_vertical(from.user_scrollable_vertical());
    }
    if (from.has_scroll_parent_id()) {
      set_scroll_parent_id(from.scroll_parent_id());
    }
    if (from.has_clip_parent_id()) {
      set_clip_parent_id(from.clip_parent_id());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_scroll_offset()) {
      mutable_scroll_offset()->::cc::proto::ScrollOffset::MergeFrom(from.scroll_offset());
    }
    if (from.has_scroll_compensation_adjustment()) {
      mutable_scroll_compensation_adjustment()->::cc::proto::Vector2dF::MergeFrom(from.scroll_compensation_adjustment());
    }
    if (from.has_update_rect()) {
      mutable_update_rect()->::cc::proto::Rect::MergeFrom(from.update_rect());
    }
    if (from.has_stacking_order_changed()) {
      set_stacking_order_changed(from.stacking_order_changed());
    }
  }
}

void BaseLayerProperties::CopyFrom(const BaseLayerProperties& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseLayerProperties::IsInitialized() const {

  return true;
}

void BaseLayerProperties::Swap(BaseLayerProperties* other) {
  if (other != this) {
    std::swap(transform_origin_, other->transform_origin_);
    std::swap(background_color_, other->background_color_);
    std::swap(bounds_, other->bounds_);
    std::swap(transform_free_index_, other->transform_free_index_);
    std::swap(effect_tree_index_, other->effect_tree_index_);
    std::swap(clip_tree_index_, other->clip_tree_index_);
    std::swap(scroll_tree_index_, other->scroll_tree_index_);
    std::swap(offset_to_transform_parent_, other->offset_to_transform_parent_);
    std::swap(double_sided_, other->double_sided_);
    std::swap(draws_content_, other->draws_content_);
    std::swap(hide_layer_and_subtree_, other->hide_layer_and_subtree_);
    std::swap(has_render_surface_, other->has_render_surface_);
    std::swap(masks_to_bounds_, other->masks_to_bounds_);
    std::swap(main_thread_scrolling_reasons_, other->main_thread_scrolling_reasons_);
    std::swap(have_scroll_event_handlers_, other->have_scroll_event_handlers_);
    std::swap(non_fast_scrollable_region_, other->non_fast_scrollable_region_);
    std::swap(touch_event_handler_region_, other->touch_event_handler_region_);
    std::swap(contents_opaque_, other->contents_opaque_);
    std::swap(opacity_, other->opacity_);
    std::swap(blend_mode_, other->blend_mode_);
    std::swap(is_root_for_isolated_group_, other->is_root_for_isolated_group_);
    std::swap(position_, other->position_);
    std::swap(is_container_for_fixed_position_layers_, other->is_container_for_fixed_position_layers_);
    std::swap(position_constraint_, other->position_constraint_);
    std::swap(should_flatten_transform_, other->should_flatten_transform_);
    std::swap(should_flatten_transform_from_property_tree_, other->should_flatten_transform_from_property_tree_);
    std::swap(num_layer_or_descendants_with_copy_request_, other->num_layer_or_descendants_with_copy_request_);
    std::swap(draw_blend_mode_, other->draw_blend_mode_);
    std::swap(use_parent_backface_visibility_, other->use_parent_backface_visibility_);
    std::swap(transform_, other->transform_);
    std::swap(transform_is_invertible_, other->transform_is_invertible_);
    std::swap(sorting_context_id_, other->sorting_context_id_);
    std::swap(num_descendants_that_draw_content_, other->num_descendants_that_draw_content_);
    std::swap(scroll_clip_layer_id_, other->scroll_clip_layer_id_);
    std::swap(user_scrollable_horizontal_, other->user_scrollable_horizontal_);
    std::swap(user_scrollable_vertical_, other->user_scrollable_vertical_);
    std::swap(scroll_parent_id_, other->scroll_parent_id_);
    scroll_children_ids_.Swap(&other->scroll_children_ids_);
    std::swap(clip_parent_id_, other->clip_parent_id_);
    clip_children_ids_.Swap(&other->clip_children_ids_);
    std::swap(scroll_offset_, other->scroll_offset_);
    std::swap(scroll_compensation_adjustment_, other->scroll_compensation_adjustment_);
    std::swap(update_rect_, other->update_rect_);
    std::swap(stacking_order_changed_, other->stacking_order_changed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BaseLayerProperties::GetTypeName() const {
  return "cc.proto.BaseLayerProperties";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PictureLayerProperties::kRecordingSourceFieldNumber;
const int PictureLayerProperties::kInvalidationFieldNumber;
const int PictureLayerProperties::kLastUpdatedVisibleLayerRectFieldNumber;
const int PictureLayerProperties::kIsMaskFieldNumber;
const int PictureLayerProperties::kNearestNeighborFieldNumber;
const int PictureLayerProperties::kUpdateSourceFrameNumberFieldNumber;
#endif  // !_MSC_VER

PictureLayerProperties::PictureLayerProperties()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PictureLayerProperties::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  recording_source_ = const_cast< ::cc::proto::DisplayListRecordingSource*>(
      ::cc::proto::DisplayListRecordingSource::internal_default_instance());
#else
  recording_source_ = const_cast< ::cc::proto::DisplayListRecordingSource*>(&::cc::proto::DisplayListRecordingSource::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  invalidation_ = const_cast< ::cc::proto::Region*>(
      ::cc::proto::Region::internal_default_instance());
#else
  invalidation_ = const_cast< ::cc::proto::Region*>(&::cc::proto::Region::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  last_updated_visible_layer_rect_ = const_cast< ::cc::proto::Rect*>(
      ::cc::proto::Rect::internal_default_instance());
#else
  last_updated_visible_layer_rect_ = const_cast< ::cc::proto::Rect*>(&::cc::proto::Rect::default_instance());
#endif
}

PictureLayerProperties::PictureLayerProperties(const PictureLayerProperties& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PictureLayerProperties::SharedCtor() {
  _cached_size_ = 0;
  recording_source_ = NULL;
  invalidation_ = NULL;
  last_updated_visible_layer_rect_ = NULL;
  is_mask_ = false;
  nearest_neighbor_ = false;
  update_source_frame_number_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PictureLayerProperties::~PictureLayerProperties() {
  SharedDtor();
}

void PictureLayerProperties::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete recording_source_;
    delete invalidation_;
    delete last_updated_visible_layer_rect_;
  }
}

void PictureLayerProperties::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PictureLayerProperties& PictureLayerProperties::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_layer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_layer_2eproto();
#endif
  return *default_instance_;
}

PictureLayerProperties* PictureLayerProperties::default_instance_ = NULL;

PictureLayerProperties* PictureLayerProperties::New() const {
  return new PictureLayerProperties;
}

void PictureLayerProperties::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_recording_source()) {
      if (recording_source_ != NULL) recording_source_->::cc::proto::DisplayListRecordingSource::Clear();
    }
    if (has_invalidation()) {
      if (invalidation_ != NULL) invalidation_->::cc::proto::Region::Clear();
    }
    if (has_last_updated_visible_layer_rect()) {
      if (last_updated_visible_layer_rect_ != NULL) last_updated_visible_layer_rect_->::cc::proto::Rect::Clear();
    }
    is_mask_ = false;
    nearest_neighbor_ = false;
    update_source_frame_number_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PictureLayerProperties::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cc.proto.DisplayListRecordingSource recording_source = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recording_source()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_invalidation;
        break;
      }

      // optional .cc.proto.Region invalidation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_invalidation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invalidation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_last_updated_visible_layer_rect;
        break;
      }

      // optional .cc.proto.Rect last_updated_visible_layer_rect = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_updated_visible_layer_rect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_last_updated_visible_layer_rect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_mask;
        break;
      }

      // optional bool is_mask = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_mask_)));
          set_has_is_mask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nearest_neighbor;
        break;
      }

      // optional bool nearest_neighbor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nearest_neighbor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &nearest_neighbor_)));
          set_has_nearest_neighbor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_update_source_frame_number;
        break;
      }

      // optional int64 update_source_frame_number = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_source_frame_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &update_source_frame_number_)));
          set_has_update_source_frame_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PictureLayerProperties::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cc.proto.DisplayListRecordingSource recording_source = 1;
  if (has_recording_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->recording_source(), output);
  }

  // optional .cc.proto.Region invalidation = 2;
  if (has_invalidation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->invalidation(), output);
  }

  // optional .cc.proto.Rect last_updated_visible_layer_rect = 3;
  if (has_last_updated_visible_layer_rect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->last_updated_visible_layer_rect(), output);
  }

  // optional bool is_mask = 4;
  if (has_is_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_mask(), output);
  }

  // optional bool nearest_neighbor = 5;
  if (has_nearest_neighbor()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->nearest_neighbor(), output);
  }

  // optional int64 update_source_frame_number = 6;
  if (has_update_source_frame_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->update_source_frame_number(), output);
  }

}

int PictureLayerProperties::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cc.proto.DisplayListRecordingSource recording_source = 1;
    if (has_recording_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recording_source());
    }

    // optional .cc.proto.Region invalidation = 2;
    if (has_invalidation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invalidation());
    }

    // optional .cc.proto.Rect last_updated_visible_layer_rect = 3;
    if (has_last_updated_visible_layer_rect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->last_updated_visible_layer_rect());
    }

    // optional bool is_mask = 4;
    if (has_is_mask()) {
      total_size += 1 + 1;
    }

    // optional bool nearest_neighbor = 5;
    if (has_nearest_neighbor()) {
      total_size += 1 + 1;
    }

    // optional int64 update_source_frame_number = 6;
    if (has_update_source_frame_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->update_source_frame_number());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PictureLayerProperties::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PictureLayerProperties*>(&from));
}

void PictureLayerProperties::MergeFrom(const PictureLayerProperties& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recording_source()) {
      mutable_recording_source()->::cc::proto::DisplayListRecordingSource::MergeFrom(from.recording_source());
    }
    if (from.has_invalidation()) {
      mutable_invalidation()->::cc::proto::Region::MergeFrom(from.invalidation());
    }
    if (from.has_last_updated_visible_layer_rect()) {
      mutable_last_updated_visible_layer_rect()->::cc::proto::Rect::MergeFrom(from.last_updated_visible_layer_rect());
    }
    if (from.has_is_mask()) {
      set_is_mask(from.is_mask());
    }
    if (from.has_nearest_neighbor()) {
      set_nearest_neighbor(from.nearest_neighbor());
    }
    if (from.has_update_source_frame_number()) {
      set_update_source_frame_number(from.update_source_frame_number());
    }
  }
}

void PictureLayerProperties::CopyFrom(const PictureLayerProperties& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PictureLayerProperties::IsInitialized() const {

  return true;
}

void PictureLayerProperties::Swap(PictureLayerProperties* other) {
  if (other != this) {
    std::swap(recording_source_, other->recording_source_);
    std::swap(invalidation_, other->invalidation_);
    std::swap(last_updated_visible_layer_rect_, other->last_updated_visible_layer_rect_);
    std::swap(is_mask_, other->is_mask_);
    std::swap(nearest_neighbor_, other->nearest_neighbor_);
    std::swap(update_source_frame_number_, other->update_source_frame_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PictureLayerProperties::GetTypeName() const {
  return "cc.proto.PictureLayerProperties";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cc

// @@protoc_insertion_point(global_scope)
