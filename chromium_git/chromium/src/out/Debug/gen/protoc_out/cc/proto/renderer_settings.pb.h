// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: renderer_settings.proto

#ifndef PROTOBUF_renderer_5fsettings_2eproto__INCLUDED
#define PROTOBUF_renderer_5fsettings_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)
#include "cc/proto/cc_proto_export.h"

namespace cc {
namespace proto {

// Internal implementation detail -- do not call these.
void CC_PROTO_EXPORT protobuf_AddDesc_renderer_5fsettings_2eproto();
void protobuf_AssignDesc_renderer_5fsettings_2eproto();
void protobuf_ShutdownFile_renderer_5fsettings_2eproto();

class RendererSettings;

// ===================================================================

class CC_PROTO_EXPORT RendererSettings : public ::google::protobuf::MessageLite {
 public:
  RendererSettings();
  virtual ~RendererSettings();

  RendererSettings(const RendererSettings& from);

  inline RendererSettings& operator=(const RendererSettings& from) {
    CopyFrom(from);
    return *this;
  }

  static const RendererSettings& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RendererSettings* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RendererSettings* other);

  // implements Message ----------------------------------------------

  RendererSettings* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RendererSettings& from);
  void MergeFrom(const RendererSettings& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool allow_antialiasing = 1;
  inline bool has_allow_antialiasing() const;
  inline void clear_allow_antialiasing();
  static const int kAllowAntialiasingFieldNumber = 1;
  inline bool allow_antialiasing() const;
  inline void set_allow_antialiasing(bool value);

  // optional bool force_antialiasing = 2;
  inline bool has_force_antialiasing() const;
  inline void clear_force_antialiasing();
  static const int kForceAntialiasingFieldNumber = 2;
  inline bool force_antialiasing() const;
  inline void set_force_antialiasing(bool value);

  // optional bool force_blending_with_shaders = 3;
  inline bool has_force_blending_with_shaders() const;
  inline void clear_force_blending_with_shaders();
  static const int kForceBlendingWithShadersFieldNumber = 3;
  inline bool force_blending_with_shaders() const;
  inline void set_force_blending_with_shaders(bool value);

  // optional bool partial_swap_enabled = 4;
  inline bool has_partial_swap_enabled() const;
  inline void clear_partial_swap_enabled();
  static const int kPartialSwapEnabledFieldNumber = 4;
  inline bool partial_swap_enabled() const;
  inline void set_partial_swap_enabled(bool value);

  // optional bool finish_rendering_on_resize = 5;
  inline bool has_finish_rendering_on_resize() const;
  inline void clear_finish_rendering_on_resize();
  static const int kFinishRenderingOnResizeFieldNumber = 5;
  inline bool finish_rendering_on_resize() const;
  inline void set_finish_rendering_on_resize(bool value);

  // optional bool should_clear_root_render_pass = 6;
  inline bool has_should_clear_root_render_pass() const;
  inline void clear_should_clear_root_render_pass();
  static const int kShouldClearRootRenderPassFieldNumber = 6;
  inline bool should_clear_root_render_pass() const;
  inline void set_should_clear_root_render_pass(bool value);

  // optional bool disable_display_vsync = 7;
  inline bool has_disable_display_vsync() const;
  inline void clear_disable_display_vsync();
  static const int kDisableDisplayVsyncFieldNumber = 7;
  inline bool disable_display_vsync() const;
  inline void set_disable_display_vsync(bool value);

  // optional bool release_overlay_resources_on_swap_complete = 8;
  inline bool has_release_overlay_resources_on_swap_complete() const;
  inline void clear_release_overlay_resources_on_swap_complete();
  static const int kReleaseOverlayResourcesOnSwapCompleteFieldNumber = 8;
  inline bool release_overlay_resources_on_swap_complete() const;
  inline void set_release_overlay_resources_on_swap_complete(bool value);

  // optional double refresh_rate = 9;
  inline bool has_refresh_rate() const;
  inline void clear_refresh_rate();
  static const int kRefreshRateFieldNumber = 9;
  inline double refresh_rate() const;
  inline void set_refresh_rate(double value);

  // optional uint32 highp_threshold_min = 10;
  inline bool has_highp_threshold_min() const;
  inline void clear_highp_threshold_min();
  static const int kHighpThresholdMinFieldNumber = 10;
  inline ::google::protobuf::uint32 highp_threshold_min() const;
  inline void set_highp_threshold_min(::google::protobuf::uint32 value);

  // optional bool use_rgba_4444_textures = 11;
  inline bool has_use_rgba_4444_textures() const;
  inline void clear_use_rgba_4444_textures();
  static const int kUseRgba4444TexturesFieldNumber = 11;
  inline bool use_rgba_4444_textures() const;
  inline void set_use_rgba_4444_textures(bool value);

  // optional uint32 texture_id_allocation_chunk_size = 12;
  inline bool has_texture_id_allocation_chunk_size() const;
  inline void clear_texture_id_allocation_chunk_size();
  static const int kTextureIdAllocationChunkSizeFieldNumber = 12;
  inline ::google::protobuf::uint32 texture_id_allocation_chunk_size() const;
  inline void set_texture_id_allocation_chunk_size(::google::protobuf::uint32 value);

  // optional bool use_gpu_memory_buffer_resources = 13;
  inline bool has_use_gpu_memory_buffer_resources() const;
  inline void clear_use_gpu_memory_buffer_resources();
  static const int kUseGpuMemoryBufferResourcesFieldNumber = 13;
  inline bool use_gpu_memory_buffer_resources() const;
  inline void set_use_gpu_memory_buffer_resources(bool value);

  // @@protoc_insertion_point(class_scope:cc.proto.RendererSettings)
 private:
  inline void set_has_allow_antialiasing();
  inline void clear_has_allow_antialiasing();
  inline void set_has_force_antialiasing();
  inline void clear_has_force_antialiasing();
  inline void set_has_force_blending_with_shaders();
  inline void clear_has_force_blending_with_shaders();
  inline void set_has_partial_swap_enabled();
  inline void clear_has_partial_swap_enabled();
  inline void set_has_finish_rendering_on_resize();
  inline void clear_has_finish_rendering_on_resize();
  inline void set_has_should_clear_root_render_pass();
  inline void clear_has_should_clear_root_render_pass();
  inline void set_has_disable_display_vsync();
  inline void clear_has_disable_display_vsync();
  inline void set_has_release_overlay_resources_on_swap_complete();
  inline void clear_has_release_overlay_resources_on_swap_complete();
  inline void set_has_refresh_rate();
  inline void clear_has_refresh_rate();
  inline void set_has_highp_threshold_min();
  inline void clear_has_highp_threshold_min();
  inline void set_has_use_rgba_4444_textures();
  inline void clear_has_use_rgba_4444_textures();
  inline void set_has_texture_id_allocation_chunk_size();
  inline void clear_has_texture_id_allocation_chunk_size();
  inline void set_has_use_gpu_memory_buffer_resources();
  inline void clear_has_use_gpu_memory_buffer_resources();

  bool allow_antialiasing_;
  bool force_antialiasing_;
  bool force_blending_with_shaders_;
  bool partial_swap_enabled_;
  bool finish_rendering_on_resize_;
  bool should_clear_root_render_pass_;
  bool disable_display_vsync_;
  bool release_overlay_resources_on_swap_complete_;
  double refresh_rate_;
  ::google::protobuf::uint32 highp_threshold_min_;
  ::google::protobuf::uint32 texture_id_allocation_chunk_size_;
  bool use_rgba_4444_textures_;
  bool use_gpu_memory_buffer_resources_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void CC_PROTO_EXPORT protobuf_AddDesc_renderer_5fsettings_2eproto_impl();
  #else
  friend void CC_PROTO_EXPORT protobuf_AddDesc_renderer_5fsettings_2eproto();
  #endif
  friend void protobuf_AssignDesc_renderer_5fsettings_2eproto();
  friend void protobuf_ShutdownFile_renderer_5fsettings_2eproto();

  void InitAsDefaultInstance();
  static RendererSettings* default_instance_;
};
// ===================================================================


// ===================================================================

// RendererSettings

// optional bool allow_antialiasing = 1;
inline bool RendererSettings::has_allow_antialiasing() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RendererSettings::set_has_allow_antialiasing() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RendererSettings::clear_has_allow_antialiasing() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RendererSettings::clear_allow_antialiasing() {
  allow_antialiasing_ = false;
  clear_has_allow_antialiasing();
}
inline bool RendererSettings::allow_antialiasing() const {
  return allow_antialiasing_;
}
inline void RendererSettings::set_allow_antialiasing(bool value) {
  set_has_allow_antialiasing();
  allow_antialiasing_ = value;
}

// optional bool force_antialiasing = 2;
inline bool RendererSettings::has_force_antialiasing() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RendererSettings::set_has_force_antialiasing() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RendererSettings::clear_has_force_antialiasing() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RendererSettings::clear_force_antialiasing() {
  force_antialiasing_ = false;
  clear_has_force_antialiasing();
}
inline bool RendererSettings::force_antialiasing() const {
  return force_antialiasing_;
}
inline void RendererSettings::set_force_antialiasing(bool value) {
  set_has_force_antialiasing();
  force_antialiasing_ = value;
}

// optional bool force_blending_with_shaders = 3;
inline bool RendererSettings::has_force_blending_with_shaders() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RendererSettings::set_has_force_blending_with_shaders() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RendererSettings::clear_has_force_blending_with_shaders() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RendererSettings::clear_force_blending_with_shaders() {
  force_blending_with_shaders_ = false;
  clear_has_force_blending_with_shaders();
}
inline bool RendererSettings::force_blending_with_shaders() const {
  return force_blending_with_shaders_;
}
inline void RendererSettings::set_force_blending_with_shaders(bool value) {
  set_has_force_blending_with_shaders();
  force_blending_with_shaders_ = value;
}

// optional bool partial_swap_enabled = 4;
inline bool RendererSettings::has_partial_swap_enabled() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RendererSettings::set_has_partial_swap_enabled() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RendererSettings::clear_has_partial_swap_enabled() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RendererSettings::clear_partial_swap_enabled() {
  partial_swap_enabled_ = false;
  clear_has_partial_swap_enabled();
}
inline bool RendererSettings::partial_swap_enabled() const {
  return partial_swap_enabled_;
}
inline void RendererSettings::set_partial_swap_enabled(bool value) {
  set_has_partial_swap_enabled();
  partial_swap_enabled_ = value;
}

// optional bool finish_rendering_on_resize = 5;
inline bool RendererSettings::has_finish_rendering_on_resize() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RendererSettings::set_has_finish_rendering_on_resize() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RendererSettings::clear_has_finish_rendering_on_resize() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RendererSettings::clear_finish_rendering_on_resize() {
  finish_rendering_on_resize_ = false;
  clear_has_finish_rendering_on_resize();
}
inline bool RendererSettings::finish_rendering_on_resize() const {
  return finish_rendering_on_resize_;
}
inline void RendererSettings::set_finish_rendering_on_resize(bool value) {
  set_has_finish_rendering_on_resize();
  finish_rendering_on_resize_ = value;
}

// optional bool should_clear_root_render_pass = 6;
inline bool RendererSettings::has_should_clear_root_render_pass() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RendererSettings::set_has_should_clear_root_render_pass() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RendererSettings::clear_has_should_clear_root_render_pass() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RendererSettings::clear_should_clear_root_render_pass() {
  should_clear_root_render_pass_ = false;
  clear_has_should_clear_root_render_pass();
}
inline bool RendererSettings::should_clear_root_render_pass() const {
  return should_clear_root_render_pass_;
}
inline void RendererSettings::set_should_clear_root_render_pass(bool value) {
  set_has_should_clear_root_render_pass();
  should_clear_root_render_pass_ = value;
}

// optional bool disable_display_vsync = 7;
inline bool RendererSettings::has_disable_display_vsync() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RendererSettings::set_has_disable_display_vsync() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RendererSettings::clear_has_disable_display_vsync() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RendererSettings::clear_disable_display_vsync() {
  disable_display_vsync_ = false;
  clear_has_disable_display_vsync();
}
inline bool RendererSettings::disable_display_vsync() const {
  return disable_display_vsync_;
}
inline void RendererSettings::set_disable_display_vsync(bool value) {
  set_has_disable_display_vsync();
  disable_display_vsync_ = value;
}

// optional bool release_overlay_resources_on_swap_complete = 8;
inline bool RendererSettings::has_release_overlay_resources_on_swap_complete() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RendererSettings::set_has_release_overlay_resources_on_swap_complete() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RendererSettings::clear_has_release_overlay_resources_on_swap_complete() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RendererSettings::clear_release_overlay_resources_on_swap_complete() {
  release_overlay_resources_on_swap_complete_ = false;
  clear_has_release_overlay_resources_on_swap_complete();
}
inline bool RendererSettings::release_overlay_resources_on_swap_complete() const {
  return release_overlay_resources_on_swap_complete_;
}
inline void RendererSettings::set_release_overlay_resources_on_swap_complete(bool value) {
  set_has_release_overlay_resources_on_swap_complete();
  release_overlay_resources_on_swap_complete_ = value;
}

// optional double refresh_rate = 9;
inline bool RendererSettings::has_refresh_rate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RendererSettings::set_has_refresh_rate() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RendererSettings::clear_has_refresh_rate() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RendererSettings::clear_refresh_rate() {
  refresh_rate_ = 0;
  clear_has_refresh_rate();
}
inline double RendererSettings::refresh_rate() const {
  return refresh_rate_;
}
inline void RendererSettings::set_refresh_rate(double value) {
  set_has_refresh_rate();
  refresh_rate_ = value;
}

// optional uint32 highp_threshold_min = 10;
inline bool RendererSettings::has_highp_threshold_min() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RendererSettings::set_has_highp_threshold_min() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RendererSettings::clear_has_highp_threshold_min() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RendererSettings::clear_highp_threshold_min() {
  highp_threshold_min_ = 0u;
  clear_has_highp_threshold_min();
}
inline ::google::protobuf::uint32 RendererSettings::highp_threshold_min() const {
  return highp_threshold_min_;
}
inline void RendererSettings::set_highp_threshold_min(::google::protobuf::uint32 value) {
  set_has_highp_threshold_min();
  highp_threshold_min_ = value;
}

// optional bool use_rgba_4444_textures = 11;
inline bool RendererSettings::has_use_rgba_4444_textures() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RendererSettings::set_has_use_rgba_4444_textures() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RendererSettings::clear_has_use_rgba_4444_textures() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RendererSettings::clear_use_rgba_4444_textures() {
  use_rgba_4444_textures_ = false;
  clear_has_use_rgba_4444_textures();
}
inline bool RendererSettings::use_rgba_4444_textures() const {
  return use_rgba_4444_textures_;
}
inline void RendererSettings::set_use_rgba_4444_textures(bool value) {
  set_has_use_rgba_4444_textures();
  use_rgba_4444_textures_ = value;
}

// optional uint32 texture_id_allocation_chunk_size = 12;
inline bool RendererSettings::has_texture_id_allocation_chunk_size() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RendererSettings::set_has_texture_id_allocation_chunk_size() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RendererSettings::clear_has_texture_id_allocation_chunk_size() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RendererSettings::clear_texture_id_allocation_chunk_size() {
  texture_id_allocation_chunk_size_ = 0u;
  clear_has_texture_id_allocation_chunk_size();
}
inline ::google::protobuf::uint32 RendererSettings::texture_id_allocation_chunk_size() const {
  return texture_id_allocation_chunk_size_;
}
inline void RendererSettings::set_texture_id_allocation_chunk_size(::google::protobuf::uint32 value) {
  set_has_texture_id_allocation_chunk_size();
  texture_id_allocation_chunk_size_ = value;
}

// optional bool use_gpu_memory_buffer_resources = 13;
inline bool RendererSettings::has_use_gpu_memory_buffer_resources() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RendererSettings::set_has_use_gpu_memory_buffer_resources() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RendererSettings::clear_has_use_gpu_memory_buffer_resources() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RendererSettings::clear_use_gpu_memory_buffer_resources() {
  use_gpu_memory_buffer_resources_ = false;
  clear_has_use_gpu_memory_buffer_resources();
}
inline bool RendererSettings::use_gpu_memory_buffer_resources() const {
  return use_gpu_memory_buffer_resources_;
}
inline void RendererSettings::set_use_gpu_memory_buffer_resources(bool value) {
  set_has_use_gpu_memory_buffer_resources();
  use_gpu_memory_buffer_resources_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cc

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_renderer_5fsettings_2eproto__INCLUDED
