// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vector2d.proto

#ifndef PROTOBUF_vector2d_2eproto__INCLUDED
#define PROTOBUF_vector2d_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)
#include "cc/proto/cc_proto_export.h"

namespace cc {
namespace proto {

// Internal implementation detail -- do not call these.
void CC_PROTO_EXPORT protobuf_AddDesc_vector2d_2eproto();
void protobuf_AssignDesc_vector2d_2eproto();
void protobuf_ShutdownFile_vector2d_2eproto();

class Vector2d;

// ===================================================================

class CC_PROTO_EXPORT Vector2d : public ::google::protobuf::MessageLite {
 public:
  Vector2d();
  virtual ~Vector2d();

  Vector2d(const Vector2d& from);

  inline Vector2d& operator=(const Vector2d& from) {
    CopyFrom(from);
    return *this;
  }

  static const Vector2d& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Vector2d* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Vector2d* other);

  // implements Message ----------------------------------------------

  Vector2d* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Vector2d& from);
  void MergeFrom(const Vector2d& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int64 x() const;
  inline void set_x(::google::protobuf::int64 value);

  // optional int64 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int64 y() const;
  inline void set_y(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cc.proto.Vector2d)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::int64 x_;
  ::google::protobuf::int64 y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void CC_PROTO_EXPORT protobuf_AddDesc_vector2d_2eproto_impl();
  #else
  friend void CC_PROTO_EXPORT protobuf_AddDesc_vector2d_2eproto();
  #endif
  friend void protobuf_AssignDesc_vector2d_2eproto();
  friend void protobuf_ShutdownFile_vector2d_2eproto();

  void InitAsDefaultInstance();
  static Vector2d* default_instance_;
};
// ===================================================================


// ===================================================================

// Vector2d

// optional int64 x = 1;
inline bool Vector2d::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector2d::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector2d::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector2d::clear_x() {
  x_ = GOOGLE_LONGLONG(0);
  clear_has_x();
}
inline ::google::protobuf::int64 Vector2d::x() const {
  return x_;
}
inline void Vector2d::set_x(::google::protobuf::int64 value) {
  set_has_x();
  x_ = value;
}

// optional int64 y = 2;
inline bool Vector2d::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector2d::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector2d::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector2d::clear_y() {
  y_ = GOOGLE_LONGLONG(0);
  clear_has_y();
}
inline ::google::protobuf::int64 Vector2d::y() const {
  return y_;
}
inline void Vector2d::set_y(::google::protobuf::int64 value) {
  set_has_y();
  y_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cc

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_vector2d_2eproto__INCLUDED
