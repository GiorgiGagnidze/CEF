// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: renderer_settings.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "renderer_settings.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace cc {
namespace proto {

void protobuf_ShutdownFile_renderer_5fsettings_2eproto() {
  delete RendererSettings::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_renderer_5fsettings_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_renderer_5fsettings_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  RendererSettings::default_instance_ = new RendererSettings();
  RendererSettings::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_renderer_5fsettings_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_renderer_5fsettings_2eproto_once_);
void protobuf_AddDesc_renderer_5fsettings_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_renderer_5fsettings_2eproto_once_,
                 &protobuf_AddDesc_renderer_5fsettings_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_renderer_5fsettings_2eproto {
  StaticDescriptorInitializer_renderer_5fsettings_2eproto() {
    protobuf_AddDesc_renderer_5fsettings_2eproto();
  }
} static_descriptor_initializer_renderer_5fsettings_2eproto_;
#endif

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RendererSettings::kAllowAntialiasingFieldNumber;
const int RendererSettings::kForceAntialiasingFieldNumber;
const int RendererSettings::kForceBlendingWithShadersFieldNumber;
const int RendererSettings::kPartialSwapEnabledFieldNumber;
const int RendererSettings::kFinishRenderingOnResizeFieldNumber;
const int RendererSettings::kShouldClearRootRenderPassFieldNumber;
const int RendererSettings::kDisableDisplayVsyncFieldNumber;
const int RendererSettings::kReleaseOverlayResourcesOnSwapCompleteFieldNumber;
const int RendererSettings::kRefreshRateFieldNumber;
const int RendererSettings::kHighpThresholdMinFieldNumber;
const int RendererSettings::kUseRgba4444TexturesFieldNumber;
const int RendererSettings::kTextureIdAllocationChunkSizeFieldNumber;
const int RendererSettings::kUseGpuMemoryBufferResourcesFieldNumber;
#endif  // !_MSC_VER

RendererSettings::RendererSettings()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RendererSettings::InitAsDefaultInstance() {
}

RendererSettings::RendererSettings(const RendererSettings& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RendererSettings::SharedCtor() {
  _cached_size_ = 0;
  allow_antialiasing_ = false;
  force_antialiasing_ = false;
  force_blending_with_shaders_ = false;
  partial_swap_enabled_ = false;
  finish_rendering_on_resize_ = false;
  should_clear_root_render_pass_ = false;
  disable_display_vsync_ = false;
  release_overlay_resources_on_swap_complete_ = false;
  refresh_rate_ = 0;
  highp_threshold_min_ = 0u;
  use_rgba_4444_textures_ = false;
  texture_id_allocation_chunk_size_ = 0u;
  use_gpu_memory_buffer_resources_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RendererSettings::~RendererSettings() {
  SharedDtor();
}

void RendererSettings::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RendererSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RendererSettings& RendererSettings::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_renderer_5fsettings_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_renderer_5fsettings_2eproto();
#endif
  return *default_instance_;
}

RendererSettings* RendererSettings::default_instance_ = NULL;

RendererSettings* RendererSettings::New() const {
  return new RendererSettings;
}

void RendererSettings::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    allow_antialiasing_ = false;
    force_antialiasing_ = false;
    force_blending_with_shaders_ = false;
    partial_swap_enabled_ = false;
    finish_rendering_on_resize_ = false;
    should_clear_root_render_pass_ = false;
    disable_display_vsync_ = false;
    release_overlay_resources_on_swap_complete_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    refresh_rate_ = 0;
    highp_threshold_min_ = 0u;
    use_rgba_4444_textures_ = false;
    texture_id_allocation_chunk_size_ = 0u;
    use_gpu_memory_buffer_resources_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RendererSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool allow_antialiasing = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_antialiasing_)));
          set_has_allow_antialiasing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_force_antialiasing;
        break;
      }

      // optional bool force_antialiasing = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force_antialiasing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_antialiasing_)));
          set_has_force_antialiasing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_force_blending_with_shaders;
        break;
      }

      // optional bool force_blending_with_shaders = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force_blending_with_shaders:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_blending_with_shaders_)));
          set_has_force_blending_with_shaders();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_partial_swap_enabled;
        break;
      }

      // optional bool partial_swap_enabled = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partial_swap_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &partial_swap_enabled_)));
          set_has_partial_swap_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_finish_rendering_on_resize;
        break;
      }

      // optional bool finish_rendering_on_resize = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish_rendering_on_resize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finish_rendering_on_resize_)));
          set_has_finish_rendering_on_resize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_should_clear_root_render_pass;
        break;
      }

      // optional bool should_clear_root_render_pass = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_should_clear_root_render_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &should_clear_root_render_pass_)));
          set_has_should_clear_root_render_pass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_disable_display_vsync;
        break;
      }

      // optional bool disable_display_vsync = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_disable_display_vsync:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_display_vsync_)));
          set_has_disable_display_vsync();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_release_overlay_resources_on_swap_complete;
        break;
      }

      // optional bool release_overlay_resources_on_swap_complete = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_release_overlay_resources_on_swap_complete:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &release_overlay_resources_on_swap_complete_)));
          set_has_release_overlay_resources_on_swap_complete();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_refresh_rate;
        break;
      }

      // optional double refresh_rate = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_refresh_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &refresh_rate_)));
          set_has_refresh_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_highp_threshold_min;
        break;
      }

      // optional uint32 highp_threshold_min = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_highp_threshold_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &highp_threshold_min_)));
          set_has_highp_threshold_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_use_rgba_4444_textures;
        break;
      }

      // optional bool use_rgba_4444_textures = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_rgba_4444_textures:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_rgba_4444_textures_)));
          set_has_use_rgba_4444_textures();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_texture_id_allocation_chunk_size;
        break;
      }

      // optional uint32 texture_id_allocation_chunk_size = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_texture_id_allocation_chunk_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &texture_id_allocation_chunk_size_)));
          set_has_texture_id_allocation_chunk_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_use_gpu_memory_buffer_resources;
        break;
      }

      // optional bool use_gpu_memory_buffer_resources = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_gpu_memory_buffer_resources:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_gpu_memory_buffer_resources_)));
          set_has_use_gpu_memory_buffer_resources();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RendererSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool allow_antialiasing = 1;
  if (has_allow_antialiasing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->allow_antialiasing(), output);
  }

  // optional bool force_antialiasing = 2;
  if (has_force_antialiasing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->force_antialiasing(), output);
  }

  // optional bool force_blending_with_shaders = 3;
  if (has_force_blending_with_shaders()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->force_blending_with_shaders(), output);
  }

  // optional bool partial_swap_enabled = 4;
  if (has_partial_swap_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->partial_swap_enabled(), output);
  }

  // optional bool finish_rendering_on_resize = 5;
  if (has_finish_rendering_on_resize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->finish_rendering_on_resize(), output);
  }

  // optional bool should_clear_root_render_pass = 6;
  if (has_should_clear_root_render_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->should_clear_root_render_pass(), output);
  }

  // optional bool disable_display_vsync = 7;
  if (has_disable_display_vsync()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->disable_display_vsync(), output);
  }

  // optional bool release_overlay_resources_on_swap_complete = 8;
  if (has_release_overlay_resources_on_swap_complete()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->release_overlay_resources_on_swap_complete(), output);
  }

  // optional double refresh_rate = 9;
  if (has_refresh_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->refresh_rate(), output);
  }

  // optional uint32 highp_threshold_min = 10;
  if (has_highp_threshold_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->highp_threshold_min(), output);
  }

  // optional bool use_rgba_4444_textures = 11;
  if (has_use_rgba_4444_textures()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->use_rgba_4444_textures(), output);
  }

  // optional uint32 texture_id_allocation_chunk_size = 12;
  if (has_texture_id_allocation_chunk_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->texture_id_allocation_chunk_size(), output);
  }

  // optional bool use_gpu_memory_buffer_resources = 13;
  if (has_use_gpu_memory_buffer_resources()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->use_gpu_memory_buffer_resources(), output);
  }

}

int RendererSettings::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool allow_antialiasing = 1;
    if (has_allow_antialiasing()) {
      total_size += 1 + 1;
    }

    // optional bool force_antialiasing = 2;
    if (has_force_antialiasing()) {
      total_size += 1 + 1;
    }

    // optional bool force_blending_with_shaders = 3;
    if (has_force_blending_with_shaders()) {
      total_size += 1 + 1;
    }

    // optional bool partial_swap_enabled = 4;
    if (has_partial_swap_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool finish_rendering_on_resize = 5;
    if (has_finish_rendering_on_resize()) {
      total_size += 1 + 1;
    }

    // optional bool should_clear_root_render_pass = 6;
    if (has_should_clear_root_render_pass()) {
      total_size += 1 + 1;
    }

    // optional bool disable_display_vsync = 7;
    if (has_disable_display_vsync()) {
      total_size += 1 + 1;
    }

    // optional bool release_overlay_resources_on_swap_complete = 8;
    if (has_release_overlay_resources_on_swap_complete()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double refresh_rate = 9;
    if (has_refresh_rate()) {
      total_size += 1 + 8;
    }

    // optional uint32 highp_threshold_min = 10;
    if (has_highp_threshold_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->highp_threshold_min());
    }

    // optional bool use_rgba_4444_textures = 11;
    if (has_use_rgba_4444_textures()) {
      total_size += 1 + 1;
    }

    // optional uint32 texture_id_allocation_chunk_size = 12;
    if (has_texture_id_allocation_chunk_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->texture_id_allocation_chunk_size());
    }

    // optional bool use_gpu_memory_buffer_resources = 13;
    if (has_use_gpu_memory_buffer_resources()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RendererSettings::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RendererSettings*>(&from));
}

void RendererSettings::MergeFrom(const RendererSettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_allow_antialiasing()) {
      set_allow_antialiasing(from.allow_antialiasing());
    }
    if (from.has_force_antialiasing()) {
      set_force_antialiasing(from.force_antialiasing());
    }
    if (from.has_force_blending_with_shaders()) {
      set_force_blending_with_shaders(from.force_blending_with_shaders());
    }
    if (from.has_partial_swap_enabled()) {
      set_partial_swap_enabled(from.partial_swap_enabled());
    }
    if (from.has_finish_rendering_on_resize()) {
      set_finish_rendering_on_resize(from.finish_rendering_on_resize());
    }
    if (from.has_should_clear_root_render_pass()) {
      set_should_clear_root_render_pass(from.should_clear_root_render_pass());
    }
    if (from.has_disable_display_vsync()) {
      set_disable_display_vsync(from.disable_display_vsync());
    }
    if (from.has_release_overlay_resources_on_swap_complete()) {
      set_release_overlay_resources_on_swap_complete(from.release_overlay_resources_on_swap_complete());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_refresh_rate()) {
      set_refresh_rate(from.refresh_rate());
    }
    if (from.has_highp_threshold_min()) {
      set_highp_threshold_min(from.highp_threshold_min());
    }
    if (from.has_use_rgba_4444_textures()) {
      set_use_rgba_4444_textures(from.use_rgba_4444_textures());
    }
    if (from.has_texture_id_allocation_chunk_size()) {
      set_texture_id_allocation_chunk_size(from.texture_id_allocation_chunk_size());
    }
    if (from.has_use_gpu_memory_buffer_resources()) {
      set_use_gpu_memory_buffer_resources(from.use_gpu_memory_buffer_resources());
    }
  }
}

void RendererSettings::CopyFrom(const RendererSettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RendererSettings::IsInitialized() const {

  return true;
}

void RendererSettings::Swap(RendererSettings* other) {
  if (other != this) {
    std::swap(allow_antialiasing_, other->allow_antialiasing_);
    std::swap(force_antialiasing_, other->force_antialiasing_);
    std::swap(force_blending_with_shaders_, other->force_blending_with_shaders_);
    std::swap(partial_swap_enabled_, other->partial_swap_enabled_);
    std::swap(finish_rendering_on_resize_, other->finish_rendering_on_resize_);
    std::swap(should_clear_root_render_pass_, other->should_clear_root_render_pass_);
    std::swap(disable_display_vsync_, other->disable_display_vsync_);
    std::swap(release_overlay_resources_on_swap_complete_, other->release_overlay_resources_on_swap_complete_);
    std::swap(refresh_rate_, other->refresh_rate_);
    std::swap(highp_threshold_min_, other->highp_threshold_min_);
    std::swap(use_rgba_4444_textures_, other->use_rgba_4444_textures_);
    std::swap(texture_id_allocation_chunk_size_, other->texture_id_allocation_chunk_size_);
    std::swap(use_gpu_memory_buffer_resources_, other->use_gpu_memory_buffer_resources_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RendererSettings::GetTypeName() const {
  return "cc.proto.RendererSettings";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cc

// @@protoc_insertion_point(global_scope)
