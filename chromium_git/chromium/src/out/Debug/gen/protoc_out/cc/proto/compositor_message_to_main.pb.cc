// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compositor_message_to_main.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "compositor_message_to_main.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace cc {
namespace proto {

void protobuf_ShutdownFile_compositor_5fmessage_5fto_5fmain_2eproto() {
  delete CompositorMessageToMain::default_instance_;
  delete BeginMainFrame::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_compositor_5fmessage_5fto_5fmain_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_compositor_5fmessage_5fto_5fmain_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::cc::proto::protobuf_AddDesc_begin_5fmain_5fframe_5fand_5fcommit_5fstate_2eproto();
  CompositorMessageToMain::default_instance_ = new CompositorMessageToMain();
  BeginMainFrame::default_instance_ = new BeginMainFrame();
  CompositorMessageToMain::default_instance_->InitAsDefaultInstance();
  BeginMainFrame::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_compositor_5fmessage_5fto_5fmain_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_compositor_5fmessage_5fto_5fmain_2eproto_once_);
void protobuf_AddDesc_compositor_5fmessage_5fto_5fmain_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_compositor_5fmessage_5fto_5fmain_2eproto_once_,
                 &protobuf_AddDesc_compositor_5fmessage_5fto_5fmain_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_compositor_5fmessage_5fto_5fmain_2eproto {
  StaticDescriptorInitializer_compositor_5fmessage_5fto_5fmain_2eproto() {
    protobuf_AddDesc_compositor_5fmessage_5fto_5fmain_2eproto();
  }
} static_descriptor_initializer_compositor_5fmessage_5fto_5fmain_2eproto_;
#endif

// ===================================================================

bool CompositorMessageToMain_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CompositorMessageToMain_Type CompositorMessageToMain::UNKNOWN;
const CompositorMessageToMain_Type CompositorMessageToMain::BEGIN_MAIN_FRAME;
const CompositorMessageToMain_Type CompositorMessageToMain::Type_MIN;
const CompositorMessageToMain_Type CompositorMessageToMain::Type_MAX;
const int CompositorMessageToMain::Type_ARRAYSIZE;
#endif  // _MSC_VER
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompositorMessageToMain::kMessageTypeFieldNumber;
const int CompositorMessageToMain::kBeginMainFrameMessageFieldNumber;
#endif  // !_MSC_VER

CompositorMessageToMain::CompositorMessageToMain()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CompositorMessageToMain::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  begin_main_frame_message_ = const_cast< ::cc::proto::BeginMainFrame*>(
      ::cc::proto::BeginMainFrame::internal_default_instance());
#else
  begin_main_frame_message_ = const_cast< ::cc::proto::BeginMainFrame*>(&::cc::proto::BeginMainFrame::default_instance());
#endif
}

CompositorMessageToMain::CompositorMessageToMain(const CompositorMessageToMain& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CompositorMessageToMain::SharedCtor() {
  _cached_size_ = 0;
  message_type_ = 0;
  begin_main_frame_message_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompositorMessageToMain::~CompositorMessageToMain() {
  SharedDtor();
}

void CompositorMessageToMain::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete begin_main_frame_message_;
  }
}

void CompositorMessageToMain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CompositorMessageToMain& CompositorMessageToMain::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_compositor_5fmessage_5fto_5fmain_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_compositor_5fmessage_5fto_5fmain_2eproto();
#endif
  return *default_instance_;
}

CompositorMessageToMain* CompositorMessageToMain::default_instance_ = NULL;

CompositorMessageToMain* CompositorMessageToMain::New() const {
  return new CompositorMessageToMain;
}

void CompositorMessageToMain::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_type_ = 0;
    if (has_begin_main_frame_message()) {
      if (begin_main_frame_message_ != NULL) begin_main_frame_message_->::cc::proto::BeginMainFrame::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CompositorMessageToMain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cc.proto.CompositorMessageToMain.Type message_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cc::proto::CompositorMessageToMain_Type_IsValid(value)) {
            set_message_type(static_cast< ::cc::proto::CompositorMessageToMain_Type >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_begin_main_frame_message;
        break;
      }

      // optional .cc.proto.BeginMainFrame begin_main_frame_message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_begin_main_frame_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_begin_main_frame_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CompositorMessageToMain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cc.proto.CompositorMessageToMain.Type message_type = 1;
  if (has_message_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->message_type(), output);
  }

  // optional .cc.proto.BeginMainFrame begin_main_frame_message = 2;
  if (has_begin_main_frame_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->begin_main_frame_message(), output);
  }

}

int CompositorMessageToMain::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cc.proto.CompositorMessageToMain.Type message_type = 1;
    if (has_message_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->message_type());
    }

    // optional .cc.proto.BeginMainFrame begin_main_frame_message = 2;
    if (has_begin_main_frame_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->begin_main_frame_message());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompositorMessageToMain::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CompositorMessageToMain*>(&from));
}

void CompositorMessageToMain::MergeFrom(const CompositorMessageToMain& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_type()) {
      set_message_type(from.message_type());
    }
    if (from.has_begin_main_frame_message()) {
      mutable_begin_main_frame_message()->::cc::proto::BeginMainFrame::MergeFrom(from.begin_main_frame_message());
    }
  }
}

void CompositorMessageToMain::CopyFrom(const CompositorMessageToMain& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompositorMessageToMain::IsInitialized() const {

  return true;
}

void CompositorMessageToMain::Swap(CompositorMessageToMain* other) {
  if (other != this) {
    std::swap(message_type_, other->message_type_);
    std::swap(begin_main_frame_message_, other->begin_main_frame_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CompositorMessageToMain::GetTypeName() const {
  return "cc.proto.CompositorMessageToMain";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BeginMainFrame::kBeginMainFrameStateFieldNumber;
#endif  // !_MSC_VER

BeginMainFrame::BeginMainFrame()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BeginMainFrame::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  begin_main_frame_state_ = const_cast< ::cc::proto::BeginMainFrameAndCommitState*>(
      ::cc::proto::BeginMainFrameAndCommitState::internal_default_instance());
#else
  begin_main_frame_state_ = const_cast< ::cc::proto::BeginMainFrameAndCommitState*>(&::cc::proto::BeginMainFrameAndCommitState::default_instance());
#endif
}

BeginMainFrame::BeginMainFrame(const BeginMainFrame& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BeginMainFrame::SharedCtor() {
  _cached_size_ = 0;
  begin_main_frame_state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeginMainFrame::~BeginMainFrame() {
  SharedDtor();
}

void BeginMainFrame::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete begin_main_frame_state_;
  }
}

void BeginMainFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BeginMainFrame& BeginMainFrame::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_compositor_5fmessage_5fto_5fmain_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_compositor_5fmessage_5fto_5fmain_2eproto();
#endif
  return *default_instance_;
}

BeginMainFrame* BeginMainFrame::default_instance_ = NULL;

BeginMainFrame* BeginMainFrame::New() const {
  return new BeginMainFrame;
}

void BeginMainFrame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_begin_main_frame_state()) {
      if (begin_main_frame_state_ != NULL) begin_main_frame_state_->::cc::proto::BeginMainFrameAndCommitState::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BeginMainFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cc.proto.BeginMainFrameAndCommitState begin_main_frame_state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_begin_main_frame_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BeginMainFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cc.proto.BeginMainFrameAndCommitState begin_main_frame_state = 1;
  if (has_begin_main_frame_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->begin_main_frame_state(), output);
  }

}

int BeginMainFrame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cc.proto.BeginMainFrameAndCommitState begin_main_frame_state = 1;
    if (has_begin_main_frame_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->begin_main_frame_state());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeginMainFrame::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BeginMainFrame*>(&from));
}

void BeginMainFrame::MergeFrom(const BeginMainFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_begin_main_frame_state()) {
      mutable_begin_main_frame_state()->::cc::proto::BeginMainFrameAndCommitState::MergeFrom(from.begin_main_frame_state());
    }
  }
}

void BeginMainFrame::CopyFrom(const BeginMainFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginMainFrame::IsInitialized() const {

  return true;
}

void BeginMainFrame::Swap(BeginMainFrame* other) {
  if (other != this) {
    std::swap(begin_main_frame_state_, other->begin_main_frame_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BeginMainFrame::GetTypeName() const {
  return "cc.proto.BeginMainFrame";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cc

// @@protoc_insertion_point(global_scope)
