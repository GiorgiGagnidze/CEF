// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logging.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "logging.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace extensions {
namespace api {
namespace cast_channel {
namespace proto {

void protobuf_ShutdownFile_logging_2eproto() {
  delete SocketEvent::default_instance_;
  delete AggregatedSocketEvent::default_instance_;
  delete Log::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_logging_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_logging_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  SocketEvent::default_instance_ = new SocketEvent();
  AggregatedSocketEvent::default_instance_ = new AggregatedSocketEvent();
  Log::default_instance_ = new Log();
  SocketEvent::default_instance_->InitAsDefaultInstance();
  AggregatedSocketEvent::default_instance_->InitAsDefaultInstance();
  Log::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_logging_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_logging_2eproto_once_);
void protobuf_AddDesc_logging_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_logging_2eproto_once_,
                 &protobuf_AddDesc_logging_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_logging_2eproto {
  StaticDescriptorInitializer_logging_2eproto() {
    protobuf_AddDesc_logging_2eproto();
  }
} static_descriptor_initializer_logging_2eproto_;
#endif
bool EventType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
      return true;
    default:
      return false;
  }
}

bool ChannelAuth_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool ReadyState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

bool ConnectionState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 100:
    case 101:
    case 102:
      return true;
    default:
      return false;
  }
}

bool ReadState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 100:
      return true;
    default:
      return false;
  }
}

bool WriteState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 100:
    case 101:
      return true;
    default:
      return false;
  }
}

bool ErrorState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

bool ChallengeReplyErrorType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SocketEvent::kTypeFieldNumber;
const int SocketEvent::kTimestampMicrosFieldNumber;
const int SocketEvent::kDetailsFieldNumber;
const int SocketEvent::kNetReturnValueFieldNumber;
const int SocketEvent::kMessageNamespaceFieldNumber;
const int SocketEvent::kReadyStateFieldNumber;
const int SocketEvent::kConnectionStateFieldNumber;
const int SocketEvent::kReadStateFieldNumber;
const int SocketEvent::kWriteStateFieldNumber;
const int SocketEvent::kErrorStateFieldNumber;
const int SocketEvent::kChallengeReplyErrorTypeFieldNumber;
const int SocketEvent::kNssErrorCodeFieldNumber;
#endif  // !_MSC_VER

SocketEvent::SocketEvent()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SocketEvent::InitAsDefaultInstance() {
}

SocketEvent::SocketEvent(const SocketEvent& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SocketEvent::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  timestamp_micros_ = GOOGLE_LONGLONG(0);
  details_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  net_return_value_ = 0;
  message_namespace_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ready_state_ = 1;
  connection_state_ = 1;
  read_state_ = 1;
  write_state_ = 1;
  error_state_ = 1;
  challenge_reply_error_type_ = 1;
  nss_error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SocketEvent::~SocketEvent() {
  SharedDtor();
}

void SocketEvent::SharedDtor() {
  if (details_ != &::google::protobuf::internal::GetEmptyString()) {
    delete details_;
  }
  if (message_namespace_ != &::google::protobuf::internal::GetEmptyString()) {
    delete message_namespace_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SocketEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SocketEvent& SocketEvent::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_logging_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_logging_2eproto();
#endif
  return *default_instance_;
}

SocketEvent* SocketEvent::default_instance_ = NULL;

SocketEvent* SocketEvent::New() const {
  return new SocketEvent;
}

void SocketEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    timestamp_micros_ = GOOGLE_LONGLONG(0);
    if (has_details()) {
      if (details_ != &::google::protobuf::internal::GetEmptyString()) {
        details_->clear();
      }
    }
    net_return_value_ = 0;
    if (has_message_namespace()) {
      if (message_namespace_ != &::google::protobuf::internal::GetEmptyString()) {
        message_namespace_->clear();
      }
    }
    ready_state_ = 1;
    connection_state_ = 1;
    read_state_ = 1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    write_state_ = 1;
    error_state_ = 1;
    challenge_reply_error_type_ = 1;
    nss_error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SocketEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .extensions.api.cast_channel.proto.EventType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::extensions::api::cast_channel::proto::EventType_IsValid(value)) {
            set_type(static_cast< ::extensions::api::cast_channel::proto::EventType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timestamp_micros;
        break;
      }

      // optional int64 timestamp_micros = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp_micros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_micros_)));
          set_has_timestamp_micros();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_details;
        break;
      }

      // optional string details = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_net_return_value;
        break;
      }

      // optional int32 net_return_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_net_return_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &net_return_value_)));
          set_has_net_return_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_message_namespace;
        break;
      }

      // optional string message_namespace = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message_namespace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_namespace()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ready_state;
        break;
      }

      // optional .extensions.api.cast_channel.proto.ReadyState ready_state = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ready_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::extensions::api::cast_channel::proto::ReadyState_IsValid(value)) {
            set_ready_state(static_cast< ::extensions::api::cast_channel::proto::ReadyState >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_connection_state;
        break;
      }

      // optional .extensions.api.cast_channel.proto.ConnectionState connection_state = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connection_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::extensions::api::cast_channel::proto::ConnectionState_IsValid(value)) {
            set_connection_state(static_cast< ::extensions::api::cast_channel::proto::ConnectionState >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_read_state;
        break;
      }

      // optional .extensions.api.cast_channel.proto.ReadState read_state = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_read_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::extensions::api::cast_channel::proto::ReadState_IsValid(value)) {
            set_read_state(static_cast< ::extensions::api::cast_channel::proto::ReadState >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_write_state;
        break;
      }

      // optional .extensions.api.cast_channel.proto.WriteState write_state = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_write_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::extensions::api::cast_channel::proto::WriteState_IsValid(value)) {
            set_write_state(static_cast< ::extensions::api::cast_channel::proto::WriteState >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_error_state;
        break;
      }

      // optional .extensions.api.cast_channel.proto.ErrorState error_state = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::extensions::api::cast_channel::proto::ErrorState_IsValid(value)) {
            set_error_state(static_cast< ::extensions::api::cast_channel::proto::ErrorState >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_challenge_reply_error_type;
        break;
      }

      // optional .extensions.api.cast_channel.proto.ChallengeReplyErrorType challenge_reply_error_type = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challenge_reply_error_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::extensions::api::cast_channel::proto::ChallengeReplyErrorType_IsValid(value)) {
            set_challenge_reply_error_type(static_cast< ::extensions::api::cast_channel::proto::ChallengeReplyErrorType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_nss_error_code;
        break;
      }

      // optional int32 nss_error_code = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nss_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nss_error_code_)));
          set_has_nss_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SocketEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .extensions.api.cast_channel.proto.EventType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int64 timestamp_micros = 2;
  if (has_timestamp_micros()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp_micros(), output);
  }

  // optional string details = 3;
  if (has_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->details(), output);
  }

  // optional int32 net_return_value = 4;
  if (has_net_return_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->net_return_value(), output);
  }

  // optional string message_namespace = 5;
  if (has_message_namespace()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->message_namespace(), output);
  }

  // optional .extensions.api.cast_channel.proto.ReadyState ready_state = 6;
  if (has_ready_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->ready_state(), output);
  }

  // optional .extensions.api.cast_channel.proto.ConnectionState connection_state = 7;
  if (has_connection_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->connection_state(), output);
  }

  // optional .extensions.api.cast_channel.proto.ReadState read_state = 8;
  if (has_read_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->read_state(), output);
  }

  // optional .extensions.api.cast_channel.proto.WriteState write_state = 9;
  if (has_write_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->write_state(), output);
  }

  // optional .extensions.api.cast_channel.proto.ErrorState error_state = 10;
  if (has_error_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->error_state(), output);
  }

  // optional .extensions.api.cast_channel.proto.ChallengeReplyErrorType challenge_reply_error_type = 11;
  if (has_challenge_reply_error_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->challenge_reply_error_type(), output);
  }

  // optional int32 nss_error_code = 12;
  if (has_nss_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->nss_error_code(), output);
  }

}

int SocketEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .extensions.api.cast_channel.proto.EventType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int64 timestamp_micros = 2;
    if (has_timestamp_micros()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_micros());
    }

    // optional string details = 3;
    if (has_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->details());
    }

    // optional int32 net_return_value = 4;
    if (has_net_return_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->net_return_value());
    }

    // optional string message_namespace = 5;
    if (has_message_namespace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message_namespace());
    }

    // optional .extensions.api.cast_channel.proto.ReadyState ready_state = 6;
    if (has_ready_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ready_state());
    }

    // optional .extensions.api.cast_channel.proto.ConnectionState connection_state = 7;
    if (has_connection_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->connection_state());
    }

    // optional .extensions.api.cast_channel.proto.ReadState read_state = 8;
    if (has_read_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->read_state());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .extensions.api.cast_channel.proto.WriteState write_state = 9;
    if (has_write_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->write_state());
    }

    // optional .extensions.api.cast_channel.proto.ErrorState error_state = 10;
    if (has_error_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_state());
    }

    // optional .extensions.api.cast_channel.proto.ChallengeReplyErrorType challenge_reply_error_type = 11;
    if (has_challenge_reply_error_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->challenge_reply_error_type());
    }

    // optional int32 nss_error_code = 12;
    if (has_nss_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nss_error_code());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SocketEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SocketEvent*>(&from));
}

void SocketEvent::MergeFrom(const SocketEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_timestamp_micros()) {
      set_timestamp_micros(from.timestamp_micros());
    }
    if (from.has_details()) {
      set_details(from.details());
    }
    if (from.has_net_return_value()) {
      set_net_return_value(from.net_return_value());
    }
    if (from.has_message_namespace()) {
      set_message_namespace(from.message_namespace());
    }
    if (from.has_ready_state()) {
      set_ready_state(from.ready_state());
    }
    if (from.has_connection_state()) {
      set_connection_state(from.connection_state());
    }
    if (from.has_read_state()) {
      set_read_state(from.read_state());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_write_state()) {
      set_write_state(from.write_state());
    }
    if (from.has_error_state()) {
      set_error_state(from.error_state());
    }
    if (from.has_challenge_reply_error_type()) {
      set_challenge_reply_error_type(from.challenge_reply_error_type());
    }
    if (from.has_nss_error_code()) {
      set_nss_error_code(from.nss_error_code());
    }
  }
}

void SocketEvent::CopyFrom(const SocketEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketEvent::IsInitialized() const {

  return true;
}

void SocketEvent::Swap(SocketEvent* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(timestamp_micros_, other->timestamp_micros_);
    std::swap(details_, other->details_);
    std::swap(net_return_value_, other->net_return_value_);
    std::swap(message_namespace_, other->message_namespace_);
    std::swap(ready_state_, other->ready_state_);
    std::swap(connection_state_, other->connection_state_);
    std::swap(read_state_, other->read_state_);
    std::swap(write_state_, other->write_state_);
    std::swap(error_state_, other->error_state_);
    std::swap(challenge_reply_error_type_, other->challenge_reply_error_type_);
    std::swap(nss_error_code_, other->nss_error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SocketEvent::GetTypeName() const {
  return "extensions.api.cast_channel.proto.SocketEvent";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AggregatedSocketEvent::kIdFieldNumber;
const int AggregatedSocketEvent::kEndpointIdFieldNumber;
const int AggregatedSocketEvent::kChannelAuthTypeFieldNumber;
const int AggregatedSocketEvent::kSocketEventFieldNumber;
const int AggregatedSocketEvent::kBytesReadFieldNumber;
const int AggregatedSocketEvent::kBytesWrittenFieldNumber;
#endif  // !_MSC_VER

AggregatedSocketEvent::AggregatedSocketEvent()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AggregatedSocketEvent::InitAsDefaultInstance() {
}

AggregatedSocketEvent::AggregatedSocketEvent(const AggregatedSocketEvent& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AggregatedSocketEvent::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  endpoint_id_ = 0;
  channel_auth_type_ = 1;
  bytes_read_ = GOOGLE_LONGLONG(0);
  bytes_written_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AggregatedSocketEvent::~AggregatedSocketEvent() {
  SharedDtor();
}

void AggregatedSocketEvent::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AggregatedSocketEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AggregatedSocketEvent& AggregatedSocketEvent::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_logging_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_logging_2eproto();
#endif
  return *default_instance_;
}

AggregatedSocketEvent* AggregatedSocketEvent::default_instance_ = NULL;

AggregatedSocketEvent* AggregatedSocketEvent::New() const {
  return new AggregatedSocketEvent;
}

void AggregatedSocketEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    endpoint_id_ = 0;
    channel_auth_type_ = 1;
    bytes_read_ = GOOGLE_LONGLONG(0);
    bytes_written_ = GOOGLE_LONGLONG(0);
  }
  socket_event_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool AggregatedSocketEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_endpoint_id;
        break;
      }

      // optional int32 endpoint_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endpoint_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endpoint_id_)));
          set_has_endpoint_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_auth_type;
        break;
      }

      // optional .extensions.api.cast_channel.proto.ChannelAuth channel_auth_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_auth_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::extensions::api::cast_channel::proto::ChannelAuth_IsValid(value)) {
            set_channel_auth_type(static_cast< ::extensions::api::cast_channel::proto::ChannelAuth >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_socket_event;
        break;
      }

      // repeated .extensions.api.cast_channel.proto.SocketEvent socket_event = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_socket_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_socket_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_socket_event;
        if (input->ExpectTag(40)) goto parse_bytes_read;
        break;
      }

      // optional int64 bytes_read = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytes_read:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bytes_read_)));
          set_has_bytes_read();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bytes_written;
        break;
      }

      // optional int64 bytes_written = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytes_written:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bytes_written_)));
          set_has_bytes_written();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AggregatedSocketEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 endpoint_id = 2;
  if (has_endpoint_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->endpoint_id(), output);
  }

  // optional .extensions.api.cast_channel.proto.ChannelAuth channel_auth_type = 3;
  if (has_channel_auth_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->channel_auth_type(), output);
  }

  // repeated .extensions.api.cast_channel.proto.SocketEvent socket_event = 4;
  for (int i = 0; i < this->socket_event_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->socket_event(i), output);
  }

  // optional int64 bytes_read = 5;
  if (has_bytes_read()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->bytes_read(), output);
  }

  // optional int64 bytes_written = 6;
  if (has_bytes_written()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->bytes_written(), output);
  }

}

int AggregatedSocketEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 endpoint_id = 2;
    if (has_endpoint_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endpoint_id());
    }

    // optional .extensions.api.cast_channel.proto.ChannelAuth channel_auth_type = 3;
    if (has_channel_auth_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel_auth_type());
    }

    // optional int64 bytes_read = 5;
    if (has_bytes_read()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bytes_read());
    }

    // optional int64 bytes_written = 6;
    if (has_bytes_written()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bytes_written());
    }

  }
  // repeated .extensions.api.cast_channel.proto.SocketEvent socket_event = 4;
  total_size += 1 * this->socket_event_size();
  for (int i = 0; i < this->socket_event_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->socket_event(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AggregatedSocketEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AggregatedSocketEvent*>(&from));
}

void AggregatedSocketEvent::MergeFrom(const AggregatedSocketEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  socket_event_.MergeFrom(from.socket_event_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_endpoint_id()) {
      set_endpoint_id(from.endpoint_id());
    }
    if (from.has_channel_auth_type()) {
      set_channel_auth_type(from.channel_auth_type());
    }
    if (from.has_bytes_read()) {
      set_bytes_read(from.bytes_read());
    }
    if (from.has_bytes_written()) {
      set_bytes_written(from.bytes_written());
    }
  }
}

void AggregatedSocketEvent::CopyFrom(const AggregatedSocketEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregatedSocketEvent::IsInitialized() const {

  return true;
}

void AggregatedSocketEvent::Swap(AggregatedSocketEvent* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(endpoint_id_, other->endpoint_id_);
    std::swap(channel_auth_type_, other->channel_auth_type_);
    socket_event_.Swap(&other->socket_event_);
    std::swap(bytes_read_, other->bytes_read_);
    std::swap(bytes_written_, other->bytes_written_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AggregatedSocketEvent::GetTypeName() const {
  return "extensions.api.cast_channel.proto.AggregatedSocketEvent";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Log::kAggregatedSocketEventFieldNumber;
const int Log::kNumEvictedAggregatedSocketEventsFieldNumber;
const int Log::kNumEvictedSocketEventsFieldNumber;
#endif  // !_MSC_VER

Log::Log()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Log::InitAsDefaultInstance() {
}

Log::Log(const Log& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Log::SharedCtor() {
  _cached_size_ = 0;
  num_evicted_aggregated_socket_events_ = 0;
  num_evicted_socket_events_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Log::~Log() {
  SharedDtor();
}

void Log::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Log::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Log& Log::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_logging_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_logging_2eproto();
#endif
  return *default_instance_;
}

Log* Log::default_instance_ = NULL;

Log* Log::New() const {
  return new Log;
}

void Log::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    num_evicted_aggregated_socket_events_ = 0;
    num_evicted_socket_events_ = 0;
  }
  aggregated_socket_event_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Log::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .extensions.api.cast_channel.proto.AggregatedSocketEvent aggregated_socket_event = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aggregated_socket_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_aggregated_socket_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_aggregated_socket_event;
        if (input->ExpectTag(16)) goto parse_num_evicted_aggregated_socket_events;
        break;
      }

      // optional int32 num_evicted_aggregated_socket_events = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_evicted_aggregated_socket_events:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_evicted_aggregated_socket_events_)));
          set_has_num_evicted_aggregated_socket_events();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num_evicted_socket_events;
        break;
      }

      // optional int32 num_evicted_socket_events = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_evicted_socket_events:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_evicted_socket_events_)));
          set_has_num_evicted_socket_events();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Log::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .extensions.api.cast_channel.proto.AggregatedSocketEvent aggregated_socket_event = 1;
  for (int i = 0; i < this->aggregated_socket_event_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->aggregated_socket_event(i), output);
  }

  // optional int32 num_evicted_aggregated_socket_events = 2;
  if (has_num_evicted_aggregated_socket_events()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_evicted_aggregated_socket_events(), output);
  }

  // optional int32 num_evicted_socket_events = 3;
  if (has_num_evicted_socket_events()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_evicted_socket_events(), output);
  }

}

int Log::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 num_evicted_aggregated_socket_events = 2;
    if (has_num_evicted_aggregated_socket_events()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_evicted_aggregated_socket_events());
    }

    // optional int32 num_evicted_socket_events = 3;
    if (has_num_evicted_socket_events()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_evicted_socket_events());
    }

  }
  // repeated .extensions.api.cast_channel.proto.AggregatedSocketEvent aggregated_socket_event = 1;
  total_size += 1 * this->aggregated_socket_event_size();
  for (int i = 0; i < this->aggregated_socket_event_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->aggregated_socket_event(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Log::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Log*>(&from));
}

void Log::MergeFrom(const Log& from) {
  GOOGLE_CHECK_NE(&from, this);
  aggregated_socket_event_.MergeFrom(from.aggregated_socket_event_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_num_evicted_aggregated_socket_events()) {
      set_num_evicted_aggregated_socket_events(from.num_evicted_aggregated_socket_events());
    }
    if (from.has_num_evicted_socket_events()) {
      set_num_evicted_socket_events(from.num_evicted_socket_events());
    }
  }
}

void Log::CopyFrom(const Log& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Log::IsInitialized() const {

  return true;
}

void Log::Swap(Log* other) {
  if (other != this) {
    aggregated_socket_event_.Swap(&other->aggregated_socket_event_);
    std::swap(num_evicted_aggregated_socket_events_, other->num_evicted_aggregated_socket_events_);
    std::swap(num_evicted_socket_events_, other->num_evicted_socket_events_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Log::GetTypeName() const {
  return "extensions.api.cast_channel.proto.Log";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cast_channel
}  // namespace api
}  // namespace extensions

// @@protoc_insertion_point(global_scope)
