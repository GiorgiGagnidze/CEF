// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: authority_keys.proto

#ifndef PROTOBUF_authority_5fkeys_2eproto__INCLUDED
#define PROTOBUF_authority_5fkeys_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace extensions {
namespace api {
namespace cast_channel {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_authority_5fkeys_2eproto();
void protobuf_AssignDesc_authority_5fkeys_2eproto();
void protobuf_ShutdownFile_authority_5fkeys_2eproto();

class AuthorityKeys;
class AuthorityKeys_Key;

// ===================================================================

class AuthorityKeys_Key : public ::google::protobuf::MessageLite {
 public:
  AuthorityKeys_Key();
  virtual ~AuthorityKeys_Key();

  AuthorityKeys_Key(const AuthorityKeys_Key& from);

  inline AuthorityKeys_Key& operator=(const AuthorityKeys_Key& from) {
    CopyFrom(from);
    return *this;
  }

  static const AuthorityKeys_Key& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const AuthorityKeys_Key* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(AuthorityKeys_Key* other);

  // implements Message ----------------------------------------------

  AuthorityKeys_Key* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AuthorityKeys_Key& from);
  void MergeFrom(const AuthorityKeys_Key& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes fingerprint = 1;
  inline bool has_fingerprint() const;
  inline void clear_fingerprint();
  static const int kFingerprintFieldNumber = 1;
  inline const ::std::string& fingerprint() const;
  inline void set_fingerprint(const ::std::string& value);
  inline void set_fingerprint(const char* value);
  inline void set_fingerprint(const void* value, size_t size);
  inline ::std::string* mutable_fingerprint();
  inline ::std::string* release_fingerprint();
  inline void set_allocated_fingerprint(::std::string* fingerprint);

  // required bytes public_key = 2;
  inline bool has_public_key() const;
  inline void clear_public_key();
  static const int kPublicKeyFieldNumber = 2;
  inline const ::std::string& public_key() const;
  inline void set_public_key(const ::std::string& value);
  inline void set_public_key(const char* value);
  inline void set_public_key(const void* value, size_t size);
  inline ::std::string* mutable_public_key();
  inline ::std::string* release_public_key();
  inline void set_allocated_public_key(::std::string* public_key);

  // @@protoc_insertion_point(class_scope:extensions.api.cast_channel.proto.AuthorityKeys.Key)
 private:
  inline void set_has_fingerprint();
  inline void clear_has_fingerprint();
  inline void set_has_public_key();
  inline void clear_has_public_key();

  ::std::string* fingerprint_;
  ::std::string* public_key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_authority_5fkeys_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_authority_5fkeys_2eproto();
  #endif
  friend void protobuf_AssignDesc_authority_5fkeys_2eproto();
  friend void protobuf_ShutdownFile_authority_5fkeys_2eproto();

  void InitAsDefaultInstance();
  static AuthorityKeys_Key* default_instance_;
};
// -------------------------------------------------------------------

class AuthorityKeys : public ::google::protobuf::MessageLite {
 public:
  AuthorityKeys();
  virtual ~AuthorityKeys();

  AuthorityKeys(const AuthorityKeys& from);

  inline AuthorityKeys& operator=(const AuthorityKeys& from) {
    CopyFrom(from);
    return *this;
  }

  static const AuthorityKeys& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const AuthorityKeys* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(AuthorityKeys* other);

  // implements Message ----------------------------------------------

  AuthorityKeys* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AuthorityKeys& from);
  void MergeFrom(const AuthorityKeys& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef AuthorityKeys_Key Key;

  // accessors -------------------------------------------------------

  // repeated .extensions.api.cast_channel.proto.AuthorityKeys.Key keys = 1;
  inline int keys_size() const;
  inline void clear_keys();
  static const int kKeysFieldNumber = 1;
  inline const ::extensions::api::cast_channel::proto::AuthorityKeys_Key& keys(int index) const;
  inline ::extensions::api::cast_channel::proto::AuthorityKeys_Key* mutable_keys(int index);
  inline ::extensions::api::cast_channel::proto::AuthorityKeys_Key* add_keys();
  inline const ::google::protobuf::RepeatedPtrField< ::extensions::api::cast_channel::proto::AuthorityKeys_Key >&
      keys() const;
  inline ::google::protobuf::RepeatedPtrField< ::extensions::api::cast_channel::proto::AuthorityKeys_Key >*
      mutable_keys();

  // @@protoc_insertion_point(class_scope:extensions.api.cast_channel.proto.AuthorityKeys)
 private:

  ::google::protobuf::RepeatedPtrField< ::extensions::api::cast_channel::proto::AuthorityKeys_Key > keys_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_authority_5fkeys_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_authority_5fkeys_2eproto();
  #endif
  friend void protobuf_AssignDesc_authority_5fkeys_2eproto();
  friend void protobuf_ShutdownFile_authority_5fkeys_2eproto();

  void InitAsDefaultInstance();
  static AuthorityKeys* default_instance_;
};
// ===================================================================


// ===================================================================

// AuthorityKeys_Key

// required bytes fingerprint = 1;
inline bool AuthorityKeys_Key::has_fingerprint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuthorityKeys_Key::set_has_fingerprint() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuthorityKeys_Key::clear_has_fingerprint() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuthorityKeys_Key::clear_fingerprint() {
  if (fingerprint_ != &::google::protobuf::internal::GetEmptyString()) {
    fingerprint_->clear();
  }
  clear_has_fingerprint();
}
inline const ::std::string& AuthorityKeys_Key::fingerprint() const {
  return *fingerprint_;
}
inline void AuthorityKeys_Key::set_fingerprint(const ::std::string& value) {
  set_has_fingerprint();
  if (fingerprint_ == &::google::protobuf::internal::GetEmptyString()) {
    fingerprint_ = new ::std::string;
  }
  fingerprint_->assign(value);
}
inline void AuthorityKeys_Key::set_fingerprint(const char* value) {
  set_has_fingerprint();
  if (fingerprint_ == &::google::protobuf::internal::GetEmptyString()) {
    fingerprint_ = new ::std::string;
  }
  fingerprint_->assign(value);
}
inline void AuthorityKeys_Key::set_fingerprint(const void* value, size_t size) {
  set_has_fingerprint();
  if (fingerprint_ == &::google::protobuf::internal::GetEmptyString()) {
    fingerprint_ = new ::std::string;
  }
  fingerprint_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AuthorityKeys_Key::mutable_fingerprint() {
  set_has_fingerprint();
  if (fingerprint_ == &::google::protobuf::internal::GetEmptyString()) {
    fingerprint_ = new ::std::string;
  }
  return fingerprint_;
}
inline ::std::string* AuthorityKeys_Key::release_fingerprint() {
  clear_has_fingerprint();
  if (fingerprint_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = fingerprint_;
    fingerprint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void AuthorityKeys_Key::set_allocated_fingerprint(::std::string* fingerprint) {
  if (fingerprint_ != &::google::protobuf::internal::GetEmptyString()) {
    delete fingerprint_;
  }
  if (fingerprint) {
    set_has_fingerprint();
    fingerprint_ = fingerprint;
  } else {
    clear_has_fingerprint();
    fingerprint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// required bytes public_key = 2;
inline bool AuthorityKeys_Key::has_public_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuthorityKeys_Key::set_has_public_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuthorityKeys_Key::clear_has_public_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuthorityKeys_Key::clear_public_key() {
  if (public_key_ != &::google::protobuf::internal::GetEmptyString()) {
    public_key_->clear();
  }
  clear_has_public_key();
}
inline const ::std::string& AuthorityKeys_Key::public_key() const {
  return *public_key_;
}
inline void AuthorityKeys_Key::set_public_key(const ::std::string& value) {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::GetEmptyString()) {
    public_key_ = new ::std::string;
  }
  public_key_->assign(value);
}
inline void AuthorityKeys_Key::set_public_key(const char* value) {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::GetEmptyString()) {
    public_key_ = new ::std::string;
  }
  public_key_->assign(value);
}
inline void AuthorityKeys_Key::set_public_key(const void* value, size_t size) {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::GetEmptyString()) {
    public_key_ = new ::std::string;
  }
  public_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AuthorityKeys_Key::mutable_public_key() {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::GetEmptyString()) {
    public_key_ = new ::std::string;
  }
  return public_key_;
}
inline ::std::string* AuthorityKeys_Key::release_public_key() {
  clear_has_public_key();
  if (public_key_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = public_key_;
    public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void AuthorityKeys_Key::set_allocated_public_key(::std::string* public_key) {
  if (public_key_ != &::google::protobuf::internal::GetEmptyString()) {
    delete public_key_;
  }
  if (public_key) {
    set_has_public_key();
    public_key_ = public_key;
  } else {
    clear_has_public_key();
    public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// AuthorityKeys

// repeated .extensions.api.cast_channel.proto.AuthorityKeys.Key keys = 1;
inline int AuthorityKeys::keys_size() const {
  return keys_.size();
}
inline void AuthorityKeys::clear_keys() {
  keys_.Clear();
}
inline const ::extensions::api::cast_channel::proto::AuthorityKeys_Key& AuthorityKeys::keys(int index) const {
  return keys_.Get(index);
}
inline ::extensions::api::cast_channel::proto::AuthorityKeys_Key* AuthorityKeys::mutable_keys(int index) {
  return keys_.Mutable(index);
}
inline ::extensions::api::cast_channel::proto::AuthorityKeys_Key* AuthorityKeys::add_keys() {
  return keys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::extensions::api::cast_channel::proto::AuthorityKeys_Key >&
AuthorityKeys::keys() const {
  return keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::extensions::api::cast_channel::proto::AuthorityKeys_Key >*
AuthorityKeys::mutable_keys() {
  return &keys_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cast_channel
}  // namespace api
}  // namespace extensions

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_authority_5fkeys_2eproto__INCLUDED
