// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: disk_cache_proto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "disk_cache_proto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_disk_5fcache_5fproto_2eproto() {
  delete ShaderVariableProto::default_instance_;
  delete ShaderAttributeProto::default_instance_;
  delete ShaderUniformProto::default_instance_;
  delete ShaderVaryingProto::default_instance_;
  delete ShaderOutputVariableProto::default_instance_;
  delete ShaderProto::default_instance_;
  delete GpuProgramProto::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_disk_5fcache_5fproto_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_disk_5fcache_5fproto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ShaderVariableProto::default_instance_ = new ShaderVariableProto();
  ShaderAttributeProto::default_instance_ = new ShaderAttributeProto();
  ShaderUniformProto::default_instance_ = new ShaderUniformProto();
  ShaderVaryingProto::default_instance_ = new ShaderVaryingProto();
  ShaderOutputVariableProto::default_instance_ = new ShaderOutputVariableProto();
  ShaderProto::default_instance_ = new ShaderProto();
  GpuProgramProto::default_instance_ = new GpuProgramProto();
  ShaderVariableProto::default_instance_->InitAsDefaultInstance();
  ShaderAttributeProto::default_instance_->InitAsDefaultInstance();
  ShaderUniformProto::default_instance_->InitAsDefaultInstance();
  ShaderVaryingProto::default_instance_->InitAsDefaultInstance();
  ShaderOutputVariableProto::default_instance_->InitAsDefaultInstance();
  ShaderProto::default_instance_->InitAsDefaultInstance();
  GpuProgramProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_disk_5fcache_5fproto_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_disk_5fcache_5fproto_2eproto_once_);
void protobuf_AddDesc_disk_5fcache_5fproto_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_disk_5fcache_5fproto_2eproto_once_,
                 &protobuf_AddDesc_disk_5fcache_5fproto_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_disk_5fcache_5fproto_2eproto {
  StaticDescriptorInitializer_disk_5fcache_5fproto_2eproto() {
    protobuf_AddDesc_disk_5fcache_5fproto_2eproto();
  }
} static_descriptor_initializer_disk_5fcache_5fproto_2eproto_;
#endif

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShaderVariableProto::kTypeFieldNumber;
const int ShaderVariableProto::kPrecisionFieldNumber;
const int ShaderVariableProto::kNameFieldNumber;
const int ShaderVariableProto::kMappedNameFieldNumber;
const int ShaderVariableProto::kArraySizeFieldNumber;
const int ShaderVariableProto::kStaticUseFieldNumber;
const int ShaderVariableProto::kFieldsFieldNumber;
const int ShaderVariableProto::kStructNameFieldNumber;
#endif  // !_MSC_VER

ShaderVariableProto::ShaderVariableProto()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ShaderVariableProto::InitAsDefaultInstance() {
}

ShaderVariableProto::ShaderVariableProto(const ShaderVariableProto& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ShaderVariableProto::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  precision_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  mapped_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  array_size_ = 0u;
  static_use_ = false;
  struct_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShaderVariableProto::~ShaderVariableProto() {
  SharedDtor();
}

void ShaderVariableProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (mapped_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete mapped_name_;
  }
  if (struct_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete struct_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShaderVariableProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShaderVariableProto& ShaderVariableProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_disk_5fcache_5fproto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_disk_5fcache_5fproto_2eproto();
#endif
  return *default_instance_;
}

ShaderVariableProto* ShaderVariableProto::default_instance_ = NULL;

ShaderVariableProto* ShaderVariableProto::New() const {
  return new ShaderVariableProto;
}

void ShaderVariableProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    precision_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
    if (has_mapped_name()) {
      if (mapped_name_ != &::google::protobuf::internal::GetEmptyString()) {
        mapped_name_->clear();
      }
    }
    array_size_ = 0u;
    static_use_ = false;
    if (has_struct_name()) {
      if (struct_name_ != &::google::protobuf::internal::GetEmptyString()) {
        struct_name_->clear();
      }
    }
  }
  fields_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ShaderVariableProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_precision;
        break;
      }

      // optional uint32 precision = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_precision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &precision_)));
          set_has_precision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mapped_name;
        break;
      }

      // optional string mapped_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mapped_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mapped_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_array_size;
        break;
      }

      // optional uint32 array_size = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_array_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &array_size_)));
          set_has_array_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_static_use;
        break;
      }

      // optional bool static_use = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_static_use:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &static_use_)));
          set_has_static_use();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fields;
        break;
      }

      // repeated .ShaderVariableProto fields = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fields()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fields;
        if (input->ExpectTag(66)) goto parse_struct_name;
        break;
      }

      // optional string struct_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_struct_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_struct_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShaderVariableProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 precision = 2;
  if (has_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->precision(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional string mapped_name = 4;
  if (has_mapped_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->mapped_name(), output);
  }

  // optional uint32 array_size = 5;
  if (has_array_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->array_size(), output);
  }

  // optional bool static_use = 6;
  if (has_static_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->static_use(), output);
  }

  // repeated .ShaderVariableProto fields = 7;
  for (int i = 0; i < this->fields_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->fields(i), output);
  }

  // optional string struct_name = 8;
  if (has_struct_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->struct_name(), output);
  }

}

int ShaderVariableProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 precision = 2;
    if (has_precision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->precision());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string mapped_name = 4;
    if (has_mapped_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mapped_name());
    }

    // optional uint32 array_size = 5;
    if (has_array_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->array_size());
    }

    // optional bool static_use = 6;
    if (has_static_use()) {
      total_size += 1 + 1;
    }

    // optional string struct_name = 8;
    if (has_struct_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->struct_name());
    }

  }
  // repeated .ShaderVariableProto fields = 7;
  total_size += 1 * this->fields_size();
  for (int i = 0; i < this->fields_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fields(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShaderVariableProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShaderVariableProto*>(&from));
}

void ShaderVariableProto::MergeFrom(const ShaderVariableProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  fields_.MergeFrom(from.fields_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_precision()) {
      set_precision(from.precision());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_mapped_name()) {
      set_mapped_name(from.mapped_name());
    }
    if (from.has_array_size()) {
      set_array_size(from.array_size());
    }
    if (from.has_static_use()) {
      set_static_use(from.static_use());
    }
    if (from.has_struct_name()) {
      set_struct_name(from.struct_name());
    }
  }
}

void ShaderVariableProto::CopyFrom(const ShaderVariableProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShaderVariableProto::IsInitialized() const {

  return true;
}

void ShaderVariableProto::Swap(ShaderVariableProto* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(precision_, other->precision_);
    std::swap(name_, other->name_);
    std::swap(mapped_name_, other->mapped_name_);
    std::swap(array_size_, other->array_size_);
    std::swap(static_use_, other->static_use_);
    fields_.Swap(&other->fields_);
    std::swap(struct_name_, other->struct_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShaderVariableProto::GetTypeName() const {
  return "ShaderVariableProto";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShaderAttributeProto::kBasicFieldNumber;
const int ShaderAttributeProto::kLocationFieldNumber;
#endif  // !_MSC_VER

ShaderAttributeProto::ShaderAttributeProto()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ShaderAttributeProto::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  basic_ = const_cast< ::ShaderVariableProto*>(
      ::ShaderVariableProto::internal_default_instance());
#else
  basic_ = const_cast< ::ShaderVariableProto*>(&::ShaderVariableProto::default_instance());
#endif
}

ShaderAttributeProto::ShaderAttributeProto(const ShaderAttributeProto& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ShaderAttributeProto::SharedCtor() {
  _cached_size_ = 0;
  basic_ = NULL;
  location_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShaderAttributeProto::~ShaderAttributeProto() {
  SharedDtor();
}

void ShaderAttributeProto::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete basic_;
  }
}

void ShaderAttributeProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShaderAttributeProto& ShaderAttributeProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_disk_5fcache_5fproto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_disk_5fcache_5fproto_2eproto();
#endif
  return *default_instance_;
}

ShaderAttributeProto* ShaderAttributeProto::default_instance_ = NULL;

ShaderAttributeProto* ShaderAttributeProto::New() const {
  return new ShaderAttributeProto;
}

void ShaderAttributeProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_basic()) {
      if (basic_ != NULL) basic_->::ShaderVariableProto::Clear();
    }
    location_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ShaderAttributeProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ShaderVariableProto basic = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_location;
        break;
      }

      // optional int32 location = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_location:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &location_)));
          set_has_location();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShaderAttributeProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ShaderVariableProto basic = 1;
  if (has_basic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->basic(), output);
  }

  // optional int32 location = 2;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->location(), output);
  }

}

int ShaderAttributeProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ShaderVariableProto basic = 1;
    if (has_basic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basic());
    }

    // optional int32 location = 2;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->location());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShaderAttributeProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShaderAttributeProto*>(&from));
}

void ShaderAttributeProto::MergeFrom(const ShaderAttributeProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_basic()) {
      mutable_basic()->::ShaderVariableProto::MergeFrom(from.basic());
    }
    if (from.has_location()) {
      set_location(from.location());
    }
  }
}

void ShaderAttributeProto::CopyFrom(const ShaderAttributeProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShaderAttributeProto::IsInitialized() const {

  return true;
}

void ShaderAttributeProto::Swap(ShaderAttributeProto* other) {
  if (other != this) {
    std::swap(basic_, other->basic_);
    std::swap(location_, other->location_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShaderAttributeProto::GetTypeName() const {
  return "ShaderAttributeProto";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShaderUniformProto::kBasicFieldNumber;
#endif  // !_MSC_VER

ShaderUniformProto::ShaderUniformProto()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ShaderUniformProto::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  basic_ = const_cast< ::ShaderVariableProto*>(
      ::ShaderVariableProto::internal_default_instance());
#else
  basic_ = const_cast< ::ShaderVariableProto*>(&::ShaderVariableProto::default_instance());
#endif
}

ShaderUniformProto::ShaderUniformProto(const ShaderUniformProto& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ShaderUniformProto::SharedCtor() {
  _cached_size_ = 0;
  basic_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShaderUniformProto::~ShaderUniformProto() {
  SharedDtor();
}

void ShaderUniformProto::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete basic_;
  }
}

void ShaderUniformProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShaderUniformProto& ShaderUniformProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_disk_5fcache_5fproto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_disk_5fcache_5fproto_2eproto();
#endif
  return *default_instance_;
}

ShaderUniformProto* ShaderUniformProto::default_instance_ = NULL;

ShaderUniformProto* ShaderUniformProto::New() const {
  return new ShaderUniformProto;
}

void ShaderUniformProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_basic()) {
      if (basic_ != NULL) basic_->::ShaderVariableProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ShaderUniformProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ShaderVariableProto basic = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShaderUniformProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ShaderVariableProto basic = 1;
  if (has_basic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->basic(), output);
  }

}

int ShaderUniformProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ShaderVariableProto basic = 1;
    if (has_basic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basic());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShaderUniformProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShaderUniformProto*>(&from));
}

void ShaderUniformProto::MergeFrom(const ShaderUniformProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_basic()) {
      mutable_basic()->::ShaderVariableProto::MergeFrom(from.basic());
    }
  }
}

void ShaderUniformProto::CopyFrom(const ShaderUniformProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShaderUniformProto::IsInitialized() const {

  return true;
}

void ShaderUniformProto::Swap(ShaderUniformProto* other) {
  if (other != this) {
    std::swap(basic_, other->basic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShaderUniformProto::GetTypeName() const {
  return "ShaderUniformProto";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShaderVaryingProto::kBasicFieldNumber;
const int ShaderVaryingProto::kInterpolationFieldNumber;
const int ShaderVaryingProto::kIsInvariantFieldNumber;
#endif  // !_MSC_VER

ShaderVaryingProto::ShaderVaryingProto()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ShaderVaryingProto::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  basic_ = const_cast< ::ShaderVariableProto*>(
      ::ShaderVariableProto::internal_default_instance());
#else
  basic_ = const_cast< ::ShaderVariableProto*>(&::ShaderVariableProto::default_instance());
#endif
}

ShaderVaryingProto::ShaderVaryingProto(const ShaderVaryingProto& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ShaderVaryingProto::SharedCtor() {
  _cached_size_ = 0;
  basic_ = NULL;
  interpolation_ = 0;
  is_invariant_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShaderVaryingProto::~ShaderVaryingProto() {
  SharedDtor();
}

void ShaderVaryingProto::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete basic_;
  }
}

void ShaderVaryingProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShaderVaryingProto& ShaderVaryingProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_disk_5fcache_5fproto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_disk_5fcache_5fproto_2eproto();
#endif
  return *default_instance_;
}

ShaderVaryingProto* ShaderVaryingProto::default_instance_ = NULL;

ShaderVaryingProto* ShaderVaryingProto::New() const {
  return new ShaderVaryingProto;
}

void ShaderVaryingProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_basic()) {
      if (basic_ != NULL) basic_->::ShaderVariableProto::Clear();
    }
    interpolation_ = 0;
    is_invariant_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ShaderVaryingProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ShaderVariableProto basic = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_interpolation;
        break;
      }

      // optional int32 interpolation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interpolation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interpolation_)));
          set_has_interpolation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_invariant;
        break;
      }

      // optional bool is_invariant = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_invariant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_invariant_)));
          set_has_is_invariant();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShaderVaryingProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ShaderVariableProto basic = 1;
  if (has_basic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->basic(), output);
  }

  // optional int32 interpolation = 2;
  if (has_interpolation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->interpolation(), output);
  }

  // optional bool is_invariant = 3;
  if (has_is_invariant()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_invariant(), output);
  }

}

int ShaderVaryingProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ShaderVariableProto basic = 1;
    if (has_basic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basic());
    }

    // optional int32 interpolation = 2;
    if (has_interpolation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->interpolation());
    }

    // optional bool is_invariant = 3;
    if (has_is_invariant()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShaderVaryingProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShaderVaryingProto*>(&from));
}

void ShaderVaryingProto::MergeFrom(const ShaderVaryingProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_basic()) {
      mutable_basic()->::ShaderVariableProto::MergeFrom(from.basic());
    }
    if (from.has_interpolation()) {
      set_interpolation(from.interpolation());
    }
    if (from.has_is_invariant()) {
      set_is_invariant(from.is_invariant());
    }
  }
}

void ShaderVaryingProto::CopyFrom(const ShaderVaryingProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShaderVaryingProto::IsInitialized() const {

  return true;
}

void ShaderVaryingProto::Swap(ShaderVaryingProto* other) {
  if (other != this) {
    std::swap(basic_, other->basic_);
    std::swap(interpolation_, other->interpolation_);
    std::swap(is_invariant_, other->is_invariant_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShaderVaryingProto::GetTypeName() const {
  return "ShaderVaryingProto";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShaderOutputVariableProto::kBasicFieldNumber;
const int ShaderOutputVariableProto::kLocationFieldNumber;
#endif  // !_MSC_VER

ShaderOutputVariableProto::ShaderOutputVariableProto()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ShaderOutputVariableProto::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  basic_ = const_cast< ::ShaderVariableProto*>(
      ::ShaderVariableProto::internal_default_instance());
#else
  basic_ = const_cast< ::ShaderVariableProto*>(&::ShaderVariableProto::default_instance());
#endif
}

ShaderOutputVariableProto::ShaderOutputVariableProto(const ShaderOutputVariableProto& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ShaderOutputVariableProto::SharedCtor() {
  _cached_size_ = 0;
  basic_ = NULL;
  location_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShaderOutputVariableProto::~ShaderOutputVariableProto() {
  SharedDtor();
}

void ShaderOutputVariableProto::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete basic_;
  }
}

void ShaderOutputVariableProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShaderOutputVariableProto& ShaderOutputVariableProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_disk_5fcache_5fproto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_disk_5fcache_5fproto_2eproto();
#endif
  return *default_instance_;
}

ShaderOutputVariableProto* ShaderOutputVariableProto::default_instance_ = NULL;

ShaderOutputVariableProto* ShaderOutputVariableProto::New() const {
  return new ShaderOutputVariableProto;
}

void ShaderOutputVariableProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_basic()) {
      if (basic_ != NULL) basic_->::ShaderVariableProto::Clear();
    }
    location_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ShaderOutputVariableProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ShaderVariableProto basic = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_location;
        break;
      }

      // optional int32 location = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_location:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &location_)));
          set_has_location();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShaderOutputVariableProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ShaderVariableProto basic = 1;
  if (has_basic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->basic(), output);
  }

  // optional int32 location = 2;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->location(), output);
  }

}

int ShaderOutputVariableProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ShaderVariableProto basic = 1;
    if (has_basic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basic());
    }

    // optional int32 location = 2;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->location());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShaderOutputVariableProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShaderOutputVariableProto*>(&from));
}

void ShaderOutputVariableProto::MergeFrom(const ShaderOutputVariableProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_basic()) {
      mutable_basic()->::ShaderVariableProto::MergeFrom(from.basic());
    }
    if (from.has_location()) {
      set_location(from.location());
    }
  }
}

void ShaderOutputVariableProto::CopyFrom(const ShaderOutputVariableProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShaderOutputVariableProto::IsInitialized() const {

  return true;
}

void ShaderOutputVariableProto::Swap(ShaderOutputVariableProto* other) {
  if (other != this) {
    std::swap(basic_, other->basic_);
    std::swap(location_, other->location_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShaderOutputVariableProto::GetTypeName() const {
  return "ShaderOutputVariableProto";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShaderProto::kShaFieldNumber;
const int ShaderProto::kAttribsFieldNumber;
const int ShaderProto::kUniformsFieldNumber;
const int ShaderProto::kVaryingsFieldNumber;
const int ShaderProto::kOutputVariablesFieldNumber;
#endif  // !_MSC_VER

ShaderProto::ShaderProto()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ShaderProto::InitAsDefaultInstance() {
}

ShaderProto::ShaderProto(const ShaderProto& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ShaderProto::SharedCtor() {
  _cached_size_ = 0;
  sha_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShaderProto::~ShaderProto() {
  SharedDtor();
}

void ShaderProto::SharedDtor() {
  if (sha_ != &::google::protobuf::internal::GetEmptyString()) {
    delete sha_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShaderProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShaderProto& ShaderProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_disk_5fcache_5fproto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_disk_5fcache_5fproto_2eproto();
#endif
  return *default_instance_;
}

ShaderProto* ShaderProto::default_instance_ = NULL;

ShaderProto* ShaderProto::New() const {
  return new ShaderProto;
}

void ShaderProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sha()) {
      if (sha_ != &::google::protobuf::internal::GetEmptyString()) {
        sha_->clear();
      }
    }
  }
  attribs_.Clear();
  uniforms_.Clear();
  varyings_.Clear();
  output_variables_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ShaderProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes sha = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attribs;
        break;
      }

      // repeated .ShaderAttributeProto attribs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attribs;
        if (input->ExpectTag(26)) goto parse_uniforms;
        break;
      }

      // repeated .ShaderUniformProto uniforms = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uniforms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_uniforms()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_uniforms;
        if (input->ExpectTag(34)) goto parse_varyings;
        break;
      }

      // repeated .ShaderVaryingProto varyings = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_varyings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_varyings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_varyings;
        if (input->ExpectTag(42)) goto parse_output_variables;
        break;
      }

      // repeated .ShaderOutputVariableProto output_variables = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_output_variables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_output_variables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_output_variables;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShaderProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes sha = 1;
  if (has_sha()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->sha(), output);
  }

  // repeated .ShaderAttributeProto attribs = 2;
  for (int i = 0; i < this->attribs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->attribs(i), output);
  }

  // repeated .ShaderUniformProto uniforms = 3;
  for (int i = 0; i < this->uniforms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->uniforms(i), output);
  }

  // repeated .ShaderVaryingProto varyings = 4;
  for (int i = 0; i < this->varyings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->varyings(i), output);
  }

  // repeated .ShaderOutputVariableProto output_variables = 5;
  for (int i = 0; i < this->output_variables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->output_variables(i), output);
  }

}

int ShaderProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes sha = 1;
    if (has_sha()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha());
    }

  }
  // repeated .ShaderAttributeProto attribs = 2;
  total_size += 1 * this->attribs_size();
  for (int i = 0; i < this->attribs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribs(i));
  }

  // repeated .ShaderUniformProto uniforms = 3;
  total_size += 1 * this->uniforms_size();
  for (int i = 0; i < this->uniforms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->uniforms(i));
  }

  // repeated .ShaderVaryingProto varyings = 4;
  total_size += 1 * this->varyings_size();
  for (int i = 0; i < this->varyings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->varyings(i));
  }

  // repeated .ShaderOutputVariableProto output_variables = 5;
  total_size += 1 * this->output_variables_size();
  for (int i = 0; i < this->output_variables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->output_variables(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShaderProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShaderProto*>(&from));
}

void ShaderProto::MergeFrom(const ShaderProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribs_.MergeFrom(from.attribs_);
  uniforms_.MergeFrom(from.uniforms_);
  varyings_.MergeFrom(from.varyings_);
  output_variables_.MergeFrom(from.output_variables_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sha()) {
      set_sha(from.sha());
    }
  }
}

void ShaderProto::CopyFrom(const ShaderProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShaderProto::IsInitialized() const {

  return true;
}

void ShaderProto::Swap(ShaderProto* other) {
  if (other != this) {
    std::swap(sha_, other->sha_);
    attribs_.Swap(&other->attribs_);
    uniforms_.Swap(&other->uniforms_);
    varyings_.Swap(&other->varyings_);
    output_variables_.Swap(&other->output_variables_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShaderProto::GetTypeName() const {
  return "ShaderProto";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GpuProgramProto::kShaFieldNumber;
const int GpuProgramProto::kFormatFieldNumber;
const int GpuProgramProto::kProgramFieldNumber;
const int GpuProgramProto::kVertexShaderFieldNumber;
const int GpuProgramProto::kFragmentShaderFieldNumber;
#endif  // !_MSC_VER

GpuProgramProto::GpuProgramProto()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GpuProgramProto::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  vertex_shader_ = const_cast< ::ShaderProto*>(
      ::ShaderProto::internal_default_instance());
#else
  vertex_shader_ = const_cast< ::ShaderProto*>(&::ShaderProto::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fragment_shader_ = const_cast< ::ShaderProto*>(
      ::ShaderProto::internal_default_instance());
#else
  fragment_shader_ = const_cast< ::ShaderProto*>(&::ShaderProto::default_instance());
#endif
}

GpuProgramProto::GpuProgramProto(const GpuProgramProto& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GpuProgramProto::SharedCtor() {
  _cached_size_ = 0;
  sha_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  format_ = 0u;
  program_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  vertex_shader_ = NULL;
  fragment_shader_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GpuProgramProto::~GpuProgramProto() {
  SharedDtor();
}

void GpuProgramProto::SharedDtor() {
  if (sha_ != &::google::protobuf::internal::GetEmptyString()) {
    delete sha_;
  }
  if (program_ != &::google::protobuf::internal::GetEmptyString()) {
    delete program_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete vertex_shader_;
    delete fragment_shader_;
  }
}

void GpuProgramProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GpuProgramProto& GpuProgramProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_disk_5fcache_5fproto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_disk_5fcache_5fproto_2eproto();
#endif
  return *default_instance_;
}

GpuProgramProto* GpuProgramProto::default_instance_ = NULL;

GpuProgramProto* GpuProgramProto::New() const {
  return new GpuProgramProto;
}

void GpuProgramProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sha()) {
      if (sha_ != &::google::protobuf::internal::GetEmptyString()) {
        sha_->clear();
      }
    }
    format_ = 0u;
    if (has_program()) {
      if (program_ != &::google::protobuf::internal::GetEmptyString()) {
        program_->clear();
      }
    }
    if (has_vertex_shader()) {
      if (vertex_shader_ != NULL) vertex_shader_->::ShaderProto::Clear();
    }
    if (has_fragment_shader()) {
      if (fragment_shader_ != NULL) fragment_shader_->::ShaderProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GpuProgramProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes sha = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_format;
        break;
      }

      // optional uint32 format = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_format:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &format_)));
          set_has_format();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_program;
        break;
      }

      // optional bytes program = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_program:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_program()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_vertex_shader;
        break;
      }

      // optional .ShaderProto vertex_shader = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vertex_shader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vertex_shader()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_fragment_shader;
        break;
      }

      // optional .ShaderProto fragment_shader = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fragment_shader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fragment_shader()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GpuProgramProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes sha = 1;
  if (has_sha()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->sha(), output);
  }

  // optional uint32 format = 2;
  if (has_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->format(), output);
  }

  // optional bytes program = 3;
  if (has_program()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->program(), output);
  }

  // optional .ShaderProto vertex_shader = 4;
  if (has_vertex_shader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->vertex_shader(), output);
  }

  // optional .ShaderProto fragment_shader = 5;
  if (has_fragment_shader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->fragment_shader(), output);
  }

}

int GpuProgramProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes sha = 1;
    if (has_sha()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha());
    }

    // optional uint32 format = 2;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->format());
    }

    // optional bytes program = 3;
    if (has_program()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->program());
    }

    // optional .ShaderProto vertex_shader = 4;
    if (has_vertex_shader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vertex_shader());
    }

    // optional .ShaderProto fragment_shader = 5;
    if (has_fragment_shader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fragment_shader());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GpuProgramProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GpuProgramProto*>(&from));
}

void GpuProgramProto::MergeFrom(const GpuProgramProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sha()) {
      set_sha(from.sha());
    }
    if (from.has_format()) {
      set_format(from.format());
    }
    if (from.has_program()) {
      set_program(from.program());
    }
    if (from.has_vertex_shader()) {
      mutable_vertex_shader()->::ShaderProto::MergeFrom(from.vertex_shader());
    }
    if (from.has_fragment_shader()) {
      mutable_fragment_shader()->::ShaderProto::MergeFrom(from.fragment_shader());
    }
  }
}

void GpuProgramProto::CopyFrom(const GpuProgramProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpuProgramProto::IsInitialized() const {

  return true;
}

void GpuProgramProto::Swap(GpuProgramProto* other) {
  if (other != this) {
    std::swap(sha_, other->sha_);
    std::swap(format_, other->format_);
    std::swap(program_, other->program_);
    std::swap(vertex_shader_, other->vertex_shader_);
    std::swap(fragment_shader_, other->fragment_shader_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GpuProgramProto::GetTypeName() const {
  return "GpuProgramProto";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
