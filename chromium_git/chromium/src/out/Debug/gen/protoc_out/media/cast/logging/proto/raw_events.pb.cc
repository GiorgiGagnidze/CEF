// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raw_events.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "raw_events.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace media {
namespace cast {
namespace proto {

void protobuf_ShutdownFile_raw_5fevents_2eproto() {
  delete GeneralDescription::default_instance_;
  delete LogMetadata::default_instance_;
  delete AggregatedFrameEvent::default_instance_;
  delete BasePacketEvent::default_instance_;
  delete AggregatedPacketEvent::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_raw_5fevents_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_raw_5fevents_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  GeneralDescription::default_instance_ = new GeneralDescription();
  LogMetadata::default_instance_ = new LogMetadata();
  AggregatedFrameEvent::default_instance_ = new AggregatedFrameEvent();
  BasePacketEvent::default_instance_ = new BasePacketEvent();
  AggregatedPacketEvent::default_instance_ = new AggregatedPacketEvent();
  GeneralDescription::default_instance_->InitAsDefaultInstance();
  LogMetadata::default_instance_->InitAsDefaultInstance();
  AggregatedFrameEvent::default_instance_->InitAsDefaultInstance();
  BasePacketEvent::default_instance_->InitAsDefaultInstance();
  AggregatedPacketEvent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_raw_5fevents_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_raw_5fevents_2eproto_once_);
void protobuf_AddDesc_raw_5fevents_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_raw_5fevents_2eproto_once_,
                 &protobuf_AddDesc_raw_5fevents_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_raw_5fevents_2eproto {
  StaticDescriptorInitializer_raw_5fevents_2eproto() {
    protobuf_AddDesc_raw_5fevents_2eproto();
  }
} static_descriptor_initializer_raw_5fevents_2eproto_;
#endif
bool EventType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeneralDescription::kProductFieldNumber;
const int GeneralDescription::kProductVersionFieldNumber;
const int GeneralDescription::kOsFieldNumber;
#endif  // !_MSC_VER

GeneralDescription::GeneralDescription()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GeneralDescription::InitAsDefaultInstance() {
}

GeneralDescription::GeneralDescription(const GeneralDescription& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GeneralDescription::SharedCtor() {
  _cached_size_ = 0;
  product_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  product_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  os_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GeneralDescription::~GeneralDescription() {
  SharedDtor();
}

void GeneralDescription::SharedDtor() {
  if (product_ != &::google::protobuf::internal::GetEmptyString()) {
    delete product_;
  }
  if (product_version_ != &::google::protobuf::internal::GetEmptyString()) {
    delete product_version_;
  }
  if (os_ != &::google::protobuf::internal::GetEmptyString()) {
    delete os_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GeneralDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GeneralDescription& GeneralDescription::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_raw_5fevents_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_raw_5fevents_2eproto();
#endif
  return *default_instance_;
}

GeneralDescription* GeneralDescription::default_instance_ = NULL;

GeneralDescription* GeneralDescription::New() const {
  return new GeneralDescription;
}

void GeneralDescription::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_product()) {
      if (product_ != &::google::protobuf::internal::GetEmptyString()) {
        product_->clear();
      }
    }
    if (has_product_version()) {
      if (product_version_ != &::google::protobuf::internal::GetEmptyString()) {
        product_version_->clear();
      }
    }
    if (has_os()) {
      if (os_ != &::google::protobuf::internal::GetEmptyString()) {
        os_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GeneralDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string product = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_product_version;
        break;
      }

      // optional string product_version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_product_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_os;
        break;
      }

      // optional string os = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GeneralDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string product = 1;
  if (has_product()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->product(), output);
  }

  // optional string product_version = 2;
  if (has_product_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->product_version(), output);
  }

  // optional string os = 3;
  if (has_os()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->os(), output);
  }

}

int GeneralDescription::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string product = 1;
    if (has_product()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->product());
    }

    // optional string product_version = 2;
    if (has_product_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->product_version());
    }

    // optional string os = 3;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeneralDescription::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GeneralDescription*>(&from));
}

void GeneralDescription::MergeFrom(const GeneralDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_product()) {
      set_product(from.product());
    }
    if (from.has_product_version()) {
      set_product_version(from.product_version());
    }
    if (from.has_os()) {
      set_os(from.os());
    }
  }
}

void GeneralDescription::CopyFrom(const GeneralDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeneralDescription::IsInitialized() const {

  return true;
}

void GeneralDescription::Swap(GeneralDescription* other) {
  if (other != this) {
    std::swap(product_, other->product_);
    std::swap(product_version_, other->product_version_);
    std::swap(os_, other->os_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GeneralDescription::GetTypeName() const {
  return "media.cast.proto.GeneralDescription";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogMetadata::kIsAudioFieldNumber;
const int LogMetadata::kFirstRtpTimestampFieldNumber;
const int LogMetadata::kNumFrameEventsFieldNumber;
const int LogMetadata::kNumPacketEventsFieldNumber;
const int LogMetadata::kReferenceTimestampMsAtUnixEpochFieldNumber;
const int LogMetadata::kExtraDataFieldNumber;
const int LogMetadata::kGeneralDescriptionFieldNumber;
#endif  // !_MSC_VER

LogMetadata::LogMetadata()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LogMetadata::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  general_description_ = const_cast< ::media::cast::proto::GeneralDescription*>(
      ::media::cast::proto::GeneralDescription::internal_default_instance());
#else
  general_description_ = const_cast< ::media::cast::proto::GeneralDescription*>(&::media::cast::proto::GeneralDescription::default_instance());
#endif
}

LogMetadata::LogMetadata(const LogMetadata& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LogMetadata::SharedCtor() {
  _cached_size_ = 0;
  is_audio_ = false;
  first_rtp_timestamp_ = 0u;
  num_frame_events_ = 0;
  num_packet_events_ = 0;
  reference_timestamp_ms_at_unix_epoch_ = GOOGLE_LONGLONG(0);
  extra_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  general_description_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogMetadata::~LogMetadata() {
  SharedDtor();
}

void LogMetadata::SharedDtor() {
  if (extra_data_ != &::google::protobuf::internal::GetEmptyString()) {
    delete extra_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete general_description_;
  }
}

void LogMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LogMetadata& LogMetadata::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_raw_5fevents_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_raw_5fevents_2eproto();
#endif
  return *default_instance_;
}

LogMetadata* LogMetadata::default_instance_ = NULL;

LogMetadata* LogMetadata::New() const {
  return new LogMetadata;
}

void LogMetadata::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_audio_ = false;
    first_rtp_timestamp_ = 0u;
    num_frame_events_ = 0;
    num_packet_events_ = 0;
    reference_timestamp_ms_at_unix_epoch_ = GOOGLE_LONGLONG(0);
    if (has_extra_data()) {
      if (extra_data_ != &::google::protobuf::internal::GetEmptyString()) {
        extra_data_->clear();
      }
    }
    if (has_general_description()) {
      if (general_description_ != NULL) general_description_->::media::cast::proto::GeneralDescription::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LogMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_audio = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_audio_)));
          set_has_is_audio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_first_rtp_timestamp;
        break;
      }

      // optional uint32 first_rtp_timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_rtp_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_rtp_timestamp_)));
          set_has_first_rtp_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num_frame_events;
        break;
      }

      // optional int32 num_frame_events = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_frame_events:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_frame_events_)));
          set_has_num_frame_events();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num_packet_events;
        break;
      }

      // optional int32 num_packet_events = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_packet_events:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_packet_events_)));
          set_has_num_packet_events();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_reference_timestamp_ms_at_unix_epoch;
        break;
      }

      // optional int64 reference_timestamp_ms_at_unix_epoch = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reference_timestamp_ms_at_unix_epoch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reference_timestamp_ms_at_unix_epoch_)));
          set_has_reference_timestamp_ms_at_unix_epoch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_extra_data;
        break;
      }

      // optional string extra_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extra_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extra_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_general_description;
        break;
      }

      // optional .media.cast.proto.GeneralDescription general_description = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_general_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_general_description()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool is_audio = 1;
  if (has_is_audio()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_audio(), output);
  }

  // optional uint32 first_rtp_timestamp = 2;
  if (has_first_rtp_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->first_rtp_timestamp(), output);
  }

  // optional int32 num_frame_events = 3;
  if (has_num_frame_events()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_frame_events(), output);
  }

  // optional int32 num_packet_events = 4;
  if (has_num_packet_events()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_packet_events(), output);
  }

  // optional int64 reference_timestamp_ms_at_unix_epoch = 5;
  if (has_reference_timestamp_ms_at_unix_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->reference_timestamp_ms_at_unix_epoch(), output);
  }

  // optional string extra_data = 6;
  if (has_extra_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->extra_data(), output);
  }

  // optional .media.cast.proto.GeneralDescription general_description = 7;
  if (has_general_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->general_description(), output);
  }

}

int LogMetadata::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_audio = 1;
    if (has_is_audio()) {
      total_size += 1 + 1;
    }

    // optional uint32 first_rtp_timestamp = 2;
    if (has_first_rtp_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first_rtp_timestamp());
    }

    // optional int32 num_frame_events = 3;
    if (has_num_frame_events()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_frame_events());
    }

    // optional int32 num_packet_events = 4;
    if (has_num_packet_events()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_packet_events());
    }

    // optional int64 reference_timestamp_ms_at_unix_epoch = 5;
    if (has_reference_timestamp_ms_at_unix_epoch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reference_timestamp_ms_at_unix_epoch());
    }

    // optional string extra_data = 6;
    if (has_extra_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extra_data());
    }

    // optional .media.cast.proto.GeneralDescription general_description = 7;
    if (has_general_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->general_description());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogMetadata::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LogMetadata*>(&from));
}

void LogMetadata::MergeFrom(const LogMetadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_audio()) {
      set_is_audio(from.is_audio());
    }
    if (from.has_first_rtp_timestamp()) {
      set_first_rtp_timestamp(from.first_rtp_timestamp());
    }
    if (from.has_num_frame_events()) {
      set_num_frame_events(from.num_frame_events());
    }
    if (from.has_num_packet_events()) {
      set_num_packet_events(from.num_packet_events());
    }
    if (from.has_reference_timestamp_ms_at_unix_epoch()) {
      set_reference_timestamp_ms_at_unix_epoch(from.reference_timestamp_ms_at_unix_epoch());
    }
    if (from.has_extra_data()) {
      set_extra_data(from.extra_data());
    }
    if (from.has_general_description()) {
      mutable_general_description()->::media::cast::proto::GeneralDescription::MergeFrom(from.general_description());
    }
  }
}

void LogMetadata::CopyFrom(const LogMetadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogMetadata::IsInitialized() const {

  return true;
}

void LogMetadata::Swap(LogMetadata* other) {
  if (other != this) {
    std::swap(is_audio_, other->is_audio_);
    std::swap(first_rtp_timestamp_, other->first_rtp_timestamp_);
    std::swap(num_frame_events_, other->num_frame_events_);
    std::swap(num_packet_events_, other->num_packet_events_);
    std::swap(reference_timestamp_ms_at_unix_epoch_, other->reference_timestamp_ms_at_unix_epoch_);
    std::swap(extra_data_, other->extra_data_);
    std::swap(general_description_, other->general_description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LogMetadata::GetTypeName() const {
  return "media.cast.proto.LogMetadata";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AggregatedFrameEvent::kRelativeRtpTimestampFieldNumber;
const int AggregatedFrameEvent::kEventTypeFieldNumber;
const int AggregatedFrameEvent::kEventTimestampMsFieldNumber;
const int AggregatedFrameEvent::kEncodedFrameSizeFieldNumber;
const int AggregatedFrameEvent::kDelayMillisFieldNumber;
const int AggregatedFrameEvent::kKeyFrameFieldNumber;
const int AggregatedFrameEvent::kTargetBitrateFieldNumber;
const int AggregatedFrameEvent::kWidthFieldNumber;
const int AggregatedFrameEvent::kHeightFieldNumber;
const int AggregatedFrameEvent::kEncoderCpuPercentUtilizedFieldNumber;
const int AggregatedFrameEvent::kIdealizedBitratePercentUtilizedFieldNumber;
#endif  // !_MSC_VER

AggregatedFrameEvent::AggregatedFrameEvent()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AggregatedFrameEvent::InitAsDefaultInstance() {
}

AggregatedFrameEvent::AggregatedFrameEvent(const AggregatedFrameEvent& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AggregatedFrameEvent::SharedCtor() {
  _cached_size_ = 0;
  relative_rtp_timestamp_ = 0u;
  encoded_frame_size_ = 0;
  delay_millis_ = GOOGLE_LONGLONG(0);
  key_frame_ = false;
  target_bitrate_ = 0;
  width_ = 0;
  height_ = 0;
  encoder_cpu_percent_utilized_ = 0;
  idealized_bitrate_percent_utilized_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AggregatedFrameEvent::~AggregatedFrameEvent() {
  SharedDtor();
}

void AggregatedFrameEvent::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AggregatedFrameEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AggregatedFrameEvent& AggregatedFrameEvent::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_raw_5fevents_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_raw_5fevents_2eproto();
#endif
  return *default_instance_;
}

AggregatedFrameEvent* AggregatedFrameEvent::default_instance_ = NULL;

AggregatedFrameEvent* AggregatedFrameEvent::New() const {
  return new AggregatedFrameEvent;
}

void AggregatedFrameEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    relative_rtp_timestamp_ = 0u;
    encoded_frame_size_ = 0;
    delay_millis_ = GOOGLE_LONGLONG(0);
    key_frame_ = false;
    target_bitrate_ = 0;
    width_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    height_ = 0;
    encoder_cpu_percent_utilized_ = 0;
    idealized_bitrate_percent_utilized_ = 0;
  }
  event_type_.Clear();
  event_timestamp_ms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool AggregatedFrameEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 relative_rtp_timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relative_rtp_timestamp_)));
          set_has_relative_rtp_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_event_type;
        break;
      }

      // repeated .media.cast.proto.EventType event_type = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_type:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::media::cast::proto::EventType_IsValid(value)) {
              add_event_type(static_cast< ::media::cast::proto::EventType >(value));
            }
          }
          input->PopLimit(limit);
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::media::cast::proto::EventType_IsValid(value)) {
            add_event_type(static_cast< ::media::cast::proto::EventType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_event_timestamp_ms;
        break;
      }

      // repeated int64 event_timestamp_ms = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_timestamp_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_event_timestamp_ms())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 26, input, this->mutable_event_timestamp_ms())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_encoded_frame_size;
        break;
      }

      // optional int32 encoded_frame_size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_encoded_frame_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &encoded_frame_size_)));
          set_has_encoded_frame_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_delay_millis;
        break;
      }

      // optional int64 delay_millis = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delay_millis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &delay_millis_)));
          set_has_delay_millis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_key_frame;
        break;
      }

      // optional bool key_frame = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &key_frame_)));
          set_has_key_frame();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_target_bitrate;
        break;
      }

      // optional int32 target_bitrate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_bitrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_bitrate_)));
          set_has_target_bitrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_width;
        break;
      }

      // optional int32 width = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_height;
        break;
      }

      // optional int32 height = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_encoder_cpu_percent_utilized;
        break;
      }

      // optional int32 encoder_cpu_percent_utilized = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_encoder_cpu_percent_utilized:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &encoder_cpu_percent_utilized_)));
          set_has_encoder_cpu_percent_utilized();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_idealized_bitrate_percent_utilized;
        break;
      }

      // optional int32 idealized_bitrate_percent_utilized = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_idealized_bitrate_percent_utilized:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idealized_bitrate_percent_utilized_)));
          set_has_idealized_bitrate_percent_utilized();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AggregatedFrameEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 relative_rtp_timestamp = 1;
  if (has_relative_rtp_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->relative_rtp_timestamp(), output);
  }

  // repeated .media.cast.proto.EventType event_type = 2 [packed = true];
  if (this->event_type_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_event_type_cached_byte_size_);
  }
  for (int i = 0; i < this->event_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->event_type(i), output);
  }

  // repeated int64 event_timestamp_ms = 3 [packed = true];
  if (this->event_timestamp_ms_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_event_timestamp_ms_cached_byte_size_);
  }
  for (int i = 0; i < this->event_timestamp_ms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->event_timestamp_ms(i), output);
  }

  // optional int32 encoded_frame_size = 4;
  if (has_encoded_frame_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->encoded_frame_size(), output);
  }

  // optional int64 delay_millis = 5;
  if (has_delay_millis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->delay_millis(), output);
  }

  // optional bool key_frame = 6;
  if (has_key_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->key_frame(), output);
  }

  // optional int32 target_bitrate = 7;
  if (has_target_bitrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->target_bitrate(), output);
  }

  // optional int32 width = 8;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->width(), output);
  }

  // optional int32 height = 9;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->height(), output);
  }

  // optional int32 encoder_cpu_percent_utilized = 10;
  if (has_encoder_cpu_percent_utilized()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->encoder_cpu_percent_utilized(), output);
  }

  // optional int32 idealized_bitrate_percent_utilized = 11;
  if (has_idealized_bitrate_percent_utilized()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->idealized_bitrate_percent_utilized(), output);
  }

}

int AggregatedFrameEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 relative_rtp_timestamp = 1;
    if (has_relative_rtp_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relative_rtp_timestamp());
    }

    // optional int32 encoded_frame_size = 4;
    if (has_encoded_frame_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->encoded_frame_size());
    }

    // optional int64 delay_millis = 5;
    if (has_delay_millis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->delay_millis());
    }

    // optional bool key_frame = 6;
    if (has_key_frame()) {
      total_size += 1 + 1;
    }

    // optional int32 target_bitrate = 7;
    if (has_target_bitrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_bitrate());
    }

    // optional int32 width = 8;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 height = 9;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 encoder_cpu_percent_utilized = 10;
    if (has_encoder_cpu_percent_utilized()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->encoder_cpu_percent_utilized());
    }

    // optional int32 idealized_bitrate_percent_utilized = 11;
    if (has_idealized_bitrate_percent_utilized()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idealized_bitrate_percent_utilized());
    }

  }
  // repeated .media.cast.proto.EventType event_type = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->event_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->event_type(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _event_type_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int64 event_timestamp_ms = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->event_timestamp_ms_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->event_timestamp_ms(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _event_timestamp_ms_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AggregatedFrameEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AggregatedFrameEvent*>(&from));
}

void AggregatedFrameEvent::MergeFrom(const AggregatedFrameEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  event_type_.MergeFrom(from.event_type_);
  event_timestamp_ms_.MergeFrom(from.event_timestamp_ms_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_relative_rtp_timestamp()) {
      set_relative_rtp_timestamp(from.relative_rtp_timestamp());
    }
    if (from.has_encoded_frame_size()) {
      set_encoded_frame_size(from.encoded_frame_size());
    }
    if (from.has_delay_millis()) {
      set_delay_millis(from.delay_millis());
    }
    if (from.has_key_frame()) {
      set_key_frame(from.key_frame());
    }
    if (from.has_target_bitrate()) {
      set_target_bitrate(from.target_bitrate());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_encoder_cpu_percent_utilized()) {
      set_encoder_cpu_percent_utilized(from.encoder_cpu_percent_utilized());
    }
    if (from.has_idealized_bitrate_percent_utilized()) {
      set_idealized_bitrate_percent_utilized(from.idealized_bitrate_percent_utilized());
    }
  }
}

void AggregatedFrameEvent::CopyFrom(const AggregatedFrameEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregatedFrameEvent::IsInitialized() const {

  return true;
}

void AggregatedFrameEvent::Swap(AggregatedFrameEvent* other) {
  if (other != this) {
    std::swap(relative_rtp_timestamp_, other->relative_rtp_timestamp_);
    event_type_.Swap(&other->event_type_);
    event_timestamp_ms_.Swap(&other->event_timestamp_ms_);
    std::swap(encoded_frame_size_, other->encoded_frame_size_);
    std::swap(delay_millis_, other->delay_millis_);
    std::swap(key_frame_, other->key_frame_);
    std::swap(target_bitrate_, other->target_bitrate_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(encoder_cpu_percent_utilized_, other->encoder_cpu_percent_utilized_);
    std::swap(idealized_bitrate_percent_utilized_, other->idealized_bitrate_percent_utilized_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AggregatedFrameEvent::GetTypeName() const {
  return "media.cast.proto.AggregatedFrameEvent";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BasePacketEvent::kPacketIdFieldNumber;
const int BasePacketEvent::kEventTypeFieldNumber;
const int BasePacketEvent::kEventTimestampMsFieldNumber;
const int BasePacketEvent::kSizeFieldNumber;
#endif  // !_MSC_VER

BasePacketEvent::BasePacketEvent()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BasePacketEvent::InitAsDefaultInstance() {
}

BasePacketEvent::BasePacketEvent(const BasePacketEvent& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BasePacketEvent::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 0;
  size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BasePacketEvent::~BasePacketEvent() {
  SharedDtor();
}

void BasePacketEvent::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BasePacketEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BasePacketEvent& BasePacketEvent::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_raw_5fevents_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_raw_5fevents_2eproto();
#endif
  return *default_instance_;
}

BasePacketEvent* BasePacketEvent::default_instance_ = NULL;

BasePacketEvent* BasePacketEvent::New() const {
  return new BasePacketEvent;
}

void BasePacketEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 0;
    size_ = 0;
  }
  event_type_.Clear();
  event_timestamp_ms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BasePacketEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 packet_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packet_id_)));
          set_has_packet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_event_type;
        break;
      }

      // repeated .media.cast.proto.EventType event_type = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_type:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::media::cast::proto::EventType_IsValid(value)) {
              add_event_type(static_cast< ::media::cast::proto::EventType >(value));
            }
          }
          input->PopLimit(limit);
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::media::cast::proto::EventType_IsValid(value)) {
            add_event_type(static_cast< ::media::cast::proto::EventType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_event_timestamp_ms;
        break;
      }

      // repeated int64 event_timestamp_ms = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_timestamp_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_event_timestamp_ms())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 26, input, this->mutable_event_timestamp_ms())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_size;
        break;
      }

      // optional int32 size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BasePacketEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 packet_id = 1;
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->packet_id(), output);
  }

  // repeated .media.cast.proto.EventType event_type = 2 [packed = true];
  if (this->event_type_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_event_type_cached_byte_size_);
  }
  for (int i = 0; i < this->event_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->event_type(i), output);
  }

  // repeated int64 event_timestamp_ms = 3 [packed = true];
  if (this->event_timestamp_ms_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_event_timestamp_ms_cached_byte_size_);
  }
  for (int i = 0; i < this->event_timestamp_ms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->event_timestamp_ms(i), output);
  }

  // optional int32 size = 4;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->size(), output);
  }

}

int BasePacketEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 packet_id = 1;
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packet_id());
    }

    // optional int32 size = 4;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

  }
  // repeated .media.cast.proto.EventType event_type = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->event_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->event_type(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _event_type_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int64 event_timestamp_ms = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->event_timestamp_ms_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->event_timestamp_ms(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _event_timestamp_ms_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BasePacketEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BasePacketEvent*>(&from));
}

void BasePacketEvent::MergeFrom(const BasePacketEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  event_type_.MergeFrom(from.event_type_);
  event_timestamp_ms_.MergeFrom(from.event_timestamp_ms_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
}

void BasePacketEvent::CopyFrom(const BasePacketEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasePacketEvent::IsInitialized() const {

  return true;
}

void BasePacketEvent::Swap(BasePacketEvent* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    event_type_.Swap(&other->event_type_);
    event_timestamp_ms_.Swap(&other->event_timestamp_ms_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BasePacketEvent::GetTypeName() const {
  return "media.cast.proto.BasePacketEvent";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AggregatedPacketEvent::kRelativeRtpTimestampFieldNumber;
const int AggregatedPacketEvent::kBasePacketEventFieldNumber;
#endif  // !_MSC_VER

AggregatedPacketEvent::AggregatedPacketEvent()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AggregatedPacketEvent::InitAsDefaultInstance() {
}

AggregatedPacketEvent::AggregatedPacketEvent(const AggregatedPacketEvent& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AggregatedPacketEvent::SharedCtor() {
  _cached_size_ = 0;
  relative_rtp_timestamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AggregatedPacketEvent::~AggregatedPacketEvent() {
  SharedDtor();
}

void AggregatedPacketEvent::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AggregatedPacketEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AggregatedPacketEvent& AggregatedPacketEvent::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_raw_5fevents_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_raw_5fevents_2eproto();
#endif
  return *default_instance_;
}

AggregatedPacketEvent* AggregatedPacketEvent::default_instance_ = NULL;

AggregatedPacketEvent* AggregatedPacketEvent::New() const {
  return new AggregatedPacketEvent;
}

void AggregatedPacketEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    relative_rtp_timestamp_ = 0u;
  }
  base_packet_event_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool AggregatedPacketEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 relative_rtp_timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relative_rtp_timestamp_)));
          set_has_relative_rtp_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_base_packet_event;
        break;
      }

      // repeated .media.cast.proto.BasePacketEvent base_packet_event = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_packet_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_base_packet_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_base_packet_event;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AggregatedPacketEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 relative_rtp_timestamp = 1;
  if (has_relative_rtp_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->relative_rtp_timestamp(), output);
  }

  // repeated .media.cast.proto.BasePacketEvent base_packet_event = 2;
  for (int i = 0; i < this->base_packet_event_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->base_packet_event(i), output);
  }

}

int AggregatedPacketEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 relative_rtp_timestamp = 1;
    if (has_relative_rtp_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relative_rtp_timestamp());
    }

  }
  // repeated .media.cast.proto.BasePacketEvent base_packet_event = 2;
  total_size += 1 * this->base_packet_event_size();
  for (int i = 0; i < this->base_packet_event_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->base_packet_event(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AggregatedPacketEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AggregatedPacketEvent*>(&from));
}

void AggregatedPacketEvent::MergeFrom(const AggregatedPacketEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  base_packet_event_.MergeFrom(from.base_packet_event_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_relative_rtp_timestamp()) {
      set_relative_rtp_timestamp(from.relative_rtp_timestamp());
    }
  }
}

void AggregatedPacketEvent::CopyFrom(const AggregatedPacketEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregatedPacketEvent::IsInitialized() const {

  return true;
}

void AggregatedPacketEvent::Swap(AggregatedPacketEvent* other) {
  if (other != this) {
    std::swap(relative_rtp_timestamp_, other->relative_rtp_timestamp_);
    base_packet_event_.Swap(&other->base_packet_event_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AggregatedPacketEvent::GetTypeName() const {
  return "media.cast.proto.AggregatedPacketEvent";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cast
}  // namespace media

// @@protoc_insertion_point(global_scope)
