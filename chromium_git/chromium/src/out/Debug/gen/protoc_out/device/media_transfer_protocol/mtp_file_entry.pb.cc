// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtp_file_entry.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mtp_file_entry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_mtp_5ffile_5fentry_2eproto() {
  delete MtpFileEntry::default_instance_;
  delete MtpFileEntries::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_mtp_5ffile_5fentry_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_mtp_5ffile_5fentry_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  MtpFileEntry::default_instance_ = new MtpFileEntry();
  MtpFileEntries::default_instance_ = new MtpFileEntries();
  MtpFileEntry::default_instance_->InitAsDefaultInstance();
  MtpFileEntries::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mtp_5ffile_5fentry_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_mtp_5ffile_5fentry_2eproto_once_);
void protobuf_AddDesc_mtp_5ffile_5fentry_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_mtp_5ffile_5fentry_2eproto_once_,
                 &protobuf_AddDesc_mtp_5ffile_5fentry_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mtp_5ffile_5fentry_2eproto {
  StaticDescriptorInitializer_mtp_5ffile_5fentry_2eproto() {
    protobuf_AddDesc_mtp_5ffile_5fentry_2eproto();
  }
} static_descriptor_initializer_mtp_5ffile_5fentry_2eproto_;
#endif

// ===================================================================

bool MtpFileEntry_FileType_IsValid(int value) {
  switch(value) {
    case 0:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 25:
    case 40:
    case 41:
    case 44:
    case 9999:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MtpFileEntry_FileType MtpFileEntry::FILE_TYPE_FOLDER;
const MtpFileEntry_FileType MtpFileEntry::FILE_TYPE_JPEG;
const MtpFileEntry_FileType MtpFileEntry::FILE_TYPE_JFIF;
const MtpFileEntry_FileType MtpFileEntry::FILE_TYPE_TIFF;
const MtpFileEntry_FileType MtpFileEntry::FILE_TYPE_BMP;
const MtpFileEntry_FileType MtpFileEntry::FILE_TYPE_GIF;
const MtpFileEntry_FileType MtpFileEntry::FILE_TYPE_PICT;
const MtpFileEntry_FileType MtpFileEntry::FILE_TYPE_PNG;
const MtpFileEntry_FileType MtpFileEntry::FILE_TYPE_WINDOWSIMAGEFORMAT;
const MtpFileEntry_FileType MtpFileEntry::FILE_TYPE_JP2;
const MtpFileEntry_FileType MtpFileEntry::FILE_TYPE_JPX;
const MtpFileEntry_FileType MtpFileEntry::FILE_TYPE_UNKNOWN;
const MtpFileEntry_FileType MtpFileEntry::FILE_TYPE_OTHER;
const MtpFileEntry_FileType MtpFileEntry::FileType_MIN;
const MtpFileEntry_FileType MtpFileEntry::FileType_MAX;
const int MtpFileEntry::FileType_ARRAYSIZE;
#endif  // _MSC_VER
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MtpFileEntry::kItemIdFieldNumber;
const int MtpFileEntry::kParentIdFieldNumber;
const int MtpFileEntry::kFileNameFieldNumber;
const int MtpFileEntry::kFileSizeFieldNumber;
const int MtpFileEntry::kModificationTimeFieldNumber;
const int MtpFileEntry::kFileTypeFieldNumber;
#endif  // !_MSC_VER

MtpFileEntry::MtpFileEntry()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MtpFileEntry::InitAsDefaultInstance() {
}

MtpFileEntry::MtpFileEntry(const MtpFileEntry& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MtpFileEntry::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0u;
  parent_id_ = 0u;
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  file_size_ = GOOGLE_ULONGLONG(0);
  modification_time_ = GOOGLE_LONGLONG(0);
  file_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MtpFileEntry::~MtpFileEntry() {
  SharedDtor();
}

void MtpFileEntry::SharedDtor() {
  if (file_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete file_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MtpFileEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MtpFileEntry& MtpFileEntry::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_mtp_5ffile_5fentry_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_mtp_5ffile_5fentry_2eproto();
#endif
  return *default_instance_;
}

MtpFileEntry* MtpFileEntry::default_instance_ = NULL;

MtpFileEntry* MtpFileEntry::New() const {
  return new MtpFileEntry;
}

void MtpFileEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0u;
    parent_id_ = 0u;
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::GetEmptyString()) {
        file_name_->clear();
      }
    }
    file_size_ = GOOGLE_ULONGLONG(0);
    modification_time_ = GOOGLE_LONGLONG(0);
    file_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MtpFileEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_parent_id;
        break;
      }

      // optional uint32 parent_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parent_id_)));
          set_has_parent_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_file_name;
        break;
      }

      // optional string file_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_file_size;
        break;
      }

      // optional uint64 file_size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_modification_time;
        break;
      }

      // optional int64 modification_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modification_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &modification_time_)));
          set_has_modification_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_file_type;
        break;
      }

      // optional .MtpFileEntry.FileType file_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MtpFileEntry_FileType_IsValid(value)) {
            set_file_type(static_cast< ::MtpFileEntry_FileType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MtpFileEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_id(), output);
  }

  // optional uint32 parent_id = 2;
  if (has_parent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->parent_id(), output);
  }

  // optional string file_name = 3;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->file_name(), output);
  }

  // optional uint64 file_size = 4;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->file_size(), output);
  }

  // optional int64 modification_time = 5;
  if (has_modification_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->modification_time(), output);
  }

  // optional .MtpFileEntry.FileType file_type = 6;
  if (has_file_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->file_type(), output);
  }

}

int MtpFileEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // optional uint32 parent_id = 2;
    if (has_parent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parent_id());
    }

    // optional string file_name = 3;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional uint64 file_size = 4;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->file_size());
    }

    // optional int64 modification_time = 5;
    if (has_modification_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->modification_time());
    }

    // optional .MtpFileEntry.FileType file_type = 6;
    if (has_file_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->file_type());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MtpFileEntry::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MtpFileEntry*>(&from));
}

void MtpFileEntry::MergeFrom(const MtpFileEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_parent_id()) {
      set_parent_id(from.parent_id());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
    if (from.has_modification_time()) {
      set_modification_time(from.modification_time());
    }
    if (from.has_file_type()) {
      set_file_type(from.file_type());
    }
  }
}

void MtpFileEntry::CopyFrom(const MtpFileEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MtpFileEntry::IsInitialized() const {

  return true;
}

void MtpFileEntry::Swap(MtpFileEntry* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(parent_id_, other->parent_id_);
    std::swap(file_name_, other->file_name_);
    std::swap(file_size_, other->file_size_);
    std::swap(modification_time_, other->modification_time_);
    std::swap(file_type_, other->file_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MtpFileEntry::GetTypeName() const {
  return "MtpFileEntry";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MtpFileEntries::kFileEntriesFieldNumber;
#endif  // !_MSC_VER

MtpFileEntries::MtpFileEntries()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MtpFileEntries::InitAsDefaultInstance() {
}

MtpFileEntries::MtpFileEntries(const MtpFileEntries& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MtpFileEntries::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MtpFileEntries::~MtpFileEntries() {
  SharedDtor();
}

void MtpFileEntries::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MtpFileEntries::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MtpFileEntries& MtpFileEntries::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_mtp_5ffile_5fentry_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_mtp_5ffile_5fentry_2eproto();
#endif
  return *default_instance_;
}

MtpFileEntries* MtpFileEntries::default_instance_ = NULL;

MtpFileEntries* MtpFileEntries::New() const {
  return new MtpFileEntries;
}

void MtpFileEntries::Clear() {
  file_entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MtpFileEntries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MtpFileEntry file_entries = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_file_entries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_file_entries;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MtpFileEntries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MtpFileEntry file_entries = 1;
  for (int i = 0; i < this->file_entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->file_entries(i), output);
  }

}

int MtpFileEntries::ByteSize() const {
  int total_size = 0;

  // repeated .MtpFileEntry file_entries = 1;
  total_size += 1 * this->file_entries_size();
  for (int i = 0; i < this->file_entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->file_entries(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MtpFileEntries::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MtpFileEntries*>(&from));
}

void MtpFileEntries::MergeFrom(const MtpFileEntries& from) {
  GOOGLE_CHECK_NE(&from, this);
  file_entries_.MergeFrom(from.file_entries_);
}

void MtpFileEntries::CopyFrom(const MtpFileEntries& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MtpFileEntries::IsInitialized() const {

  return true;
}

void MtpFileEntries::Swap(MtpFileEntries* other) {
  if (other != this) {
    file_entries_.Swap(&other->file_entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MtpFileEntries::GetTypeName() const {
  return "MtpFileEntries";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
