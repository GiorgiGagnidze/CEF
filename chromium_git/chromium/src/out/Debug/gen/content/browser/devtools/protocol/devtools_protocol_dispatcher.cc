// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// THIS FILE IS AUTOGENERATED. DO NOT EDIT.
// Generated by
//  content/public/browser/devtools_protocol_handler_generator.py from
//  third_party/WebKit/Source/devtools/protocol.json and
//  content/browser/devtools/browser_protocol.json

#include "base/bind.h"
#include "base/strings/string_number_conversions.h"
#include "base/strings/string_split.h"
#include "content/browser/devtools/protocol/dom_handler.h"
#include "content/browser/devtools/protocol/emulation_handler.h"
#include "content/browser/devtools/protocol/input_handler.h"
#include "content/browser/devtools/protocol/inspector_handler.h"
#include "content/browser/devtools/protocol/io_handler.h"
#include "content/browser/devtools/protocol/memory_handler.h"
#include "content/browser/devtools/protocol/network_handler.h"
#include "content/browser/devtools/protocol/page_handler.h"
#include "content/browser/devtools/protocol/security_handler.h"
#include "content/browser/devtools/protocol/service_worker_handler.h"
#include "content/browser/devtools/protocol/system_info_handler.h"
#include "content/browser/devtools/protocol/tethering_handler.h"
#include "content/browser/devtools/protocol/tracing_handler.h"

namespace content {

DevToolsProtocolDispatcher::DevToolsProtocolDispatcher(
    DevToolsProtocolDelegate* notifier)
    : notifier_(notifier),
      client_(notifier),
      inspector_handler_(nullptr),
      memory_handler_(nullptr),
      page_handler_(nullptr),
      emulation_handler_(nullptr),
      security_handler_(nullptr),
      network_handler_(nullptr),
      dom_handler_(nullptr),
      io_handler_(nullptr),
      service_worker_handler_(nullptr),
      input_handler_(nullptr),
      tracing_handler_(nullptr),
      system_info_handler_(nullptr),
      tethering_handler_(nullptr) {
}

DevToolsProtocolDispatcher::~DevToolsProtocolDispatcher() {
}

DevToolsProtocolDispatcher::CommandHandler
DevToolsProtocolDispatcher::FindCommandHandler(const std::string& method) {
  CommandHandlers::iterator it = command_handlers_.find(method);
  return it == command_handlers_.end() ? CommandHandler() : it->second;
}

bool DevToolsProtocolDispatcher::OnInspectorEnable(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  Response response = inspector_handler_->Enable();
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnMemorySetPressureNotificationsSuppressed(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  bool in_suppressed = false;
  if (!params || !params->GetBoolean("suppressed", &in_suppressed)) {
    client_.SendError(command_id, Response::InvalidParams("suppressed"));
    return true;
  }
  Response response = memory_handler_->SetPressureNotificationsSuppressed(
      in_suppressed);
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnMemorySimulatePressureNotification(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  std::string in_level;
  if (!params || !params->GetString("level", &in_level)) {
    client_.SendError(command_id, Response::InvalidParams("level"));
    return true;
  }
  Response response = memory_handler_->SimulatePressureNotification(
      in_level);
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnPageEnable(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  Response response = page_handler_->Enable();
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnPageDisable(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  Response response = page_handler_->Disable();
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnPageReload(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  bool in_ignore_cache = false;
  bool ignore_cache_found = params && params->GetBoolean(
      "ignoreCache",
      &in_ignore_cache);
  std::string in_script_to_evaluate_on_load;
  bool script_to_evaluate_on_load_found = params && params->GetString(
      "scriptToEvaluateOnLoad",
      &in_script_to_evaluate_on_load);
  Response response = page_handler_->Reload(
      ignore_cache_found ? &in_ignore_cache : nullptr,
      script_to_evaluate_on_load_found ? &in_script_to_evaluate_on_load : nullptr);
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnPageNavigate(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  std::string in_url;
  if (!params || !params->GetString("url", &in_url)) {
    client_.SendError(command_id, Response::InvalidParams("url"));
    return true;
  }
  std::string out_frame_id;
  Response response = page_handler_->Navigate(
      in_url,
      &out_frame_id);
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  result->Set("frameId", devtools::CreateValue(out_frame_id));
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnPageGetNavigationHistory(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  int out_current_index = 0;
  std::vector<scoped_refptr<devtools::page::NavigationEntry>> out_entries;
  Response response = page_handler_->GetNavigationHistory(
      &out_current_index,
      &out_entries);
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  result->Set("currentIndex", devtools::CreateValue(out_current_index));
  result->Set("entries", devtools::CreateValue(out_entries));
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnPageNavigateToHistoryEntry(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  int in_entry_id = 0;
  if (!params || !params->GetInteger("entryId", &in_entry_id)) {
    client_.SendError(command_id, Response::InvalidParams("entryId"));
    return true;
  }
  Response response = page_handler_->NavigateToHistoryEntry(
      in_entry_id);
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnPageCaptureScreenshot(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  Response response = page_handler_->CaptureScreenshot(
      command_id);
  if (client_.SendError(command_id, response))
    return true;
  return !response.IsFallThrough();
}

bool DevToolsProtocolDispatcher::OnPageStartScreencast(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  std::string in_format;
  bool format_found = params && params->GetString(
      "format",
      &in_format);
  int in_quality = 0;
  bool quality_found = params && params->GetInteger(
      "quality",
      &in_quality);
  int in_max_width = 0;
  bool max_width_found = params && params->GetInteger(
      "maxWidth",
      &in_max_width);
  int in_max_height = 0;
  bool max_height_found = params && params->GetInteger(
      "maxHeight",
      &in_max_height);
  int in_every_nth_frame = 0;
  bool every_nth_frame_found = params && params->GetInteger(
      "everyNthFrame",
      &in_every_nth_frame);
  Response response = page_handler_->StartScreencast(
      format_found ? &in_format : nullptr,
      quality_found ? &in_quality : nullptr,
      max_width_found ? &in_max_width : nullptr,
      max_height_found ? &in_max_height : nullptr,
      every_nth_frame_found ? &in_every_nth_frame : nullptr);
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnPageStopScreencast(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  Response response = page_handler_->StopScreencast();
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnPageScreencastFrameAck(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  int in_session_id = 0;
  if (!params || !params->GetInteger("sessionId", &in_session_id)) {
    client_.SendError(command_id, Response::InvalidParams("sessionId"));
    return true;
  }
  Response response = page_handler_->ScreencastFrameAck(
      in_session_id);
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnPageHandleJavaScriptDialog(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  bool in_accept = false;
  if (!params || !params->GetBoolean("accept", &in_accept)) {
    client_.SendError(command_id, Response::InvalidParams("accept"));
    return true;
  }
  std::string in_prompt_text;
  bool prompt_text_found = params && params->GetString(
      "promptText",
      &in_prompt_text);
  Response response = page_handler_->HandleJavaScriptDialog(
      in_accept,
      prompt_text_found ? &in_prompt_text : nullptr);
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnPageSetColorPickerEnabled(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  bool in_enabled = false;
  if (!params || !params->GetBoolean("enabled", &in_enabled)) {
    client_.SendError(command_id, Response::InvalidParams("enabled"));
    return true;
  }
  Response response = page_handler_->SetColorPickerEnabled(
      in_enabled);
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnPageRequestAppBanner(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  bool out_result = false;
  Response response = page_handler_->RequestAppBanner(
      &out_result);
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  result->Set("result", devtools::CreateValue(out_result));
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnEmulationSetDeviceMetricsOverride(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  int in_width = 0;
  if (!params || !params->GetInteger("width", &in_width)) {
    client_.SendError(command_id, Response::InvalidParams("width"));
    return true;
  }
  int in_height = 0;
  if (!params || !params->GetInteger("height", &in_height)) {
    client_.SendError(command_id, Response::InvalidParams("height"));
    return true;
  }
  double in_device_scale_factor = 0.0;
  if (!params || !params->GetDouble("deviceScaleFactor", &in_device_scale_factor)) {
    client_.SendError(command_id, Response::InvalidParams("deviceScaleFactor"));
    return true;
  }
  bool in_mobile = false;
  if (!params || !params->GetBoolean("mobile", &in_mobile)) {
    client_.SendError(command_id, Response::InvalidParams("mobile"));
    return true;
  }
  bool in_fit_window = false;
  if (!params || !params->GetBoolean("fitWindow", &in_fit_window)) {
    client_.SendError(command_id, Response::InvalidParams("fitWindow"));
    return true;
  }
  double in_scale = 0.0;
  bool scale_found = params && params->GetDouble(
      "scale",
      &in_scale);
  double in_offset_x = 0.0;
  bool offset_x_found = params && params->GetDouble(
      "offsetX",
      &in_offset_x);
  double in_offset_y = 0.0;
  bool offset_y_found = params && params->GetDouble(
      "offsetY",
      &in_offset_y);
  int in_screen_width = 0;
  bool screen_width_found = params && params->GetInteger(
      "screenWidth",
      &in_screen_width);
  int in_screen_height = 0;
  bool screen_height_found = params && params->GetInteger(
      "screenHeight",
      &in_screen_height);
  int in_position_x = 0;
  bool position_x_found = params && params->GetInteger(
      "positionX",
      &in_position_x);
  int in_position_y = 0;
  bool position_y_found = params && params->GetInteger(
      "positionY",
      &in_position_y);
  Response response = emulation_handler_->SetDeviceMetricsOverride(
      in_width,
      in_height,
      in_device_scale_factor,
      in_mobile,
      in_fit_window,
      scale_found ? &in_scale : nullptr,
      offset_x_found ? &in_offset_x : nullptr,
      offset_y_found ? &in_offset_y : nullptr,
      screen_width_found ? &in_screen_width : nullptr,
      screen_height_found ? &in_screen_height : nullptr,
      position_x_found ? &in_position_x : nullptr,
      position_y_found ? &in_position_y : nullptr);
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnEmulationClearDeviceMetricsOverride(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  Response response = emulation_handler_->ClearDeviceMetricsOverride();
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnEmulationSetGeolocationOverride(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  double in_latitude = 0.0;
  bool latitude_found = params && params->GetDouble(
      "latitude",
      &in_latitude);
  double in_longitude = 0.0;
  bool longitude_found = params && params->GetDouble(
      "longitude",
      &in_longitude);
  double in_accuracy = 0.0;
  bool accuracy_found = params && params->GetDouble(
      "accuracy",
      &in_accuracy);
  Response response = emulation_handler_->SetGeolocationOverride(
      latitude_found ? &in_latitude : nullptr,
      longitude_found ? &in_longitude : nullptr,
      accuracy_found ? &in_accuracy : nullptr);
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnEmulationClearGeolocationOverride(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  Response response = emulation_handler_->ClearGeolocationOverride();
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnEmulationSetTouchEmulationEnabled(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  bool in_enabled = false;
  if (!params || !params->GetBoolean("enabled", &in_enabled)) {
    client_.SendError(command_id, Response::InvalidParams("enabled"));
    return true;
  }
  std::string in_configuration;
  bool configuration_found = params && params->GetString(
      "configuration",
      &in_configuration);
  Response response = emulation_handler_->SetTouchEmulationEnabled(
      in_enabled,
      configuration_found ? &in_configuration : nullptr);
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnEmulationCanEmulate(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  bool out_result = false;
  Response response = emulation_handler_->CanEmulate(
      &out_result);
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  result->Set("result", devtools::CreateValue(out_result));
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnSecurityEnable(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  Response response = security_handler_->Enable();
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnSecurityDisable(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  Response response = security_handler_->Disable();
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnNetworkClearBrowserCache(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  Response response = network_handler_->ClearBrowserCache();
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnNetworkClearBrowserCookies(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  Response response = network_handler_->ClearBrowserCookies();
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnNetworkGetCookies(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  Response response = network_handler_->GetCookies(
      command_id);
  if (client_.SendError(command_id, response))
    return true;
  return !response.IsFallThrough();
}

bool DevToolsProtocolDispatcher::OnNetworkDeleteCookie(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  std::string in_cookie_name;
  if (!params || !params->GetString("cookieName", &in_cookie_name)) {
    client_.SendError(command_id, Response::InvalidParams("cookieName"));
    return true;
  }
  std::string in_url;
  if (!params || !params->GetString("url", &in_url)) {
    client_.SendError(command_id, Response::InvalidParams("url"));
    return true;
  }
  Response response = network_handler_->DeleteCookie(
      command_id,
      in_cookie_name,
      in_url);
  if (client_.SendError(command_id, response))
    return true;
  return !response.IsFallThrough();
}

bool DevToolsProtocolDispatcher::OnNetworkCanEmulateNetworkConditions(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  bool out_result = false;
  Response response = network_handler_->CanEmulateNetworkConditions(
      &out_result);
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  result->Set("result", devtools::CreateValue(out_result));
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnNetworkEmulateNetworkConditions(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  bool in_offline = false;
  if (!params || !params->GetBoolean("offline", &in_offline)) {
    client_.SendError(command_id, Response::InvalidParams("offline"));
    return true;
  }
  double in_latency = 0.0;
  if (!params || !params->GetDouble("latency", &in_latency)) {
    client_.SendError(command_id, Response::InvalidParams("latency"));
    return true;
  }
  double in_download_throughput = 0.0;
  if (!params || !params->GetDouble("downloadThroughput", &in_download_throughput)) {
    client_.SendError(command_id, Response::InvalidParams("downloadThroughput"));
    return true;
  }
  double in_upload_throughput = 0.0;
  if (!params || !params->GetDouble("uploadThroughput", &in_upload_throughput)) {
    client_.SendError(command_id, Response::InvalidParams("uploadThroughput"));
    return true;
  }
  Response response = network_handler_->EmulateNetworkConditions(
      in_offline,
      in_latency,
      in_download_throughput,
      in_upload_throughput);
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnNetworkGetCertificateDetails(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  int in_certificate_id = 0;
  if (!params || !params->GetInteger("certificateId", &in_certificate_id)) {
    client_.SendError(command_id, Response::InvalidParams("certificateId"));
    return true;
  }
  scoped_refptr<devtools::network::CertificateDetails> out_result;
  Response response = network_handler_->GetCertificateDetails(
      in_certificate_id,
      &out_result);
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  result->Set("result", devtools::CreateValue(out_result));
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnNetworkShowCertificateViewer(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  int in_certificate_id = 0;
  if (!params || !params->GetInteger("certificateId", &in_certificate_id)) {
    client_.SendError(command_id, Response::InvalidParams("certificateId"));
    return true;
  }
  Response response = network_handler_->ShowCertificateViewer(
      in_certificate_id);
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnDOMSetFileInputFiles(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  int in_node_id = 0;
  if (!params || !params->GetInteger("nodeId", &in_node_id)) {
    client_.SendError(command_id, Response::InvalidParams("nodeId"));
    return true;
  }
  base::ListValue* list_files = nullptr;
  if (!params || !params->GetList("files", &list_files)) {
    client_.SendError(command_id, Response::InvalidParams("files"));
    return true;
  }
  std::vector<std::string> in_files;
  for (base::ListValue::const_iterator it =
      list_files->begin(); it != list_files->end(); ++it) {
    std::string item;
    if (!(*it)->GetAsString(&item)) {
      client_.SendError(command_id, Response::InvalidParams("files"));
      return true;
    }
    in_files.push_back(item);
  }
  Response response = dom_handler_->SetFileInputFiles(
      in_node_id,
      in_files);
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnIORead(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  std::string in_handle;
  if (!params || !params->GetString("handle", &in_handle)) {
    client_.SendError(command_id, Response::InvalidParams("handle"));
    return true;
  }
  int in_offset = 0;
  bool offset_found = params && params->GetInteger(
      "offset",
      &in_offset);
  int in_size = 0;
  bool size_found = params && params->GetInteger(
      "size",
      &in_size);
  Response response = io_handler_->Read(
      command_id,
      in_handle,
      offset_found ? &in_offset : nullptr,
      size_found ? &in_size : nullptr);
  if (client_.SendError(command_id, response))
    return true;
  return !response.IsFallThrough();
}

bool DevToolsProtocolDispatcher::OnIOClose(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  std::string in_handle;
  if (!params || !params->GetString("handle", &in_handle)) {
    client_.SendError(command_id, Response::InvalidParams("handle"));
    return true;
  }
  Response response = io_handler_->Close(
      in_handle);
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnServiceWorkerEnable(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  Response response = service_worker_handler_->Enable();
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnServiceWorkerDisable(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  Response response = service_worker_handler_->Disable();
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnServiceWorkerSendMessage(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  std::string in_worker_id;
  if (!params || !params->GetString("workerId", &in_worker_id)) {
    client_.SendError(command_id, Response::InvalidParams("workerId"));
    return true;
  }
  std::string in_message;
  if (!params || !params->GetString("message", &in_message)) {
    client_.SendError(command_id, Response::InvalidParams("message"));
    return true;
  }
  Response response = service_worker_handler_->SendMessage(
      in_worker_id,
      in_message);
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnServiceWorkerStop(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  std::string in_worker_id;
  if (!params || !params->GetString("workerId", &in_worker_id)) {
    client_.SendError(command_id, Response::InvalidParams("workerId"));
    return true;
  }
  Response response = service_worker_handler_->Stop(
      in_worker_id);
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnServiceWorkerUnregister(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  std::string in_scope_url;
  if (!params || !params->GetString("scopeURL", &in_scope_url)) {
    client_.SendError(command_id, Response::InvalidParams("scopeURL"));
    return true;
  }
  Response response = service_worker_handler_->Unregister(
      in_scope_url);
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnServiceWorkerUpdateRegistration(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  std::string in_scope_url;
  if (!params || !params->GetString("scopeURL", &in_scope_url)) {
    client_.SendError(command_id, Response::InvalidParams("scopeURL"));
    return true;
  }
  Response response = service_worker_handler_->UpdateRegistration(
      in_scope_url);
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnServiceWorkerStartWorker(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  std::string in_scope_url;
  if (!params || !params->GetString("scopeURL", &in_scope_url)) {
    client_.SendError(command_id, Response::InvalidParams("scopeURL"));
    return true;
  }
  Response response = service_worker_handler_->StartWorker(
      in_scope_url);
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnServiceWorkerStopWorker(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  std::string in_version_id;
  if (!params || !params->GetString("versionId", &in_version_id)) {
    client_.SendError(command_id, Response::InvalidParams("versionId"));
    return true;
  }
  Response response = service_worker_handler_->StopWorker(
      in_version_id);
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnServiceWorkerInspectWorker(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  std::string in_version_id;
  if (!params || !params->GetString("versionId", &in_version_id)) {
    client_.SendError(command_id, Response::InvalidParams("versionId"));
    return true;
  }
  Response response = service_worker_handler_->InspectWorker(
      in_version_id);
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnServiceWorkerSetDebugOnStart(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  bool in_debug_on_start = false;
  if (!params || !params->GetBoolean("debugOnStart", &in_debug_on_start)) {
    client_.SendError(command_id, Response::InvalidParams("debugOnStart"));
    return true;
  }
  Response response = service_worker_handler_->SetDebugOnStart(
      in_debug_on_start);
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnServiceWorkerSetForceUpdateOnPageLoad(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  std::string in_registration_id;
  if (!params || !params->GetString("registrationId", &in_registration_id)) {
    client_.SendError(command_id, Response::InvalidParams("registrationId"));
    return true;
  }
  bool in_force_update_on_page_load = false;
  if (!params || !params->GetBoolean("forceUpdateOnPageLoad", &in_force_update_on_page_load)) {
    client_.SendError(command_id, Response::InvalidParams("forceUpdateOnPageLoad"));
    return true;
  }
  Response response = service_worker_handler_->SetForceUpdateOnPageLoad(
      in_registration_id,
      in_force_update_on_page_load);
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnServiceWorkerDeliverPushMessage(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  std::string in_origin;
  if (!params || !params->GetString("origin", &in_origin)) {
    client_.SendError(command_id, Response::InvalidParams("origin"));
    return true;
  }
  std::string in_registration_id;
  if (!params || !params->GetString("registrationId", &in_registration_id)) {
    client_.SendError(command_id, Response::InvalidParams("registrationId"));
    return true;
  }
  std::string in_data;
  if (!params || !params->GetString("data", &in_data)) {
    client_.SendError(command_id, Response::InvalidParams("data"));
    return true;
  }
  Response response = service_worker_handler_->DeliverPushMessage(
      in_origin,
      in_registration_id,
      in_data);
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnServiceWorkerGetTargetInfo(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  std::string in_target_id;
  if (!params || !params->GetString("targetId", &in_target_id)) {
    client_.SendError(command_id, Response::InvalidParams("targetId"));
    return true;
  }
  scoped_refptr<devtools::service_worker::TargetInfo> out_target_info;
  Response response = service_worker_handler_->GetTargetInfo(
      in_target_id,
      &out_target_info);
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  result->Set("targetInfo", devtools::CreateValue(out_target_info));
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnServiceWorkerActivateTarget(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  std::string in_target_id;
  if (!params || !params->GetString("targetId", &in_target_id)) {
    client_.SendError(command_id, Response::InvalidParams("targetId"));
    return true;
  }
  Response response = service_worker_handler_->ActivateTarget(
      in_target_id);
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnInputDispatchKeyEvent(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  std::string in_type;
  if (!params || !params->GetString("type", &in_type)) {
    client_.SendError(command_id, Response::InvalidParams("type"));
    return true;
  }
  int in_modifiers = 0;
  bool modifiers_found = params && params->GetInteger(
      "modifiers",
      &in_modifiers);
  double in_timestamp = 0.0;
  bool timestamp_found = params && params->GetDouble(
      "timestamp",
      &in_timestamp);
  std::string in_text;
  bool text_found = params && params->GetString(
      "text",
      &in_text);
  std::string in_unmodified_text;
  bool unmodified_text_found = params && params->GetString(
      "unmodifiedText",
      &in_unmodified_text);
  std::string in_key_identifier;
  bool key_identifier_found = params && params->GetString(
      "keyIdentifier",
      &in_key_identifier);
  std::string in_code;
  bool code_found = params && params->GetString(
      "code",
      &in_code);
  std::string in_key;
  bool key_found = params && params->GetString(
      "key",
      &in_key);
  int in_windows_virtual_key_code = 0;
  bool windows_virtual_key_code_found = params && params->GetInteger(
      "windowsVirtualKeyCode",
      &in_windows_virtual_key_code);
  int in_native_virtual_key_code = 0;
  bool native_virtual_key_code_found = params && params->GetInteger(
      "nativeVirtualKeyCode",
      &in_native_virtual_key_code);
  bool in_auto_repeat = false;
  bool auto_repeat_found = params && params->GetBoolean(
      "autoRepeat",
      &in_auto_repeat);
  bool in_is_keypad = false;
  bool is_keypad_found = params && params->GetBoolean(
      "isKeypad",
      &in_is_keypad);
  bool in_is_system_key = false;
  bool is_system_key_found = params && params->GetBoolean(
      "isSystemKey",
      &in_is_system_key);
  Response response = input_handler_->DispatchKeyEvent(
      in_type,
      modifiers_found ? &in_modifiers : nullptr,
      timestamp_found ? &in_timestamp : nullptr,
      text_found ? &in_text : nullptr,
      unmodified_text_found ? &in_unmodified_text : nullptr,
      key_identifier_found ? &in_key_identifier : nullptr,
      code_found ? &in_code : nullptr,
      key_found ? &in_key : nullptr,
      windows_virtual_key_code_found ? &in_windows_virtual_key_code : nullptr,
      native_virtual_key_code_found ? &in_native_virtual_key_code : nullptr,
      auto_repeat_found ? &in_auto_repeat : nullptr,
      is_keypad_found ? &in_is_keypad : nullptr,
      is_system_key_found ? &in_is_system_key : nullptr);
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnInputDispatchMouseEvent(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  std::string in_type;
  if (!params || !params->GetString("type", &in_type)) {
    client_.SendError(command_id, Response::InvalidParams("type"));
    return true;
  }
  int in_x = 0;
  if (!params || !params->GetInteger("x", &in_x)) {
    client_.SendError(command_id, Response::InvalidParams("x"));
    return true;
  }
  int in_y = 0;
  if (!params || !params->GetInteger("y", &in_y)) {
    client_.SendError(command_id, Response::InvalidParams("y"));
    return true;
  }
  int in_modifiers = 0;
  bool modifiers_found = params && params->GetInteger(
      "modifiers",
      &in_modifiers);
  double in_timestamp = 0.0;
  bool timestamp_found = params && params->GetDouble(
      "timestamp",
      &in_timestamp);
  std::string in_button;
  bool button_found = params && params->GetString(
      "button",
      &in_button);
  int in_click_count = 0;
  bool click_count_found = params && params->GetInteger(
      "clickCount",
      &in_click_count);
  Response response = input_handler_->DispatchMouseEvent(
      in_type,
      in_x,
      in_y,
      modifiers_found ? &in_modifiers : nullptr,
      timestamp_found ? &in_timestamp : nullptr,
      button_found ? &in_button : nullptr,
      click_count_found ? &in_click_count : nullptr);
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnInputEmulateTouchFromMouseEvent(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  std::string in_type;
  if (!params || !params->GetString("type", &in_type)) {
    client_.SendError(command_id, Response::InvalidParams("type"));
    return true;
  }
  int in_x = 0;
  if (!params || !params->GetInteger("x", &in_x)) {
    client_.SendError(command_id, Response::InvalidParams("x"));
    return true;
  }
  int in_y = 0;
  if (!params || !params->GetInteger("y", &in_y)) {
    client_.SendError(command_id, Response::InvalidParams("y"));
    return true;
  }
  double in_timestamp = 0.0;
  if (!params || !params->GetDouble("timestamp", &in_timestamp)) {
    client_.SendError(command_id, Response::InvalidParams("timestamp"));
    return true;
  }
  std::string in_button;
  if (!params || !params->GetString("button", &in_button)) {
    client_.SendError(command_id, Response::InvalidParams("button"));
    return true;
  }
  double in_delta_x = 0.0;
  bool delta_x_found = params && params->GetDouble(
      "deltaX",
      &in_delta_x);
  double in_delta_y = 0.0;
  bool delta_y_found = params && params->GetDouble(
      "deltaY",
      &in_delta_y);
  int in_modifiers = 0;
  bool modifiers_found = params && params->GetInteger(
      "modifiers",
      &in_modifiers);
  int in_click_count = 0;
  bool click_count_found = params && params->GetInteger(
      "clickCount",
      &in_click_count);
  Response response = input_handler_->EmulateTouchFromMouseEvent(
      in_type,
      in_x,
      in_y,
      in_timestamp,
      in_button,
      delta_x_found ? &in_delta_x : nullptr,
      delta_y_found ? &in_delta_y : nullptr,
      modifiers_found ? &in_modifiers : nullptr,
      click_count_found ? &in_click_count : nullptr);
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnInputSynthesizePinchGesture(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  int in_x = 0;
  if (!params || !params->GetInteger("x", &in_x)) {
    client_.SendError(command_id, Response::InvalidParams("x"));
    return true;
  }
  int in_y = 0;
  if (!params || !params->GetInteger("y", &in_y)) {
    client_.SendError(command_id, Response::InvalidParams("y"));
    return true;
  }
  double in_scale_factor = 0.0;
  if (!params || !params->GetDouble("scaleFactor", &in_scale_factor)) {
    client_.SendError(command_id, Response::InvalidParams("scaleFactor"));
    return true;
  }
  int in_relative_speed = 0;
  bool relative_speed_found = params && params->GetInteger(
      "relativeSpeed",
      &in_relative_speed);
  std::string in_gesture_source_type;
  bool gesture_source_type_found = params && params->GetString(
      "gestureSourceType",
      &in_gesture_source_type);
  Response response = input_handler_->SynthesizePinchGesture(
      command_id,
      in_x,
      in_y,
      in_scale_factor,
      relative_speed_found ? &in_relative_speed : nullptr,
      gesture_source_type_found ? &in_gesture_source_type : nullptr);
  if (client_.SendError(command_id, response))
    return true;
  return !response.IsFallThrough();
}

bool DevToolsProtocolDispatcher::OnInputSynthesizeScrollGesture(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  int in_x = 0;
  if (!params || !params->GetInteger("x", &in_x)) {
    client_.SendError(command_id, Response::InvalidParams("x"));
    return true;
  }
  int in_y = 0;
  if (!params || !params->GetInteger("y", &in_y)) {
    client_.SendError(command_id, Response::InvalidParams("y"));
    return true;
  }
  int in_x_distance = 0;
  bool x_distance_found = params && params->GetInteger(
      "xDistance",
      &in_x_distance);
  int in_y_distance = 0;
  bool y_distance_found = params && params->GetInteger(
      "yDistance",
      &in_y_distance);
  int in_x_overscroll = 0;
  bool x_overscroll_found = params && params->GetInteger(
      "xOverscroll",
      &in_x_overscroll);
  int in_y_overscroll = 0;
  bool y_overscroll_found = params && params->GetInteger(
      "yOverscroll",
      &in_y_overscroll);
  bool in_prevent_fling = false;
  bool prevent_fling_found = params && params->GetBoolean(
      "preventFling",
      &in_prevent_fling);
  int in_speed = 0;
  bool speed_found = params && params->GetInteger(
      "speed",
      &in_speed);
  std::string in_gesture_source_type;
  bool gesture_source_type_found = params && params->GetString(
      "gestureSourceType",
      &in_gesture_source_type);
  int in_repeat_count = 0;
  bool repeat_count_found = params && params->GetInteger(
      "repeatCount",
      &in_repeat_count);
  int in_repeat_delay_ms = 0;
  bool repeat_delay_ms_found = params && params->GetInteger(
      "repeatDelayMs",
      &in_repeat_delay_ms);
  std::string in_interaction_marker_name;
  bool interaction_marker_name_found = params && params->GetString(
      "interactionMarkerName",
      &in_interaction_marker_name);
  Response response = input_handler_->SynthesizeScrollGesture(
      command_id,
      in_x,
      in_y,
      x_distance_found ? &in_x_distance : nullptr,
      y_distance_found ? &in_y_distance : nullptr,
      x_overscroll_found ? &in_x_overscroll : nullptr,
      y_overscroll_found ? &in_y_overscroll : nullptr,
      prevent_fling_found ? &in_prevent_fling : nullptr,
      speed_found ? &in_speed : nullptr,
      gesture_source_type_found ? &in_gesture_source_type : nullptr,
      repeat_count_found ? &in_repeat_count : nullptr,
      repeat_delay_ms_found ? &in_repeat_delay_ms : nullptr,
      interaction_marker_name_found ? &in_interaction_marker_name : nullptr);
  if (client_.SendError(command_id, response))
    return true;
  return !response.IsFallThrough();
}

bool DevToolsProtocolDispatcher::OnInputSynthesizeTapGesture(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  int in_x = 0;
  if (!params || !params->GetInteger("x", &in_x)) {
    client_.SendError(command_id, Response::InvalidParams("x"));
    return true;
  }
  int in_y = 0;
  if (!params || !params->GetInteger("y", &in_y)) {
    client_.SendError(command_id, Response::InvalidParams("y"));
    return true;
  }
  int in_duration = 0;
  bool duration_found = params && params->GetInteger(
      "duration",
      &in_duration);
  int in_tap_count = 0;
  bool tap_count_found = params && params->GetInteger(
      "tapCount",
      &in_tap_count);
  std::string in_gesture_source_type;
  bool gesture_source_type_found = params && params->GetString(
      "gestureSourceType",
      &in_gesture_source_type);
  Response response = input_handler_->SynthesizeTapGesture(
      command_id,
      in_x,
      in_y,
      duration_found ? &in_duration : nullptr,
      tap_count_found ? &in_tap_count : nullptr,
      gesture_source_type_found ? &in_gesture_source_type : nullptr);
  if (client_.SendError(command_id, response))
    return true;
  return !response.IsFallThrough();
}

bool DevToolsProtocolDispatcher::OnTracingStart(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  std::string in_categories;
  bool categories_found = params && params->GetString(
      "categories",
      &in_categories);
  std::string in_options;
  bool options_found = params && params->GetString(
      "options",
      &in_options);
  double in_buffer_usage_reporting_interval = 0.0;
  bool buffer_usage_reporting_interval_found = params && params->GetDouble(
      "bufferUsageReportingInterval",
      &in_buffer_usage_reporting_interval);
  std::string in_transfer_mode;
  bool transfer_mode_found = params && params->GetString(
      "transferMode",
      &in_transfer_mode);
  Response response = tracing_handler_->Start(
      command_id,
      categories_found ? &in_categories : nullptr,
      options_found ? &in_options : nullptr,
      buffer_usage_reporting_interval_found ? &in_buffer_usage_reporting_interval : nullptr,
      transfer_mode_found ? &in_transfer_mode : nullptr);
  if (client_.SendError(command_id, response))
    return true;
  return !response.IsFallThrough();
}

bool DevToolsProtocolDispatcher::OnTracingEnd(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  Response response = tracing_handler_->End(
      command_id);
  if (client_.SendError(command_id, response))
    return true;
  return !response.IsFallThrough();
}

bool DevToolsProtocolDispatcher::OnTracingGetCategories(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  Response response = tracing_handler_->GetCategories(
      command_id);
  if (client_.SendError(command_id, response))
    return true;
  return !response.IsFallThrough();
}

bool DevToolsProtocolDispatcher::OnTracingRequestMemoryDump(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  Response response = tracing_handler_->RequestMemoryDump(
      command_id);
  if (client_.SendError(command_id, response))
    return true;
  return !response.IsFallThrough();
}

bool DevToolsProtocolDispatcher::OnTracingRecordClockSyncMarker(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  std::string in_sync_id;
  if (!params || !params->GetString("syncId", &in_sync_id)) {
    client_.SendError(command_id, Response::InvalidParams("syncId"));
    return true;
  }
  Response response = tracing_handler_->RecordClockSyncMarker(
      in_sync_id);
  scoped_ptr<base::DictionaryValue> protocol_response;
  if (client_.SendError(command_id, response))
    return true;
  if (response.IsFallThrough())
    return false;
  scoped_ptr<base::DictionaryValue> result(new base::DictionaryValue());
  client_.SendSuccess(command_id, std::move(result));
  return true;
}

bool DevToolsProtocolDispatcher::OnSystemInfoGetInfo(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  Response response = system_info_handler_->GetInfo(
      command_id);
  if (client_.SendError(command_id, response))
    return true;
  return !response.IsFallThrough();
}

bool DevToolsProtocolDispatcher::OnTetheringBind(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  int in_port = 0;
  if (!params || !params->GetInteger("port", &in_port)) {
    client_.SendError(command_id, Response::InvalidParams("port"));
    return true;
  }
  Response response = tethering_handler_->Bind(
      command_id,
      in_port);
  if (client_.SendError(command_id, response))
    return true;
  return !response.IsFallThrough();
}

bool DevToolsProtocolDispatcher::OnTetheringUnbind(
    DevToolsCommandId command_id,
    scoped_ptr<base::DictionaryValue> params) {
  int in_port = 0;
  if (!params || !params->GetInteger("port", &in_port)) {
    client_.SendError(command_id, Response::InvalidParams("port"));
    return true;
  }
  Response response = tethering_handler_->Unbind(
      command_id,
      in_port);
  if (client_.SendError(command_id, response))
    return true;
  return !response.IsFallThrough();
}

void DevToolsProtocolDispatcher::SetInspectorHandler(
    devtools::inspector::InspectorHandler* inspector_handler) {
  DCHECK(!inspector_handler_);
  inspector_handler_ = inspector_handler;
  command_handlers_["Inspector.enable"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnInspectorEnable,
          base::Unretained(this));
  inspector_handler_->SetClient(make_scoped_ptr(
      new devtools::inspector::Client(notifier_)));
}

void DevToolsProtocolDispatcher::SetMemoryHandler(
    devtools::memory::MemoryHandler* memory_handler) {
  DCHECK(!memory_handler_);
  memory_handler_ = memory_handler;
  command_handlers_["Memory.setPressureNotificationsSuppressed"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnMemorySetPressureNotificationsSuppressed,
          base::Unretained(this));
  command_handlers_["Memory.simulatePressureNotification"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnMemorySimulatePressureNotification,
          base::Unretained(this));
}

void DevToolsProtocolDispatcher::SetPageHandler(
    devtools::page::PageHandler* page_handler) {
  DCHECK(!page_handler_);
  page_handler_ = page_handler;
  command_handlers_["Page.enable"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnPageEnable,
          base::Unretained(this));
  command_handlers_["Page.disable"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnPageDisable,
          base::Unretained(this));
  command_handlers_["Page.reload"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnPageReload,
          base::Unretained(this));
  command_handlers_["Page.navigate"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnPageNavigate,
          base::Unretained(this));
  command_handlers_["Page.getNavigationHistory"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnPageGetNavigationHistory,
          base::Unretained(this));
  command_handlers_["Page.navigateToHistoryEntry"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnPageNavigateToHistoryEntry,
          base::Unretained(this));
  command_handlers_["Page.captureScreenshot"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnPageCaptureScreenshot,
          base::Unretained(this));
  command_handlers_["Page.startScreencast"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnPageStartScreencast,
          base::Unretained(this));
  command_handlers_["Page.stopScreencast"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnPageStopScreencast,
          base::Unretained(this));
  command_handlers_["Page.screencastFrameAck"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnPageScreencastFrameAck,
          base::Unretained(this));
  command_handlers_["Page.handleJavaScriptDialog"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnPageHandleJavaScriptDialog,
          base::Unretained(this));
  command_handlers_["Page.setColorPickerEnabled"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnPageSetColorPickerEnabled,
          base::Unretained(this));
  command_handlers_["Page.requestAppBanner"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnPageRequestAppBanner,
          base::Unretained(this));
  page_handler_->SetClient(make_scoped_ptr(
      new devtools::page::Client(notifier_)));
}

void DevToolsProtocolDispatcher::SetEmulationHandler(
    devtools::emulation::EmulationHandler* emulation_handler) {
  DCHECK(!emulation_handler_);
  emulation_handler_ = emulation_handler;
  command_handlers_["Emulation.setDeviceMetricsOverride"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnEmulationSetDeviceMetricsOverride,
          base::Unretained(this));
  command_handlers_["Emulation.clearDeviceMetricsOverride"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnEmulationClearDeviceMetricsOverride,
          base::Unretained(this));
  command_handlers_["Emulation.setGeolocationOverride"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnEmulationSetGeolocationOverride,
          base::Unretained(this));
  command_handlers_["Emulation.clearGeolocationOverride"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnEmulationClearGeolocationOverride,
          base::Unretained(this));
  command_handlers_["Emulation.setTouchEmulationEnabled"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnEmulationSetTouchEmulationEnabled,
          base::Unretained(this));
  command_handlers_["Emulation.canEmulate"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnEmulationCanEmulate,
          base::Unretained(this));
  command_handlers_["Page.setDeviceMetricsOverride"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnEmulationSetDeviceMetricsOverride,
          base::Unretained(this));
  command_handlers_["Page.clearDeviceMetricsOverride"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnEmulationClearDeviceMetricsOverride,
          base::Unretained(this));
  command_handlers_["Page.setGeolocationOverride"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnEmulationSetGeolocationOverride,
          base::Unretained(this));
  command_handlers_["Page.clearGeolocationOverride"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnEmulationClearGeolocationOverride,
          base::Unretained(this));
  command_handlers_["Page.setTouchEmulationEnabled"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnEmulationSetTouchEmulationEnabled,
          base::Unretained(this));
}

void DevToolsProtocolDispatcher::SetSecurityHandler(
    devtools::security::SecurityHandler* security_handler) {
  DCHECK(!security_handler_);
  security_handler_ = security_handler;
  command_handlers_["Security.enable"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnSecurityEnable,
          base::Unretained(this));
  command_handlers_["Security.disable"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnSecurityDisable,
          base::Unretained(this));
  security_handler_->SetClient(make_scoped_ptr(
      new devtools::security::Client(notifier_)));
}

void DevToolsProtocolDispatcher::SetNetworkHandler(
    devtools::network::NetworkHandler* network_handler) {
  DCHECK(!network_handler_);
  network_handler_ = network_handler;
  command_handlers_["Network.clearBrowserCache"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnNetworkClearBrowserCache,
          base::Unretained(this));
  command_handlers_["Network.clearBrowserCookies"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnNetworkClearBrowserCookies,
          base::Unretained(this));
  command_handlers_["Network.getCookies"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnNetworkGetCookies,
          base::Unretained(this));
  command_handlers_["Network.deleteCookie"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnNetworkDeleteCookie,
          base::Unretained(this));
  command_handlers_["Network.canEmulateNetworkConditions"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnNetworkCanEmulateNetworkConditions,
          base::Unretained(this));
  command_handlers_["Network.emulateNetworkConditions"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnNetworkEmulateNetworkConditions,
          base::Unretained(this));
  command_handlers_["Network.getCertificateDetails"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnNetworkGetCertificateDetails,
          base::Unretained(this));
  command_handlers_["Network.showCertificateViewer"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnNetworkShowCertificateViewer,
          base::Unretained(this));
  network_handler_->SetClient(make_scoped_ptr(
      new devtools::network::Client(notifier_)));
  command_handlers_["Page.getCookies"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnNetworkGetCookies,
          base::Unretained(this));
  command_handlers_["Page.deleteCookie"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnNetworkDeleteCookie,
          base::Unretained(this));
}

void DevToolsProtocolDispatcher::SetDOMHandler(
    devtools::dom::DOMHandler* dom_handler) {
  DCHECK(!dom_handler_);
  dom_handler_ = dom_handler;
  command_handlers_["DOM.setFileInputFiles"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnDOMSetFileInputFiles,
          base::Unretained(this));
}

void DevToolsProtocolDispatcher::SetIOHandler(
    devtools::io::IOHandler* io_handler) {
  DCHECK(!io_handler_);
  io_handler_ = io_handler;
  command_handlers_["IO.read"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnIORead,
          base::Unretained(this));
  command_handlers_["IO.close"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnIOClose,
          base::Unretained(this));
  io_handler_->SetClient(make_scoped_ptr(
      new devtools::io::Client(notifier_)));
}

void DevToolsProtocolDispatcher::SetServiceWorkerHandler(
    devtools::service_worker::ServiceWorkerHandler* service_worker_handler) {
  DCHECK(!service_worker_handler_);
  service_worker_handler_ = service_worker_handler;
  command_handlers_["ServiceWorker.enable"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnServiceWorkerEnable,
          base::Unretained(this));
  command_handlers_["ServiceWorker.disable"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnServiceWorkerDisable,
          base::Unretained(this));
  command_handlers_["ServiceWorker.sendMessage"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnServiceWorkerSendMessage,
          base::Unretained(this));
  command_handlers_["ServiceWorker.stop"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnServiceWorkerStop,
          base::Unretained(this));
  command_handlers_["ServiceWorker.unregister"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnServiceWorkerUnregister,
          base::Unretained(this));
  command_handlers_["ServiceWorker.updateRegistration"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnServiceWorkerUpdateRegistration,
          base::Unretained(this));
  command_handlers_["ServiceWorker.startWorker"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnServiceWorkerStartWorker,
          base::Unretained(this));
  command_handlers_["ServiceWorker.stopWorker"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnServiceWorkerStopWorker,
          base::Unretained(this));
  command_handlers_["ServiceWorker.inspectWorker"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnServiceWorkerInspectWorker,
          base::Unretained(this));
  command_handlers_["ServiceWorker.setDebugOnStart"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnServiceWorkerSetDebugOnStart,
          base::Unretained(this));
  command_handlers_["ServiceWorker.setForceUpdateOnPageLoad"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnServiceWorkerSetForceUpdateOnPageLoad,
          base::Unretained(this));
  command_handlers_["ServiceWorker.deliverPushMessage"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnServiceWorkerDeliverPushMessage,
          base::Unretained(this));
  command_handlers_["ServiceWorker.getTargetInfo"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnServiceWorkerGetTargetInfo,
          base::Unretained(this));
  command_handlers_["ServiceWorker.activateTarget"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnServiceWorkerActivateTarget,
          base::Unretained(this));
  service_worker_handler_->SetClient(make_scoped_ptr(
      new devtools::service_worker::Client(notifier_)));
}

void DevToolsProtocolDispatcher::SetInputHandler(
    devtools::input::InputHandler* input_handler) {
  DCHECK(!input_handler_);
  input_handler_ = input_handler;
  command_handlers_["Input.dispatchKeyEvent"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnInputDispatchKeyEvent,
          base::Unretained(this));
  command_handlers_["Input.dispatchMouseEvent"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnInputDispatchMouseEvent,
          base::Unretained(this));
  command_handlers_["Input.emulateTouchFromMouseEvent"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnInputEmulateTouchFromMouseEvent,
          base::Unretained(this));
  command_handlers_["Input.synthesizePinchGesture"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnInputSynthesizePinchGesture,
          base::Unretained(this));
  command_handlers_["Input.synthesizeScrollGesture"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnInputSynthesizeScrollGesture,
          base::Unretained(this));
  command_handlers_["Input.synthesizeTapGesture"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnInputSynthesizeTapGesture,
          base::Unretained(this));
  input_handler_->SetClient(make_scoped_ptr(
      new devtools::input::Client(notifier_)));
}

void DevToolsProtocolDispatcher::SetTracingHandler(
    devtools::tracing::TracingHandler* tracing_handler) {
  DCHECK(!tracing_handler_);
  tracing_handler_ = tracing_handler;
  command_handlers_["Tracing.start"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnTracingStart,
          base::Unretained(this));
  command_handlers_["Tracing.end"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnTracingEnd,
          base::Unretained(this));
  command_handlers_["Tracing.getCategories"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnTracingGetCategories,
          base::Unretained(this));
  command_handlers_["Tracing.requestMemoryDump"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnTracingRequestMemoryDump,
          base::Unretained(this));
  command_handlers_["Tracing.recordClockSyncMarker"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnTracingRecordClockSyncMarker,
          base::Unretained(this));
  tracing_handler_->SetClient(make_scoped_ptr(
      new devtools::tracing::Client(notifier_)));
}

void DevToolsProtocolDispatcher::SetSystemInfoHandler(
    devtools::system_info::SystemInfoHandler* system_info_handler) {
  DCHECK(!system_info_handler_);
  system_info_handler_ = system_info_handler;
  command_handlers_["SystemInfo.getInfo"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnSystemInfoGetInfo,
          base::Unretained(this));
  system_info_handler_->SetClient(make_scoped_ptr(
      new devtools::system_info::Client(notifier_)));
}

void DevToolsProtocolDispatcher::SetTetheringHandler(
    devtools::tethering::TetheringHandler* tethering_handler) {
  DCHECK(!tethering_handler_);
  tethering_handler_ = tethering_handler;
  command_handlers_["Tethering.bind"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnTetheringBind,
          base::Unretained(this));
  command_handlers_["Tethering.unbind"] =
      base::Bind(
          &DevToolsProtocolDispatcher::OnTetheringUnbind,
          base::Unretained(this));
  tethering_handler_->SetClient(make_scoped_ptr(
      new devtools::tethering::Client(notifier_)));
}

namespace devtools {

const char kProtocolVersion[] = "1.1";

bool IsSupportedProtocolVersion(const std::string& version) {
  std::vector<base::StringPiece> tokens = base::SplitStringPiece(
      version, ".", base::KEEP_WHITESPACE, base::SPLIT_WANT_NONEMPTY);
  int major, minor;
  return tokens.size() == 2 &&
      base::StringToInt(tokens[0], &major) && major == 1 &&
      base::StringToInt(tokens[1], &minor) && minor <= 1;
}

template<>
base::Value* CreateValue(const std::string& param) {
  return new base::StringValue(param);
}

namespace inspector {

Client::Client(DevToolsProtocolDelegate* notifier)
    : DevToolsProtocolClient(notifier) {
}

Client::~Client() {
}

void Client::Detached(
    scoped_refptr<DetachedParams> params) {
  SendNotification("Inspector.detached",
                   params->ToValue());
}

void Client::TargetCrashed(
    scoped_refptr<TargetCrashedParams> params) {
  SendNotification("Inspector.targetCrashed",
                   params->ToValue());
}

}  // namespace inspector

namespace memory {
const char kPressureLevelModerate[] = "moderate";
const char kPressureLevelCritical[] = "critical";
}  // namespace memory

namespace page {
namespace start_screencast {
const char kFormatJpeg[] = "jpeg";
const char kFormatPng[] = "png";
}  // namespace start_screencast
}  // namespace page

namespace page {

Client::Client(DevToolsProtocolDelegate* notifier)
    : DevToolsProtocolClient(notifier) {
}

Client::~Client() {
}

void Client::SendCaptureScreenshotResponse(
    DevToolsCommandId command_id,
    scoped_refptr<CaptureScreenshotResponse> params) {
  SendSuccess(command_id, params->ToValue());
}

void Client::ScreencastFrame(
    scoped_refptr<ScreencastFrameParams> params) {
  SendNotification("Page.screencastFrame",
                   params->ToValue());
}

void Client::ScreencastVisibilityChanged(
    scoped_refptr<ScreencastVisibilityChangedParams> params) {
  SendNotification("Page.screencastVisibilityChanged",
                   params->ToValue());
}

void Client::ColorPicked(
    scoped_refptr<ColorPickedParams> params) {
  SendNotification("Page.colorPicked",
                   params->ToValue());
}

void Client::InterstitialShown(
    scoped_refptr<InterstitialShownParams> params) {
  SendNotification("Page.interstitialShown",
                   params->ToValue());
}

void Client::InterstitialHidden(
    scoped_refptr<InterstitialHiddenParams> params) {
  SendNotification("Page.interstitialHidden",
                   params->ToValue());
}

}  // namespace page

namespace emulation {
namespace set_touch_emulation_enabled {
const char kConfigurationMobile[] = "mobile";
const char kConfigurationDesktop[] = "desktop";
}  // namespace set_touch_emulation_enabled
}  // namespace emulation

namespace security {
const char kSecurityStateUnknown[] = "unknown";
const char kSecurityStateNeutral[] = "neutral";
const char kSecurityStateInsecure[] = "insecure";
const char kSecurityStateWarning[] = "warning";
const char kSecurityStateSecure[] = "secure";
const char kSecurityStateInfo[] = "info";
}  // namespace security

namespace security {

Client::Client(DevToolsProtocolDelegate* notifier)
    : DevToolsProtocolClient(notifier) {
}

Client::~Client() {
}

void Client::SecurityStateChanged(
    scoped_refptr<SecurityStateChangedParams> params) {
  SendNotification("Security.securityStateChanged",
                   params->ToValue());
}

}  // namespace security

namespace network {

Client::Client(DevToolsProtocolDelegate* notifier)
    : DevToolsProtocolClient(notifier) {
}

Client::~Client() {
}

void Client::SendGetCookiesResponse(
    DevToolsCommandId command_id,
    scoped_refptr<GetCookiesResponse> params) {
  SendSuccess(command_id, params->ToValue());
}

void Client::SendDeleteCookieResponse(
    DevToolsCommandId command_id,
    scoped_refptr<DeleteCookieResponse> params) {
  SendSuccess(command_id, params->ToValue());
}

}  // namespace network

namespace io {

Client::Client(DevToolsProtocolDelegate* notifier)
    : DevToolsProtocolClient(notifier) {
}

Client::~Client() {
}

void Client::SendReadResponse(
    DevToolsCommandId command_id,
    scoped_refptr<ReadResponse> params) {
  SendSuccess(command_id, params->ToValue());
}

}  // namespace io

namespace service_worker {
const char kServiceWorkerVersionRunningStatusStopped[] = "stopped";
const char kServiceWorkerVersionRunningStatusStarting[] = "starting";
const char kServiceWorkerVersionRunningStatusRunning[] = "running";
const char kServiceWorkerVersionRunningStatusStopping[] = "stopping";
}  // namespace service_worker

namespace service_worker {
const char kServiceWorkerVersionStatusNew[] = "new";
const char kServiceWorkerVersionStatusInstalling[] = "installing";
const char kServiceWorkerVersionStatusInstalled[] = "installed";
const char kServiceWorkerVersionStatusActivating[] = "activating";
const char kServiceWorkerVersionStatusActivated[] = "activated";
const char kServiceWorkerVersionStatusRedundant[] = "redundant";
}  // namespace service_worker

namespace service_worker {

Client::Client(DevToolsProtocolDelegate* notifier)
    : DevToolsProtocolClient(notifier) {
}

Client::~Client() {
}

void Client::WorkerCreated(
    scoped_refptr<WorkerCreatedParams> params) {
  SendNotification("ServiceWorker.workerCreated",
                   params->ToValue());
}

void Client::WorkerTerminated(
    scoped_refptr<WorkerTerminatedParams> params) {
  SendNotification("ServiceWorker.workerTerminated",
                   params->ToValue());
}

void Client::DispatchMessage(
    scoped_refptr<DispatchMessageParams> params) {
  SendNotification("ServiceWorker.dispatchMessage",
                   params->ToValue());
}

void Client::WorkerRegistrationUpdated(
    scoped_refptr<WorkerRegistrationUpdatedParams> params) {
  SendNotification("ServiceWorker.workerRegistrationUpdated",
                   params->ToValue());
}

void Client::WorkerVersionUpdated(
    scoped_refptr<WorkerVersionUpdatedParams> params) {
  SendNotification("ServiceWorker.workerVersionUpdated",
                   params->ToValue());
}

void Client::WorkerErrorReported(
    scoped_refptr<WorkerErrorReportedParams> params) {
  SendNotification("ServiceWorker.workerErrorReported",
                   params->ToValue());
}

void Client::DebugOnStartUpdated(
    scoped_refptr<DebugOnStartUpdatedParams> params) {
  SendNotification("ServiceWorker.debugOnStartUpdated",
                   params->ToValue());
}

}  // namespace service_worker

namespace input {
namespace dispatch_key_event {
const char kTypeKeyDown[] = "keyDown";
const char kTypeKeyUp[] = "keyUp";
const char kTypeRawKeyDown[] = "rawKeyDown";
const char kTypeChar[] = "char";
}  // namespace dispatch_key_event
}  // namespace input

namespace input {
namespace dispatch_mouse_event {
const char kTypeMousePressed[] = "mousePressed";
const char kTypeMouseReleased[] = "mouseReleased";
const char kTypeMouseMoved[] = "mouseMoved";
}  // namespace dispatch_mouse_event
}  // namespace input

namespace input {
namespace dispatch_mouse_event {
const char kButtonNone[] = "none";
const char kButtonLeft[] = "left";
const char kButtonMiddle[] = "middle";
const char kButtonRight[] = "right";
}  // namespace dispatch_mouse_event
}  // namespace input

namespace input {
namespace emulate_touch_from_mouse_event {
const char kTypeMousePressed[] = "mousePressed";
const char kTypeMouseReleased[] = "mouseReleased";
const char kTypeMouseMoved[] = "mouseMoved";
const char kTypeMouseWheel[] = "mouseWheel";
}  // namespace emulate_touch_from_mouse_event
}  // namespace input

namespace input {
namespace emulate_touch_from_mouse_event {
const char kButtonNone[] = "none";
const char kButtonLeft[] = "left";
const char kButtonMiddle[] = "middle";
const char kButtonRight[] = "right";
}  // namespace emulate_touch_from_mouse_event
}  // namespace input

namespace input {
const char kGestureSourceTypeDefault[] = "default";
const char kGestureSourceTypeTouch[] = "touch";
const char kGestureSourceTypeMouse[] = "mouse";
}  // namespace input

namespace input {

Client::Client(DevToolsProtocolDelegate* notifier)
    : DevToolsProtocolClient(notifier) {
}

Client::~Client() {
}

void Client::SendSynthesizePinchGestureResponse(
    DevToolsCommandId command_id,
    scoped_refptr<SynthesizePinchGestureResponse> params) {
  SendSuccess(command_id, params->ToValue());
}

void Client::SendSynthesizeScrollGestureResponse(
    DevToolsCommandId command_id,
    scoped_refptr<SynthesizeScrollGestureResponse> params) {
  SendSuccess(command_id, params->ToValue());
}

void Client::SendSynthesizeTapGestureResponse(
    DevToolsCommandId command_id,
    scoped_refptr<SynthesizeTapGestureResponse> params) {
  SendSuccess(command_id, params->ToValue());
}

}  // namespace input

namespace tracing {
namespace start {
const char kTransferModeReportEvents[] = "ReportEvents";
const char kTransferModeReturnAsStream[] = "ReturnAsStream";
}  // namespace start
}  // namespace tracing

namespace tracing {

Client::Client(DevToolsProtocolDelegate* notifier)
    : DevToolsProtocolClient(notifier) {
}

Client::~Client() {
}

void Client::SendStartResponse(
    DevToolsCommandId command_id,
    scoped_refptr<StartResponse> params) {
  SendSuccess(command_id, params->ToValue());
}

void Client::SendEndResponse(
    DevToolsCommandId command_id,
    scoped_refptr<EndResponse> params) {
  SendSuccess(command_id, params->ToValue());
}

void Client::SendGetCategoriesResponse(
    DevToolsCommandId command_id,
    scoped_refptr<GetCategoriesResponse> params) {
  SendSuccess(command_id, params->ToValue());
}

void Client::SendRequestMemoryDumpResponse(
    DevToolsCommandId command_id,
    scoped_refptr<RequestMemoryDumpResponse> params) {
  SendSuccess(command_id, params->ToValue());
}

void Client::DataCollected(
    scoped_refptr<DataCollectedParams> params) {
  SendNotification("Tracing.dataCollected",
                   params->ToValue());
}

void Client::TracingComplete(
    scoped_refptr<TracingCompleteParams> params) {
  SendNotification("Tracing.tracingComplete",
                   params->ToValue());
}

void Client::BufferUsage(
    scoped_refptr<BufferUsageParams> params) {
  SendNotification("Tracing.bufferUsage",
                   params->ToValue());
}

}  // namespace tracing

namespace system_info {

Client::Client(DevToolsProtocolDelegate* notifier)
    : DevToolsProtocolClient(notifier) {
}

Client::~Client() {
}

void Client::SendGetInfoResponse(
    DevToolsCommandId command_id,
    scoped_refptr<GetInfoResponse> params) {
  SendSuccess(command_id, params->ToValue());
}

}  // namespace system_info

namespace tethering {

Client::Client(DevToolsProtocolDelegate* notifier)
    : DevToolsProtocolClient(notifier) {
}

Client::~Client() {
}

void Client::SendBindResponse(
    DevToolsCommandId command_id,
    scoped_refptr<BindResponse> params) {
  SendSuccess(command_id, params->ToValue());
}

void Client::SendUnbindResponse(
    DevToolsCommandId command_id,
    scoped_refptr<UnbindResponse> params) {
  SendSuccess(command_id, params->ToValue());
}

void Client::Accepted(
    scoped_refptr<AcceptedParams> params) {
  SendNotification("Tethering.accepted",
                   params->ToValue());
}

}  // namespace tethering

}  // namespace devtools

}  // namespace content
