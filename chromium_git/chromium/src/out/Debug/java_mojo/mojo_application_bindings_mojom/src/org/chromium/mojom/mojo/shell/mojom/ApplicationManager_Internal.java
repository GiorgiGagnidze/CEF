
// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     mojo/shell/public/interfaces/application_manager.mojom
//

package org.chromium.mojom.mojo.shell.mojom;

import org.chromium.base.annotations.SuppressFBWarnings;


class ApplicationManager_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<ApplicationManager, ApplicationManager.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<ApplicationManager, ApplicationManager.Proxy>() {
    
        public String getName() {
            return "mojo::shell::mojom::ApplicationManager";
        }
    
        public int getVersion() {
          return 0;
        }
    
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }
    
        public Stub buildStub(org.chromium.mojo.system.Core core, ApplicationManager impl) {
            return new Stub(core, impl);
        }
    
        public ApplicationManager[] buildArray(int size) {
          return new ApplicationManager[size];
        }
    };


    private static final int CREATE_INSTANCE_FOR_HANDLE_ORDINAL = 0;

    private static final int ADD_LISTENER_ORDINAL = 1;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements ApplicationManager.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void createInstanceForHandle(
org.chromium.mojo.system.UntypedHandle channel, String url, org.chromium.mojom.mojo.CapabilityFilter filter, org.chromium.mojo.bindings.InterfaceRequest<PidReceiver> pidReceiver) {

            ApplicationManagerCreateInstanceForHandleParams _message = new ApplicationManagerCreateInstanceForHandleParams();

            _message.channel = channel;

            _message.url = url;

            _message.filter = filter;

            _message.pidReceiver = pidReceiver;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(CREATE_INSTANCE_FOR_HANDLE_ORDINAL)));

        }


        @Override
        public void addListener(
ApplicationManagerListener listener) {

            ApplicationManagerAddListenerParams _message = new ApplicationManagerAddListenerParams();

            _message.listener = listener;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ADD_LISTENER_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<ApplicationManager> {

        Stub(org.chromium.mojo.system.Core core, ApplicationManager impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.NO_FLAG)) {
                    return false;
                }
                switch(header.getType()) {
            
                    case org.chromium.mojo.bindings.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                ApplicationManager_Internal.MANAGER, messageWithHeader);
            
            
            
            
            
                    case CREATE_INSTANCE_FOR_HANDLE_ORDINAL: {
            
                        ApplicationManagerCreateInstanceForHandleParams data =
                                ApplicationManagerCreateInstanceForHandleParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().createInstanceForHandle(data.channel, data.url, data.filter, data.pidReceiver);
                        return true;
                    }
            
            
            
            
            
                    case ADD_LISTENER_ORDINAL: {
            
                        ApplicationManagerAddListenerParams data =
                                ApplicationManagerAddListenerParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().addListener(data.listener);
                        return true;
                    }
            
            
                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG)) {
                    return false;
                }
                switch(header.getType()) {
            
                    case org.chromium.mojo.bindings.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), ApplicationManager_Internal.MANAGER, messageWithHeader, receiver);
            
            
            
            
            
            
                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class ApplicationManagerCreateInstanceForHandleParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    
    
    
    
    
        public org.chromium.mojo.system.UntypedHandle channel;
    
        public String url;
    
        public org.chromium.mojom.mojo.CapabilityFilter filter;
    
        public org.chromium.mojo.bindings.InterfaceRequest<PidReceiver> pidReceiver;
    
    
    
        private ApplicationManagerCreateInstanceForHandleParams(int version) {
            super(STRUCT_SIZE, version);
    
    
            channel = org.chromium.mojo.system.InvalidHandle.INSTANCE;
    
    
    
    
    
    
    
    
        }
    
        public ApplicationManagerCreateInstanceForHandleParams() {
            this(0);
        }
    
        public static ApplicationManagerCreateInstanceForHandleParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        @SuppressWarnings("unchecked")
        public static ApplicationManagerCreateInstanceForHandleParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            ApplicationManagerCreateInstanceForHandleParams result = new ApplicationManagerCreateInstanceForHandleParams(mainDataHeader.elementsOrVersion);
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.channel = decoder0.readUntypedHandle(8, false);
                
            }
    
    
    
    
    
    
    
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.pidReceiver = decoder0.readInterfaceRequest(12, false);
                
            }
    
    
    
    
    
    
    
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.url = decoder0.readString(16, false);
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                
                result.filter = org.chromium.mojom.mojo.CapabilityFilter.decode(decoder1);
                
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
    
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    
    
    
            
            
            encoder0.encode(channel, 8, false);
            
    
    
    
    
    
    
    
    
    
            
            
            encoder0.encode(pidReceiver, 12, false);
            
    
    
    
    
    
    
    
    
    
            
            
            encoder0.encode(url, 16, false);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            
            
            encoder0.encode(filter, 24, false);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
    
            ApplicationManagerCreateInstanceForHandleParams other = (ApplicationManagerCreateInstanceForHandleParams) object;
    
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.channel, other.channel))
                return false;
    
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.url, other.url))
                return false;
    
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.filter, other.filter))
                return false;
    
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.pidReceiver, other.pidReceiver))
                return false;
    
    
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(channel);
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(url);
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(filter);
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(pidReceiver);
    
            return result;
        }
    }



    
    static final class ApplicationManagerAddListenerParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    
    
    
    
    
        public ApplicationManagerListener listener;
    
    
    
        private ApplicationManagerAddListenerParams(int version) {
            super(STRUCT_SIZE, version);
    
    
    
        }
    
        public ApplicationManagerAddListenerParams() {
            this(0);
        }
    
        public static ApplicationManagerAddListenerParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        @SuppressWarnings("unchecked")
        public static ApplicationManagerAddListenerParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            ApplicationManagerAddListenerParams result = new ApplicationManagerAddListenerParams(mainDataHeader.elementsOrVersion);
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.listener = decoder0.readServiceInterface(8, false, ApplicationManagerListener.MANAGER);
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
    
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    
    
    
            
            
            encoder0.encode(listener, 8, false, ApplicationManagerListener.MANAGER);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
    
            ApplicationManagerAddListenerParams other = (ApplicationManagerAddListenerParams) object;
    
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.listener, other.listener))
                return false;
    
    
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(listener);
    
            return result;
        }
    }



}
