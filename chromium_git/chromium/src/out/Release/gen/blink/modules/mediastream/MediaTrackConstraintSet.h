// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#ifndef MediaTrackConstraintSet_h
#define MediaTrackConstraintSet_h

#include "bindings/core/v8/Dictionary.h"
#include "bindings/core/v8/Nullable.h"
#include "modules/ModulesExport.h"
#include "modules/mediastream/ConstrainBooleanParameters.h"
#include "modules/mediastream/ConstrainDOMStringParameters.h"
#include "modules/mediastream/ConstrainDoubleRange.h"
#include "modules/mediastream/ConstrainLongRange.h"
#include "platform/heap/Handle.h"
#include "wtf/Vector.h"

namespace blink {

class MODULES_EXPORT MediaTrackConstraintSet {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();
public:
    MediaTrackConstraintSet();
    virtual ~MediaTrackConstraintSet();

    bool hasAspectRatio() const { return !m_aspectRatio.isNull(); }
    ConstrainDoubleRange aspectRatio() const { return m_aspectRatio.get(); }
    void setAspectRatio(ConstrainDoubleRange value) { m_aspectRatio = value; }

    bool hasChannelCount() const { return !m_channelCount.isNull(); }
    ConstrainLongRange channelCount() const { return m_channelCount.get(); }
    void setChannelCount(ConstrainLongRange value) { m_channelCount = value; }

    bool hasDeviceId() const { return !m_deviceId.isNull(); }
    ConstrainDOMStringParameters deviceId() const { return m_deviceId.get(); }
    void setDeviceId(ConstrainDOMStringParameters value) { m_deviceId = value; }

    bool hasEchoCancellation() const { return !m_echoCancellation.isNull(); }
    ConstrainBooleanParameters echoCancellation() const { return m_echoCancellation.get(); }
    void setEchoCancellation(ConstrainBooleanParameters value) { m_echoCancellation = value; }

    bool hasFacingMode() const { return !m_facingMode.isNull(); }
    ConstrainDOMStringParameters facingMode() const { return m_facingMode.get(); }
    void setFacingMode(ConstrainDOMStringParameters value) { m_facingMode = value; }

    bool hasFrameRate() const { return !m_frameRate.isNull(); }
    ConstrainDoubleRange frameRate() const { return m_frameRate.get(); }
    void setFrameRate(ConstrainDoubleRange value) { m_frameRate = value; }

    bool hasGroupId() const { return !m_groupId.isNull(); }
    ConstrainDOMStringParameters groupId() const { return m_groupId.get(); }
    void setGroupId(ConstrainDOMStringParameters value) { m_groupId = value; }

    bool hasHeight() const { return !m_height.isNull(); }
    ConstrainLongRange height() const { return m_height.get(); }
    void setHeight(ConstrainLongRange value) { m_height = value; }

    bool hasLatency() const { return !m_latency.isNull(); }
    ConstrainDoubleRange latency() const { return m_latency.get(); }
    void setLatency(ConstrainDoubleRange value) { m_latency = value; }

    bool hasMandatory() const { return !m_mandatory.isUndefinedOrNull(); }
    Dictionary mandatory() const { return m_mandatory; }
    void setMandatory(Dictionary value) { m_mandatory = value; }

    bool hasOptional() const { return !m_optional.isNull(); }
    const Vector<Dictionary>& optional() const { return m_optional.get(); }
    void setOptional(const Vector<Dictionary>& value) { m_optional = value; }

    bool hasSampleRate() const { return !m_sampleRate.isNull(); }
    ConstrainLongRange sampleRate() const { return m_sampleRate.get(); }
    void setSampleRate(ConstrainLongRange value) { m_sampleRate = value; }

    bool hasSampleSize() const { return !m_sampleSize.isNull(); }
    ConstrainLongRange sampleSize() const { return m_sampleSize.get(); }
    void setSampleSize(ConstrainLongRange value) { m_sampleSize = value; }

    bool hasVolume() const { return !m_volume.isNull(); }
    ConstrainDoubleRange volume() const { return m_volume.get(); }
    void setVolume(ConstrainDoubleRange value) { m_volume = value; }

    bool hasWidth() const { return !m_width.isNull(); }
    ConstrainLongRange width() const { return m_width.get(); }
    void setWidth(ConstrainLongRange value) { m_width = value; }

    DECLARE_VIRTUAL_TRACE();

private:
    Nullable<ConstrainDoubleRange> m_aspectRatio;
    Nullable<ConstrainLongRange> m_channelCount;
    Nullable<ConstrainDOMStringParameters> m_deviceId;
    Nullable<ConstrainBooleanParameters> m_echoCancellation;
    Nullable<ConstrainDOMStringParameters> m_facingMode;
    Nullable<ConstrainDoubleRange> m_frameRate;
    Nullable<ConstrainDOMStringParameters> m_groupId;
    Nullable<ConstrainLongRange> m_height;
    Nullable<ConstrainDoubleRange> m_latency;
    Dictionary m_mandatory;
    Nullable<Vector<Dictionary>> m_optional;
    Nullable<ConstrainLongRange> m_sampleRate;
    Nullable<ConstrainLongRange> m_sampleSize;
    Nullable<ConstrainDoubleRange> m_volume;
    Nullable<ConstrainLongRange> m_width;

    friend class V8MediaTrackConstraintSet;
};

} // namespace blink

#endif // MediaTrackConstraintSet_h
