// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "V8BluetoothGATTCharacteristic.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/ScriptPromise.h"
#include "bindings/core/v8/ScriptState.h"
#include "bindings/core/v8/V8AbstractEventListener.h"
#include "bindings/core/v8/V8ArrayBuffer.h"
#include "bindings/core/v8/V8ArrayBufferView.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8DataView.h"
#include "bindings/core/v8/V8EventListenerList.h"
#include "bindings/core/v8/V8HiddenValue.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/modules/v8/UnionTypesModules.h"
#include "bindings/modules/v8/V8BluetoothCharacteristicProperties.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "core/dom/FlexibleArrayBufferView.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8BluetoothGATTCharacteristic::wrapperTypeInfo = { gin::kEmbedderBlink, V8BluetoothGATTCharacteristic::domTemplate, V8BluetoothGATTCharacteristic::refObject, V8BluetoothGATTCharacteristic::derefObject, V8BluetoothGATTCharacteristic::trace, V8BluetoothGATTCharacteristic::toActiveDOMObject, 0, V8BluetoothGATTCharacteristic::preparePrototypeAndInterfaceObject, V8BluetoothGATTCharacteristic::installConditionallyEnabledProperties, "BluetoothGATTCharacteristic", &V8EventTarget::wrapperTypeInfo, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::InheritFromEventTarget, WrapperTypeInfo::Dependent, WrapperTypeInfo::GarbageCollectedObject };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in BluetoothGATTCharacteristic.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& BluetoothGATTCharacteristic::s_wrapperTypeInfo = V8BluetoothGATTCharacteristic::wrapperTypeInfo;

namespace BluetoothGATTCharacteristicV8Internal {

static void uuidAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    BluetoothGATTCharacteristic* impl = V8BluetoothGATTCharacteristic::toImpl(holder);
    v8SetReturnValueString(info, impl->uuid(), info.GetIsolate());
}

static void uuidAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    BluetoothGATTCharacteristicV8Internal::uuidAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void propertiesAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    BluetoothGATTCharacteristic* impl = V8BluetoothGATTCharacteristic::toImpl(holder);
    RawPtr<BluetoothCharacteristicProperties> cppValue(impl->properties());
    if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue.get()))
        return;
    v8::Local<v8::Value> v8Value(toV8(cppValue.get(), holder, info.GetIsolate()));
    if (!v8Value.IsEmpty()) {
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), "properties"), v8Value);
        v8SetReturnValue(info, v8Value);
    }
}

static void propertiesAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    BluetoothGATTCharacteristicV8Internal::propertiesAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void valueAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    BluetoothGATTCharacteristic* impl = V8BluetoothGATTCharacteristic::toImpl(holder);
    RefPtr<DOMDataView> cppValue(impl->value());
    if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue.get()))
        return;
    v8::Local<v8::Value> v8Value(toV8(cppValue.get(), holder, info.GetIsolate()));
    if (!v8Value.IsEmpty()) {
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), "value"), v8Value);
        v8SetReturnValue(info, v8Value);
    }
}

static void valueAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    BluetoothGATTCharacteristicV8Internal::valueAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void oncharacteristicvaluechangedAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    BluetoothGATTCharacteristic* impl = V8BluetoothGATTCharacteristic::toImpl(holder);
    EventListener* cppValue(impl->oncharacteristicvaluechanged());
    v8SetReturnValue(info, cppValue ? v8::Local<v8::Value>(V8AbstractEventListener::cast(cppValue)->getListenerObject(impl->executionContext())) : v8::Local<v8::Value>(v8::Null(info.GetIsolate())));
}

static void oncharacteristicvaluechangedAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    BluetoothGATTCharacteristicV8Internal::oncharacteristicvaluechangedAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void oncharacteristicvaluechangedAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    BluetoothGATTCharacteristic* impl = V8BluetoothGATTCharacteristic::toImpl(holder);
    moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->oncharacteristicvaluechanged(), v8Value, V8BluetoothGATTCharacteristic::eventListenerCacheIndex);
    impl->setOncharacteristicvaluechanged(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void oncharacteristicvaluechangedAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Value> v8Value = info[0];
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    BluetoothGATTCharacteristicV8Internal::oncharacteristicvaluechangedAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void readValueMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    BluetoothGATTCharacteristic* impl = V8BluetoothGATTCharacteristic::toImpl(info.Holder());
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = impl->readValue(scriptState);
    v8SetReturnValue(info, result.v8Value());
}

static void readValueMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    BluetoothGATTCharacteristicV8Internal::readValueMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void writeValueMethodPromise(const v8::FunctionCallbackInfo<v8::Value>& info, ExceptionState& exceptionState)
{
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    BluetoothGATTCharacteristic* impl = V8BluetoothGATTCharacteristic::toImpl(info.Holder());
    ArrayBufferOrArrayBufferView value;
    {
        V8ArrayBufferOrArrayBufferView::toImpl(info.GetIsolate(), info[0], value, UnionTypeConversionMode::NotNullable, exceptionState);
        if (exceptionState.hadException())
            return;
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = impl->writeValue(scriptState, value);
    v8SetReturnValue(info, result.v8Value());
}

static void writeValueMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "writeValue", "BluetoothGATTCharacteristic", info.Holder(), info.GetIsolate());
    writeValueMethodPromise(info, exceptionState);
    if (exceptionState.hadException())
        v8SetReturnValue(info, exceptionState.reject(ScriptState::current(info.GetIsolate())).v8Value());
}

static void writeValueMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    BluetoothGATTCharacteristicV8Internal::writeValueMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void startNotificationsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    BluetoothGATTCharacteristic* impl = V8BluetoothGATTCharacteristic::toImpl(info.Holder());
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = impl->startNotifications(scriptState);
    v8SetReturnValue(info, result.v8Value());
}

static void startNotificationsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    BluetoothGATTCharacteristicV8Internal::startNotificationsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void stopNotificationsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    BluetoothGATTCharacteristic* impl = V8BluetoothGATTCharacteristic::toImpl(info.Holder());
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = impl->stopNotifications(scriptState);
    v8SetReturnValue(info, result.v8Value());
}

static void stopNotificationsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    BluetoothGATTCharacteristicV8Internal::stopNotificationsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

} // namespace BluetoothGATTCharacteristicV8Internal

const V8DOMConfiguration::AccessorConfiguration V8BluetoothGATTCharacteristicAccessors[] = {
    {"uuid", BluetoothGATTCharacteristicV8Internal::uuidAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"properties", BluetoothGATTCharacteristicV8Internal::propertiesAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"value", BluetoothGATTCharacteristicV8Internal::valueAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"oncharacteristicvaluechanged", BluetoothGATTCharacteristicV8Internal::oncharacteristicvaluechangedAttributeGetterCallback, BluetoothGATTCharacteristicV8Internal::oncharacteristicvaluechangedAttributeSetterCallback, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};

const V8DOMConfiguration::MethodConfiguration V8BluetoothGATTCharacteristicMethods[] = {
    {"readValue", BluetoothGATTCharacteristicV8Internal::readValueMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"writeValue", BluetoothGATTCharacteristicV8Internal::writeValueMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"startNotifications", BluetoothGATTCharacteristicV8Internal::startNotificationsMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"stopNotifications", BluetoothGATTCharacteristicV8Internal::stopNotificationsMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
};

static void installV8BluetoothGATTCharacteristicTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    if (!RuntimeEnabledFeatures::webBluetoothEnabled())
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "BluetoothGATTCharacteristic", V8EventTarget::domTemplate(isolate), V8BluetoothGATTCharacteristic::internalFieldCount, 0, 0, 0, 0, 0, 0);
    else
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "BluetoothGATTCharacteristic", V8EventTarget::domTemplate(isolate), V8BluetoothGATTCharacteristic::internalFieldCount,
            0, 0,
            V8BluetoothGATTCharacteristicAccessors, WTF_ARRAY_LENGTH(V8BluetoothGATTCharacteristicAccessors),
            V8BluetoothGATTCharacteristicMethods, WTF_ARRAY_LENGTH(V8BluetoothGATTCharacteristicMethods));
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
}

v8::Local<v8::FunctionTemplate> V8BluetoothGATTCharacteristic::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8BluetoothGATTCharacteristicTemplate);
}

bool V8BluetoothGATTCharacteristic::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8BluetoothGATTCharacteristic::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

BluetoothGATTCharacteristic* V8BluetoothGATTCharacteristic::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : 0;
}

ActiveDOMObject* V8BluetoothGATTCharacteristic::toActiveDOMObject(v8::Local<v8::Object> wrapper)
{
    return toImpl(wrapper);
}

void V8BluetoothGATTCharacteristic::refObject(ScriptWrappable* scriptWrappable)
{
}

void V8BluetoothGATTCharacteristic::derefObject(ScriptWrappable* scriptWrappable)
{
}

} // namespace blink
