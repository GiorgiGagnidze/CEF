// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "V8DevToolsHostPartial.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8DevToolsHost.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/modules/v8/V8DOMFileSystem.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "modules/filesystem/DevToolsHostFileSystem.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

namespace DevToolsHostPartialV8Internal {

static void isolatedFileSystemMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 2)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "isolatedFileSystem", "DevToolsHost", 2, info.Length()), info.GetIsolate());
        return;
    }
    DevToolsHost* impl = V8DevToolsHost::toImpl(info.Holder());
    V8StringResource<> fileSystemId;
    V8StringResource<> registeredName;
    {
        fileSystemId = info[0];
        if (!fileSystemId.prepare())
            return;
        registeredName = info[1];
        if (!registeredName.prepare())
            return;
    }
    v8SetReturnValue(info, DevToolsHostFileSystem::isolatedFileSystem(*impl, fileSystemId, registeredName));
}

static void isolatedFileSystemMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    DevToolsHostPartialV8Internal::isolatedFileSystemMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void upgradeDraggedFileSystemPermissionsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "upgradeDraggedFileSystemPermissions", "DevToolsHost", 1, info.Length()), info.GetIsolate());
        return;
    }
    DevToolsHost* impl = V8DevToolsHost::toImpl(info.Holder());
    DOMFileSystem* domFileSystem;
    {
        domFileSystem = V8DOMFileSystem::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!domFileSystem) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("upgradeDraggedFileSystemPermissions", "DevToolsHost", "parameter 1 is not of type 'DOMFileSystem'."));
            return;
        }
    }
    DevToolsHostFileSystem::upgradeDraggedFileSystemPermissions(*impl, domFileSystem);
}

static void upgradeDraggedFileSystemPermissionsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    DevToolsHostPartialV8Internal::upgradeDraggedFileSystemPermissionsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

} // namespace DevToolsHostPartialV8Internal

void V8DevToolsHostPartial::installV8DevToolsHostTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    V8DevToolsHost::installV8DevToolsHostTemplate(functionTemplate, isolate);

    v8::Local<v8::Signature> defaultSignature;
    if (!RuntimeEnabledFeatures::fileSystemEnabled())
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "DevToolsHost", v8::Local<v8::FunctionTemplate>(), V8DevToolsHost::internalFieldCount, 0, 0, 0, 0, 0, 0);
    else
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "DevToolsHost", v8::Local<v8::FunctionTemplate>(), V8DevToolsHost::internalFieldCount,
            0, 0,
            0, 0,
            0, 0);
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
    ExecutionContext* context = currentExecutionContext(isolate);
    ALLOW_UNUSED_LOCAL(context);
    if (RuntimeEnabledFeatures::fileSystemEnabled()) {
        const V8DOMConfiguration::MethodConfiguration isolatedFileSystemMethodConfiguration = {"isolatedFileSystem", DevToolsHostPartialV8Internal::isolatedFileSystemMethodCallback, 0, 2, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype};
        V8DOMConfiguration::installMethod(isolate, instanceTemplate, prototypeTemplate, functionTemplate, defaultSignature, isolatedFileSystemMethodConfiguration);
    }
    if (RuntimeEnabledFeatures::fileSystemEnabled()) {
        const V8DOMConfiguration::MethodConfiguration upgradeDraggedFileSystemPermissionsMethodConfiguration = {"upgradeDraggedFileSystemPermissions", DevToolsHostPartialV8Internal::upgradeDraggedFileSystemPermissionsMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype};
        V8DOMConfiguration::installMethod(isolate, instanceTemplate, prototypeTemplate, functionTemplate, defaultSignature, upgradeDraggedFileSystemPermissionsMethodConfiguration);
    }
}

void V8DevToolsHostPartial::preparePrototypeAndInterfaceObject(v8::Local<v8::Context> context, v8::Local<v8::Object> prototypeObject, v8::Local<v8::Function> interfaceObject, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    V8DevToolsHost::preparePrototypeAndInterfaceObject(context, prototypeObject, interfaceObject, interfaceTemplate);
}

void V8DevToolsHostPartial::initialize()
{
    // Should be invoked from initModules.
    V8DevToolsHost::updateWrapperTypeInfo(
        &V8DevToolsHostPartial::installV8DevToolsHostTemplate,
        &V8DevToolsHostPartial::preparePrototypeAndInterfaceObject);
}

} // namespace blink
