// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "V8USBAlternateInterface.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/modules/v8/V8USBEndpoint.h"
#include "bindings/modules/v8/V8USBInterface.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "core/frame/LocalDOMWindow.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8USBAlternateInterface::wrapperTypeInfo = { gin::kEmbedderBlink, V8USBAlternateInterface::domTemplate, V8USBAlternateInterface::refObject, V8USBAlternateInterface::derefObject, V8USBAlternateInterface::trace, 0, 0, V8USBAlternateInterface::preparePrototypeAndInterfaceObject, V8USBAlternateInterface::installConditionallyEnabledProperties, "USBAlternateInterface", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent, WrapperTypeInfo::GarbageCollectedObject };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in USBAlternateInterface.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& USBAlternateInterface::s_wrapperTypeInfo = V8USBAlternateInterface::wrapperTypeInfo;

namespace USBAlternateInterfaceV8Internal {

static void alternateSettingAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    USBAlternateInterface* impl = V8USBAlternateInterface::toImpl(holder);
    v8SetReturnValueUnsigned(info, impl->alternateSetting());
}

static void alternateSettingAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    USBAlternateInterfaceV8Internal::alternateSettingAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void interfaceClassAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    USBAlternateInterface* impl = V8USBAlternateInterface::toImpl(holder);
    v8SetReturnValueUnsigned(info, impl->interfaceClass());
}

static void interfaceClassAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    USBAlternateInterfaceV8Internal::interfaceClassAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void interfaceSubclassAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    USBAlternateInterface* impl = V8USBAlternateInterface::toImpl(holder);
    v8SetReturnValueUnsigned(info, impl->interfaceSubclass());
}

static void interfaceSubclassAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    USBAlternateInterfaceV8Internal::interfaceSubclassAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void interfaceProtocolAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    USBAlternateInterface* impl = V8USBAlternateInterface::toImpl(holder);
    v8SetReturnValueUnsigned(info, impl->interfaceProtocol());
}

static void interfaceProtocolAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    USBAlternateInterfaceV8Internal::interfaceProtocolAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void interfaceNameAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    USBAlternateInterface* impl = V8USBAlternateInterface::toImpl(holder);
    v8SetReturnValueStringOrNull(info, impl->interfaceName(), info.GetIsolate());
}

static void interfaceNameAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    USBAlternateInterfaceV8Internal::interfaceNameAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void endpointsAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    USBAlternateInterface* impl = V8USBAlternateInterface::toImpl(holder);
    v8SetReturnValue(info, toV8(impl->endpoints(), info.Holder(), info.GetIsolate()));
}

static void endpointsAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    USBAlternateInterfaceV8Internal::endpointsAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ConstructionContext, "USBAlternateInterface", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    USBInterface* deviceInterface;
    unsigned alternateSetting;
    {
        deviceInterface = V8USBInterface::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!deviceInterface) {
            exceptionState.throwTypeError("parameter 1 is not of type 'USBInterface'.");
            exceptionState.throwIfNeeded();
            return;
        }
        alternateSetting = toUInt8(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    RawPtr<USBAlternateInterface> impl = USBAlternateInterface::create(deviceInterface, alternateSetting, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8::Local<v8::Object> wrapper = info.Holder();
    wrapper = impl->associateWithWrapper(info.GetIsolate(), &V8USBAlternateInterface::wrapperTypeInfo, wrapper);
    v8SetReturnValue(info, wrapper);
}

} // namespace USBAlternateInterfaceV8Internal

const V8DOMConfiguration::AccessorConfiguration V8USBAlternateInterfaceAccessors[] = {
    {"alternateSetting", USBAlternateInterfaceV8Internal::alternateSettingAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"interfaceClass", USBAlternateInterfaceV8Internal::interfaceClassAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"interfaceSubclass", USBAlternateInterfaceV8Internal::interfaceSubclassAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"interfaceProtocol", USBAlternateInterfaceV8Internal::interfaceProtocolAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"interfaceName", USBAlternateInterfaceV8Internal::interfaceNameAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"endpoints", USBAlternateInterfaceV8Internal::endpointsAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};

void V8USBAlternateInterface::constructorCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SCOPED_SAMPLING_STATE("blink", "DOMConstructor");
    if (!info.IsConstructCall()) {
        V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::constructorNotCallableAsFunction("USBAlternateInterface"));
        return;
    }

    if (ConstructorMode::current(info.GetIsolate()) == ConstructorMode::WrapExistingObject) {
        v8SetReturnValue(info, info.Holder());
        return;
    }

    USBAlternateInterfaceV8Internal::constructor(info);
}

static void installV8USBAlternateInterfaceTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    if (!RuntimeEnabledFeatures::webUSBEnabled())
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "USBAlternateInterface", v8::Local<v8::FunctionTemplate>(), V8USBAlternateInterface::internalFieldCount, 0, 0, 0, 0, 0, 0);
    else
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "USBAlternateInterface", v8::Local<v8::FunctionTemplate>(), V8USBAlternateInterface::internalFieldCount,
            0, 0,
            V8USBAlternateInterfaceAccessors, WTF_ARRAY_LENGTH(V8USBAlternateInterfaceAccessors),
            0, 0);
    functionTemplate->SetCallHandler(V8USBAlternateInterface::constructorCallback);
    functionTemplate->SetLength(2);
    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
}

v8::Local<v8::FunctionTemplate> V8USBAlternateInterface::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8USBAlternateInterfaceTemplate);
}

bool V8USBAlternateInterface::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8USBAlternateInterface::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

USBAlternateInterface* V8USBAlternateInterface::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : 0;
}

void V8USBAlternateInterface::refObject(ScriptWrappable* scriptWrappable)
{
}

void V8USBAlternateInterface::derefObject(ScriptWrappable* scriptWrappable)
{
}

} // namespace blink
