// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skxfermode.proto

#ifndef PROTOBUF_skxfermode_2eproto__INCLUDED
#define PROTOBUF_skxfermode_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)
#include "cc/proto/cc_proto_export.h"

namespace cc {
namespace proto {

// Internal implementation detail -- do not call these.
void CC_PROTO_EXPORT protobuf_AddDesc_skxfermode_2eproto();
void protobuf_AssignDesc_skxfermode_2eproto();
void protobuf_ShutdownFile_skxfermode_2eproto();

class SkXfermode;

enum SkXfermode_Mode {
  SkXfermode_Mode_Mode_Clear = 0,
  SkXfermode_Mode_Mode_Src = 1,
  SkXfermode_Mode_Mode_Dst = 2,
  SkXfermode_Mode_Mode_SrcOver = 3,
  SkXfermode_Mode_Mode_DstOver = 4,
  SkXfermode_Mode_Mode_SrcIn = 5,
  SkXfermode_Mode_Mode_DstIn = 6,
  SkXfermode_Mode_Mode_SrcOut = 7,
  SkXfermode_Mode_Mode_DstOut = 8,
  SkXfermode_Mode_Mode_SrcATop = 9,
  SkXfermode_Mode_Mode_DstATop = 10,
  SkXfermode_Mode_Mode_XOR = 11,
  SkXfermode_Mode_Mode_Plus = 12,
  SkXfermode_Mode_Mode_Modulate = 13,
  SkXfermode_Mode_Mode_Screen = 14,
  SkXfermode_Mode_Mode_Overlay = 15,
  SkXfermode_Mode_Mode_Darken = 16,
  SkXfermode_Mode_Mode_Lighten = 17,
  SkXfermode_Mode_Mode_ColorDodge = 18,
  SkXfermode_Mode_Mode_ColorBurn = 19,
  SkXfermode_Mode_Mode_HardLight = 20,
  SkXfermode_Mode_Mode_SoftLight = 21,
  SkXfermode_Mode_Mode_Difference = 22,
  SkXfermode_Mode_Mode_Exclusion = 23,
  SkXfermode_Mode_Mode_Multiply = 24,
  SkXfermode_Mode_Mode_Hue = 25,
  SkXfermode_Mode_Mode_Saturation = 26,
  SkXfermode_Mode_Mode_Color = 27,
  SkXfermode_Mode_Mode_Luminosity = 28
};
CC_PROTO_EXPORT bool SkXfermode_Mode_IsValid(int value);
const SkXfermode_Mode SkXfermode_Mode_Mode_MIN = SkXfermode_Mode_Mode_Clear;
const SkXfermode_Mode SkXfermode_Mode_Mode_MAX = SkXfermode_Mode_Mode_Luminosity;
const int SkXfermode_Mode_Mode_ARRAYSIZE = SkXfermode_Mode_Mode_MAX + 1;

// ===================================================================

class CC_PROTO_EXPORT SkXfermode : public ::google::protobuf::MessageLite {
 public:
  SkXfermode();
  virtual ~SkXfermode();

  SkXfermode(const SkXfermode& from);

  inline SkXfermode& operator=(const SkXfermode& from) {
    CopyFrom(from);
    return *this;
  }

  static const SkXfermode& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SkXfermode* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SkXfermode* other);

  // implements Message ----------------------------------------------

  SkXfermode* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SkXfermode& from);
  void MergeFrom(const SkXfermode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef SkXfermode_Mode Mode;
  static const Mode Mode_Clear = SkXfermode_Mode_Mode_Clear;
  static const Mode Mode_Src = SkXfermode_Mode_Mode_Src;
  static const Mode Mode_Dst = SkXfermode_Mode_Mode_Dst;
  static const Mode Mode_SrcOver = SkXfermode_Mode_Mode_SrcOver;
  static const Mode Mode_DstOver = SkXfermode_Mode_Mode_DstOver;
  static const Mode Mode_SrcIn = SkXfermode_Mode_Mode_SrcIn;
  static const Mode Mode_DstIn = SkXfermode_Mode_Mode_DstIn;
  static const Mode Mode_SrcOut = SkXfermode_Mode_Mode_SrcOut;
  static const Mode Mode_DstOut = SkXfermode_Mode_Mode_DstOut;
  static const Mode Mode_SrcATop = SkXfermode_Mode_Mode_SrcATop;
  static const Mode Mode_DstATop = SkXfermode_Mode_Mode_DstATop;
  static const Mode Mode_XOR = SkXfermode_Mode_Mode_XOR;
  static const Mode Mode_Plus = SkXfermode_Mode_Mode_Plus;
  static const Mode Mode_Modulate = SkXfermode_Mode_Mode_Modulate;
  static const Mode Mode_Screen = SkXfermode_Mode_Mode_Screen;
  static const Mode Mode_Overlay = SkXfermode_Mode_Mode_Overlay;
  static const Mode Mode_Darken = SkXfermode_Mode_Mode_Darken;
  static const Mode Mode_Lighten = SkXfermode_Mode_Mode_Lighten;
  static const Mode Mode_ColorDodge = SkXfermode_Mode_Mode_ColorDodge;
  static const Mode Mode_ColorBurn = SkXfermode_Mode_Mode_ColorBurn;
  static const Mode Mode_HardLight = SkXfermode_Mode_Mode_HardLight;
  static const Mode Mode_SoftLight = SkXfermode_Mode_Mode_SoftLight;
  static const Mode Mode_Difference = SkXfermode_Mode_Mode_Difference;
  static const Mode Mode_Exclusion = SkXfermode_Mode_Mode_Exclusion;
  static const Mode Mode_Multiply = SkXfermode_Mode_Mode_Multiply;
  static const Mode Mode_Hue = SkXfermode_Mode_Mode_Hue;
  static const Mode Mode_Saturation = SkXfermode_Mode_Mode_Saturation;
  static const Mode Mode_Color = SkXfermode_Mode_Mode_Color;
  static const Mode Mode_Luminosity = SkXfermode_Mode_Mode_Luminosity;
  static inline bool Mode_IsValid(int value) {
    return SkXfermode_Mode_IsValid(value);
  }
  static const Mode Mode_MIN =
    SkXfermode_Mode_Mode_MIN;
  static const Mode Mode_MAX =
    SkXfermode_Mode_Mode_MAX;
  static const int Mode_ARRAYSIZE =
    SkXfermode_Mode_Mode_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cc.proto.SkXfermode)
 private:


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void CC_PROTO_EXPORT protobuf_AddDesc_skxfermode_2eproto_impl();
  #else
  friend void CC_PROTO_EXPORT protobuf_AddDesc_skxfermode_2eproto();
  #endif
  friend void protobuf_AssignDesc_skxfermode_2eproto();
  friend void protobuf_ShutdownFile_skxfermode_2eproto();

  void InitAsDefaultInstance();
  static SkXfermode* default_instance_;
};
// ===================================================================


// ===================================================================

// SkXfermode


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cc

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_skxfermode_2eproto__INCLUDED
