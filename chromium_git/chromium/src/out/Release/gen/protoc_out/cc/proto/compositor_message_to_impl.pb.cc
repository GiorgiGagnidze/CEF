// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compositor_message_to_impl.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "compositor_message_to_impl.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace cc {
namespace proto {

void protobuf_ShutdownFile_compositor_5fmessage_5fto_5fimpl_2eproto() {
  delete CompositorMessageToImpl::default_instance_;
  delete InitializeImpl::default_instance_;
  delete SetDeferCommits::default_instance_;
  delete StartCommit::default_instance_;
  delete BeginMainFrameAborted::default_instance_;
  delete SetNeedsRedraw::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_compositor_5fmessage_5fto_5fimpl_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_compositor_5fmessage_5fto_5fimpl_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::cc::proto::protobuf_AddDesc_commit_5fearlyout_5freason_2eproto();
  ::cc::proto::protobuf_AddDesc_layer_5ftree_5fhost_2eproto();
  ::cc::proto::protobuf_AddDesc_layer_5ftree_5fsettings_2eproto();
  ::cc::proto::protobuf_AddDesc_rect_2eproto();
  CompositorMessageToImpl::default_instance_ = new CompositorMessageToImpl();
  InitializeImpl::default_instance_ = new InitializeImpl();
  SetDeferCommits::default_instance_ = new SetDeferCommits();
  StartCommit::default_instance_ = new StartCommit();
  BeginMainFrameAborted::default_instance_ = new BeginMainFrameAborted();
  SetNeedsRedraw::default_instance_ = new SetNeedsRedraw();
  CompositorMessageToImpl::default_instance_->InitAsDefaultInstance();
  InitializeImpl::default_instance_->InitAsDefaultInstance();
  SetDeferCommits::default_instance_->InitAsDefaultInstance();
  StartCommit::default_instance_->InitAsDefaultInstance();
  BeginMainFrameAborted::default_instance_->InitAsDefaultInstance();
  SetNeedsRedraw::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_compositor_5fmessage_5fto_5fimpl_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_compositor_5fmessage_5fto_5fimpl_2eproto_once_);
void protobuf_AddDesc_compositor_5fmessage_5fto_5fimpl_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_compositor_5fmessage_5fto_5fimpl_2eproto_once_,
                 &protobuf_AddDesc_compositor_5fmessage_5fto_5fimpl_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_compositor_5fmessage_5fto_5fimpl_2eproto {
  StaticDescriptorInitializer_compositor_5fmessage_5fto_5fimpl_2eproto() {
    protobuf_AddDesc_compositor_5fmessage_5fto_5fimpl_2eproto();
  }
} static_descriptor_initializer_compositor_5fmessage_5fto_5fimpl_2eproto_;
#endif

// ===================================================================

bool CompositorMessageToImpl_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CompositorMessageToImpl_Type CompositorMessageToImpl::UNKNOWN;
const CompositorMessageToImpl_Type CompositorMessageToImpl::INITIALIZE_IMPL;
const CompositorMessageToImpl_Type CompositorMessageToImpl::CLOSE_IMPL;
const CompositorMessageToImpl_Type CompositorMessageToImpl::MAIN_THREAD_HAS_STOPPED_FLINGING_ON_IMPL;
const CompositorMessageToImpl_Type CompositorMessageToImpl::SET_NEEDS_COMMIT;
const CompositorMessageToImpl_Type CompositorMessageToImpl::SET_DEFER_COMMITS;
const CompositorMessageToImpl_Type CompositorMessageToImpl::START_COMMIT;
const CompositorMessageToImpl_Type CompositorMessageToImpl::BEGIN_MAIN_FRAME_ABORTED;
const CompositorMessageToImpl_Type CompositorMessageToImpl::SET_NEEDS_REDRAW;
const CompositorMessageToImpl_Type CompositorMessageToImpl::Type_MIN;
const CompositorMessageToImpl_Type CompositorMessageToImpl::Type_MAX;
const int CompositorMessageToImpl::Type_ARRAYSIZE;
#endif  // _MSC_VER
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompositorMessageToImpl::kMessageTypeFieldNumber;
const int CompositorMessageToImpl::kInitializeImplMessageFieldNumber;
const int CompositorMessageToImpl::kDeferCommitsMessageFieldNumber;
const int CompositorMessageToImpl::kStartCommitMessageFieldNumber;
const int CompositorMessageToImpl::kBeginMainFrameAbortedMessageFieldNumber;
const int CompositorMessageToImpl::kSetNeedsRedrawMessageFieldNumber;
#endif  // !_MSC_VER

CompositorMessageToImpl::CompositorMessageToImpl()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CompositorMessageToImpl::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  initialize_impl_message_ = const_cast< ::cc::proto::InitializeImpl*>(
      ::cc::proto::InitializeImpl::internal_default_instance());
#else
  initialize_impl_message_ = const_cast< ::cc::proto::InitializeImpl*>(&::cc::proto::InitializeImpl::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  defer_commits_message_ = const_cast< ::cc::proto::SetDeferCommits*>(
      ::cc::proto::SetDeferCommits::internal_default_instance());
#else
  defer_commits_message_ = const_cast< ::cc::proto::SetDeferCommits*>(&::cc::proto::SetDeferCommits::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  start_commit_message_ = const_cast< ::cc::proto::StartCommit*>(
      ::cc::proto::StartCommit::internal_default_instance());
#else
  start_commit_message_ = const_cast< ::cc::proto::StartCommit*>(&::cc::proto::StartCommit::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  begin_main_frame_aborted_message_ = const_cast< ::cc::proto::BeginMainFrameAborted*>(
      ::cc::proto::BeginMainFrameAborted::internal_default_instance());
#else
  begin_main_frame_aborted_message_ = const_cast< ::cc::proto::BeginMainFrameAborted*>(&::cc::proto::BeginMainFrameAborted::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  set_needs_redraw_message_ = const_cast< ::cc::proto::SetNeedsRedraw*>(
      ::cc::proto::SetNeedsRedraw::internal_default_instance());
#else
  set_needs_redraw_message_ = const_cast< ::cc::proto::SetNeedsRedraw*>(&::cc::proto::SetNeedsRedraw::default_instance());
#endif
}

CompositorMessageToImpl::CompositorMessageToImpl(const CompositorMessageToImpl& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CompositorMessageToImpl::SharedCtor() {
  _cached_size_ = 0;
  message_type_ = 0;
  initialize_impl_message_ = NULL;
  defer_commits_message_ = NULL;
  start_commit_message_ = NULL;
  begin_main_frame_aborted_message_ = NULL;
  set_needs_redraw_message_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompositorMessageToImpl::~CompositorMessageToImpl() {
  SharedDtor();
}

void CompositorMessageToImpl::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete initialize_impl_message_;
    delete defer_commits_message_;
    delete start_commit_message_;
    delete begin_main_frame_aborted_message_;
    delete set_needs_redraw_message_;
  }
}

void CompositorMessageToImpl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CompositorMessageToImpl& CompositorMessageToImpl::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_compositor_5fmessage_5fto_5fimpl_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_compositor_5fmessage_5fto_5fimpl_2eproto();
#endif
  return *default_instance_;
}

CompositorMessageToImpl* CompositorMessageToImpl::default_instance_ = NULL;

CompositorMessageToImpl* CompositorMessageToImpl::New() const {
  return new CompositorMessageToImpl;
}

void CompositorMessageToImpl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_type_ = 0;
    if (has_initialize_impl_message()) {
      if (initialize_impl_message_ != NULL) initialize_impl_message_->::cc::proto::InitializeImpl::Clear();
    }
    if (has_defer_commits_message()) {
      if (defer_commits_message_ != NULL) defer_commits_message_->::cc::proto::SetDeferCommits::Clear();
    }
    if (has_start_commit_message()) {
      if (start_commit_message_ != NULL) start_commit_message_->::cc::proto::StartCommit::Clear();
    }
    if (has_begin_main_frame_aborted_message()) {
      if (begin_main_frame_aborted_message_ != NULL) begin_main_frame_aborted_message_->::cc::proto::BeginMainFrameAborted::Clear();
    }
    if (has_set_needs_redraw_message()) {
      if (set_needs_redraw_message_ != NULL) set_needs_redraw_message_->::cc::proto::SetNeedsRedraw::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CompositorMessageToImpl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cc.proto.CompositorMessageToImpl.Type message_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cc::proto::CompositorMessageToImpl_Type_IsValid(value)) {
            set_message_type(static_cast< ::cc::proto::CompositorMessageToImpl_Type >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_initialize_impl_message;
        break;
      }

      // optional .cc.proto.InitializeImpl initialize_impl_message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_initialize_impl_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initialize_impl_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_defer_commits_message;
        break;
      }

      // optional .cc.proto.SetDeferCommits defer_commits_message = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defer_commits_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defer_commits_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_start_commit_message;
        break;
      }

      // optional .cc.proto.StartCommit start_commit_message = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_commit_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_commit_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_begin_main_frame_aborted_message;
        break;
      }

      // optional .cc.proto.BeginMainFrameAborted begin_main_frame_aborted_message = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_begin_main_frame_aborted_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_begin_main_frame_aborted_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_set_needs_redraw_message;
        break;
      }

      // optional .cc.proto.SetNeedsRedraw set_needs_redraw_message = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_set_needs_redraw_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set_needs_redraw_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CompositorMessageToImpl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cc.proto.CompositorMessageToImpl.Type message_type = 1;
  if (has_message_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->message_type(), output);
  }

  // optional .cc.proto.InitializeImpl initialize_impl_message = 2;
  if (has_initialize_impl_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->initialize_impl_message(), output);
  }

  // optional .cc.proto.SetDeferCommits defer_commits_message = 3;
  if (has_defer_commits_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->defer_commits_message(), output);
  }

  // optional .cc.proto.StartCommit start_commit_message = 4;
  if (has_start_commit_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->start_commit_message(), output);
  }

  // optional .cc.proto.BeginMainFrameAborted begin_main_frame_aborted_message = 5;
  if (has_begin_main_frame_aborted_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->begin_main_frame_aborted_message(), output);
  }

  // optional .cc.proto.SetNeedsRedraw set_needs_redraw_message = 6;
  if (has_set_needs_redraw_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->set_needs_redraw_message(), output);
  }

}

int CompositorMessageToImpl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cc.proto.CompositorMessageToImpl.Type message_type = 1;
    if (has_message_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->message_type());
    }

    // optional .cc.proto.InitializeImpl initialize_impl_message = 2;
    if (has_initialize_impl_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->initialize_impl_message());
    }

    // optional .cc.proto.SetDeferCommits defer_commits_message = 3;
    if (has_defer_commits_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defer_commits_message());
    }

    // optional .cc.proto.StartCommit start_commit_message = 4;
    if (has_start_commit_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_commit_message());
    }

    // optional .cc.proto.BeginMainFrameAborted begin_main_frame_aborted_message = 5;
    if (has_begin_main_frame_aborted_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->begin_main_frame_aborted_message());
    }

    // optional .cc.proto.SetNeedsRedraw set_needs_redraw_message = 6;
    if (has_set_needs_redraw_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->set_needs_redraw_message());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompositorMessageToImpl::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CompositorMessageToImpl*>(&from));
}

void CompositorMessageToImpl::MergeFrom(const CompositorMessageToImpl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_type()) {
      set_message_type(from.message_type());
    }
    if (from.has_initialize_impl_message()) {
      mutable_initialize_impl_message()->::cc::proto::InitializeImpl::MergeFrom(from.initialize_impl_message());
    }
    if (from.has_defer_commits_message()) {
      mutable_defer_commits_message()->::cc::proto::SetDeferCommits::MergeFrom(from.defer_commits_message());
    }
    if (from.has_start_commit_message()) {
      mutable_start_commit_message()->::cc::proto::StartCommit::MergeFrom(from.start_commit_message());
    }
    if (from.has_begin_main_frame_aborted_message()) {
      mutable_begin_main_frame_aborted_message()->::cc::proto::BeginMainFrameAborted::MergeFrom(from.begin_main_frame_aborted_message());
    }
    if (from.has_set_needs_redraw_message()) {
      mutable_set_needs_redraw_message()->::cc::proto::SetNeedsRedraw::MergeFrom(from.set_needs_redraw_message());
    }
  }
}

void CompositorMessageToImpl::CopyFrom(const CompositorMessageToImpl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompositorMessageToImpl::IsInitialized() const {

  return true;
}

void CompositorMessageToImpl::Swap(CompositorMessageToImpl* other) {
  if (other != this) {
    std::swap(message_type_, other->message_type_);
    std::swap(initialize_impl_message_, other->initialize_impl_message_);
    std::swap(defer_commits_message_, other->defer_commits_message_);
    std::swap(start_commit_message_, other->start_commit_message_);
    std::swap(begin_main_frame_aborted_message_, other->begin_main_frame_aborted_message_);
    std::swap(set_needs_redraw_message_, other->set_needs_redraw_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CompositorMessageToImpl::GetTypeName() const {
  return "cc.proto.CompositorMessageToImpl";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitializeImpl::kLayerTreeSettingsFieldNumber;
#endif  // !_MSC_VER

InitializeImpl::InitializeImpl()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void InitializeImpl::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  layer_tree_settings_ = const_cast< ::cc::proto::LayerTreeSettings*>(
      ::cc::proto::LayerTreeSettings::internal_default_instance());
#else
  layer_tree_settings_ = const_cast< ::cc::proto::LayerTreeSettings*>(&::cc::proto::LayerTreeSettings::default_instance());
#endif
}

InitializeImpl::InitializeImpl(const InitializeImpl& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void InitializeImpl::SharedCtor() {
  _cached_size_ = 0;
  layer_tree_settings_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitializeImpl::~InitializeImpl() {
  SharedDtor();
}

void InitializeImpl::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete layer_tree_settings_;
  }
}

void InitializeImpl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InitializeImpl& InitializeImpl::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_compositor_5fmessage_5fto_5fimpl_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_compositor_5fmessage_5fto_5fimpl_2eproto();
#endif
  return *default_instance_;
}

InitializeImpl* InitializeImpl::default_instance_ = NULL;

InitializeImpl* InitializeImpl::New() const {
  return new InitializeImpl;
}

void InitializeImpl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_layer_tree_settings()) {
      if (layer_tree_settings_ != NULL) layer_tree_settings_->::cc::proto::LayerTreeSettings::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool InitializeImpl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cc.proto.LayerTreeSettings layer_tree_settings = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_layer_tree_settings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InitializeImpl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cc.proto.LayerTreeSettings layer_tree_settings = 1;
  if (has_layer_tree_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->layer_tree_settings(), output);
  }

}

int InitializeImpl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cc.proto.LayerTreeSettings layer_tree_settings = 1;
    if (has_layer_tree_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->layer_tree_settings());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitializeImpl::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InitializeImpl*>(&from));
}

void InitializeImpl::MergeFrom(const InitializeImpl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layer_tree_settings()) {
      mutable_layer_tree_settings()->::cc::proto::LayerTreeSettings::MergeFrom(from.layer_tree_settings());
    }
  }
}

void InitializeImpl::CopyFrom(const InitializeImpl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitializeImpl::IsInitialized() const {

  return true;
}

void InitializeImpl::Swap(InitializeImpl* other) {
  if (other != this) {
    std::swap(layer_tree_settings_, other->layer_tree_settings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string InitializeImpl::GetTypeName() const {
  return "cc.proto.InitializeImpl";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetDeferCommits::kDeferCommitsFieldNumber;
#endif  // !_MSC_VER

SetDeferCommits::SetDeferCommits()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SetDeferCommits::InitAsDefaultInstance() {
}

SetDeferCommits::SetDeferCommits(const SetDeferCommits& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SetDeferCommits::SharedCtor() {
  _cached_size_ = 0;
  defer_commits_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetDeferCommits::~SetDeferCommits() {
  SharedDtor();
}

void SetDeferCommits::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SetDeferCommits::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SetDeferCommits& SetDeferCommits::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_compositor_5fmessage_5fto_5fimpl_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_compositor_5fmessage_5fto_5fimpl_2eproto();
#endif
  return *default_instance_;
}

SetDeferCommits* SetDeferCommits::default_instance_ = NULL;

SetDeferCommits* SetDeferCommits::New() const {
  return new SetDeferCommits;
}

void SetDeferCommits::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    defer_commits_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SetDeferCommits::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool defer_commits = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &defer_commits_)));
          set_has_defer_commits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetDeferCommits::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool defer_commits = 1;
  if (has_defer_commits()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->defer_commits(), output);
  }

}

int SetDeferCommits::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool defer_commits = 1;
    if (has_defer_commits()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetDeferCommits::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SetDeferCommits*>(&from));
}

void SetDeferCommits::MergeFrom(const SetDeferCommits& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_defer_commits()) {
      set_defer_commits(from.defer_commits());
    }
  }
}

void SetDeferCommits::CopyFrom(const SetDeferCommits& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetDeferCommits::IsInitialized() const {

  return true;
}

void SetDeferCommits::Swap(SetDeferCommits* other) {
  if (other != this) {
    std::swap(defer_commits_, other->defer_commits_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SetDeferCommits::GetTypeName() const {
  return "cc.proto.SetDeferCommits";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartCommit::kLayerTreeHostFieldNumber;
#endif  // !_MSC_VER

StartCommit::StartCommit()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StartCommit::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  layer_tree_host_ = const_cast< ::cc::proto::LayerTreeHost*>(
      ::cc::proto::LayerTreeHost::internal_default_instance());
#else
  layer_tree_host_ = const_cast< ::cc::proto::LayerTreeHost*>(&::cc::proto::LayerTreeHost::default_instance());
#endif
}

StartCommit::StartCommit(const StartCommit& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StartCommit::SharedCtor() {
  _cached_size_ = 0;
  layer_tree_host_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartCommit::~StartCommit() {
  SharedDtor();
}

void StartCommit::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete layer_tree_host_;
  }
}

void StartCommit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StartCommit& StartCommit::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_compositor_5fmessage_5fto_5fimpl_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_compositor_5fmessage_5fto_5fimpl_2eproto();
#endif
  return *default_instance_;
}

StartCommit* StartCommit::default_instance_ = NULL;

StartCommit* StartCommit::New() const {
  return new StartCommit;
}

void StartCommit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_layer_tree_host()) {
      if (layer_tree_host_ != NULL) layer_tree_host_->::cc::proto::LayerTreeHost::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StartCommit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cc.proto.LayerTreeHost layer_tree_host = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_layer_tree_host()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StartCommit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cc.proto.LayerTreeHost layer_tree_host = 1;
  if (has_layer_tree_host()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->layer_tree_host(), output);
  }

}

int StartCommit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cc.proto.LayerTreeHost layer_tree_host = 1;
    if (has_layer_tree_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->layer_tree_host());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartCommit::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StartCommit*>(&from));
}

void StartCommit::MergeFrom(const StartCommit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layer_tree_host()) {
      mutable_layer_tree_host()->::cc::proto::LayerTreeHost::MergeFrom(from.layer_tree_host());
    }
  }
}

void StartCommit::CopyFrom(const StartCommit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartCommit::IsInitialized() const {

  return true;
}

void StartCommit::Swap(StartCommit* other) {
  if (other != this) {
    std::swap(layer_tree_host_, other->layer_tree_host_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StartCommit::GetTypeName() const {
  return "cc.proto.StartCommit";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BeginMainFrameAborted::kReasonFieldNumber;
#endif  // !_MSC_VER

BeginMainFrameAborted::BeginMainFrameAborted()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BeginMainFrameAborted::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  reason_ = const_cast< ::cc::proto::CommitEarlyOutReason*>(
      ::cc::proto::CommitEarlyOutReason::internal_default_instance());
#else
  reason_ = const_cast< ::cc::proto::CommitEarlyOutReason*>(&::cc::proto::CommitEarlyOutReason::default_instance());
#endif
}

BeginMainFrameAborted::BeginMainFrameAborted(const BeginMainFrameAborted& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BeginMainFrameAborted::SharedCtor() {
  _cached_size_ = 0;
  reason_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeginMainFrameAborted::~BeginMainFrameAborted() {
  SharedDtor();
}

void BeginMainFrameAborted::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete reason_;
  }
}

void BeginMainFrameAborted::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BeginMainFrameAborted& BeginMainFrameAborted::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_compositor_5fmessage_5fto_5fimpl_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_compositor_5fmessage_5fto_5fimpl_2eproto();
#endif
  return *default_instance_;
}

BeginMainFrameAborted* BeginMainFrameAborted::default_instance_ = NULL;

BeginMainFrameAborted* BeginMainFrameAborted::New() const {
  return new BeginMainFrameAborted;
}

void BeginMainFrameAborted::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_reason()) {
      if (reason_ != NULL) reason_->::cc::proto::CommitEarlyOutReason::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BeginMainFrameAborted::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cc.proto.CommitEarlyOutReason reason = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reason()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BeginMainFrameAborted::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cc.proto.CommitEarlyOutReason reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->reason(), output);
  }

}

int BeginMainFrameAborted::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cc.proto.CommitEarlyOutReason reason = 1;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reason());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeginMainFrameAborted::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BeginMainFrameAborted*>(&from));
}

void BeginMainFrameAborted::MergeFrom(const BeginMainFrameAborted& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      mutable_reason()->::cc::proto::CommitEarlyOutReason::MergeFrom(from.reason());
    }
  }
}

void BeginMainFrameAborted::CopyFrom(const BeginMainFrameAborted& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginMainFrameAborted::IsInitialized() const {

  return true;
}

void BeginMainFrameAborted::Swap(BeginMainFrameAborted* other) {
  if (other != this) {
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BeginMainFrameAborted::GetTypeName() const {
  return "cc.proto.BeginMainFrameAborted";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetNeedsRedraw::kDamagedRectFieldNumber;
#endif  // !_MSC_VER

SetNeedsRedraw::SetNeedsRedraw()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SetNeedsRedraw::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  damaged_rect_ = const_cast< ::cc::proto::Rect*>(
      ::cc::proto::Rect::internal_default_instance());
#else
  damaged_rect_ = const_cast< ::cc::proto::Rect*>(&::cc::proto::Rect::default_instance());
#endif
}

SetNeedsRedraw::SetNeedsRedraw(const SetNeedsRedraw& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SetNeedsRedraw::SharedCtor() {
  _cached_size_ = 0;
  damaged_rect_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetNeedsRedraw::~SetNeedsRedraw() {
  SharedDtor();
}

void SetNeedsRedraw::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete damaged_rect_;
  }
}

void SetNeedsRedraw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SetNeedsRedraw& SetNeedsRedraw::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_compositor_5fmessage_5fto_5fimpl_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_compositor_5fmessage_5fto_5fimpl_2eproto();
#endif
  return *default_instance_;
}

SetNeedsRedraw* SetNeedsRedraw::default_instance_ = NULL;

SetNeedsRedraw* SetNeedsRedraw::New() const {
  return new SetNeedsRedraw;
}

void SetNeedsRedraw::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_damaged_rect()) {
      if (damaged_rect_ != NULL) damaged_rect_->::cc::proto::Rect::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SetNeedsRedraw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cc.proto.Rect damaged_rect = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_damaged_rect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetNeedsRedraw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cc.proto.Rect damaged_rect = 1;
  if (has_damaged_rect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->damaged_rect(), output);
  }

}

int SetNeedsRedraw::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cc.proto.Rect damaged_rect = 1;
    if (has_damaged_rect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->damaged_rect());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetNeedsRedraw::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SetNeedsRedraw*>(&from));
}

void SetNeedsRedraw::MergeFrom(const SetNeedsRedraw& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_damaged_rect()) {
      mutable_damaged_rect()->::cc::proto::Rect::MergeFrom(from.damaged_rect());
    }
  }
}

void SetNeedsRedraw::CopyFrom(const SetNeedsRedraw& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetNeedsRedraw::IsInitialized() const {

  return true;
}

void SetNeedsRedraw::Swap(SetNeedsRedraw* other) {
  if (other != this) {
    std::swap(damaged_rect_, other->damaged_rect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SetNeedsRedraw::GetTypeName() const {
  return "cc.proto.SetNeedsRedraw";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cc

// @@protoc_insertion_point(global_scope)
