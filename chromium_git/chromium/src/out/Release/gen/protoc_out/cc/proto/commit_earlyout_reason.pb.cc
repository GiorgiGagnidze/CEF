// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commit_earlyout_reason.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "commit_earlyout_reason.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace cc {
namespace proto {

void protobuf_ShutdownFile_commit_5fearlyout_5freason_2eproto() {
  delete CommitEarlyOutReason::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_commit_5fearlyout_5freason_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_commit_5fearlyout_5freason_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  CommitEarlyOutReason::default_instance_ = new CommitEarlyOutReason();
  CommitEarlyOutReason::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_commit_5fearlyout_5freason_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_commit_5fearlyout_5freason_2eproto_once_);
void protobuf_AddDesc_commit_5fearlyout_5freason_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_commit_5fearlyout_5freason_2eproto_once_,
                 &protobuf_AddDesc_commit_5fearlyout_5freason_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_commit_5fearlyout_5freason_2eproto {
  StaticDescriptorInitializer_commit_5fearlyout_5freason_2eproto() {
    protobuf_AddDesc_commit_5fearlyout_5freason_2eproto();
  }
} static_descriptor_initializer_commit_5fearlyout_5freason_2eproto_;
#endif

// ===================================================================

bool CommitEarlyOutReason_Reason_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CommitEarlyOutReason_Reason CommitEarlyOutReason::ABORTED_OUTPUT_SURFACE_LOST;
const CommitEarlyOutReason_Reason CommitEarlyOutReason::ABORTED_NOT_VISIBLE;
const CommitEarlyOutReason_Reason CommitEarlyOutReason::ABORTED_DEFERRED_COMMIT;
const CommitEarlyOutReason_Reason CommitEarlyOutReason::FINISHED_NO_UPDATES;
const CommitEarlyOutReason_Reason CommitEarlyOutReason::Reason_MIN;
const CommitEarlyOutReason_Reason CommitEarlyOutReason::Reason_MAX;
const int CommitEarlyOutReason::Reason_ARRAYSIZE;
#endif  // _MSC_VER
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommitEarlyOutReason::kReasonFieldNumber;
#endif  // !_MSC_VER

CommitEarlyOutReason::CommitEarlyOutReason()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CommitEarlyOutReason::InitAsDefaultInstance() {
}

CommitEarlyOutReason::CommitEarlyOutReason(const CommitEarlyOutReason& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CommitEarlyOutReason::SharedCtor() {
  _cached_size_ = 0;
  reason_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommitEarlyOutReason::~CommitEarlyOutReason() {
  SharedDtor();
}

void CommitEarlyOutReason::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CommitEarlyOutReason::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CommitEarlyOutReason& CommitEarlyOutReason::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_commit_5fearlyout_5freason_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_commit_5fearlyout_5freason_2eproto();
#endif
  return *default_instance_;
}

CommitEarlyOutReason* CommitEarlyOutReason::default_instance_ = NULL;

CommitEarlyOutReason* CommitEarlyOutReason::New() const {
  return new CommitEarlyOutReason;
}

void CommitEarlyOutReason::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reason_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CommitEarlyOutReason::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cc.proto.CommitEarlyOutReason.Reason reason = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cc::proto::CommitEarlyOutReason_Reason_IsValid(value)) {
            set_reason(static_cast< ::cc::proto::CommitEarlyOutReason_Reason >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommitEarlyOutReason::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cc.proto.CommitEarlyOutReason.Reason reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reason(), output);
  }

}

int CommitEarlyOutReason::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cc.proto.CommitEarlyOutReason.Reason reason = 1;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommitEarlyOutReason::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CommitEarlyOutReason*>(&from));
}

void CommitEarlyOutReason::MergeFrom(const CommitEarlyOutReason& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
}

void CommitEarlyOutReason::CopyFrom(const CommitEarlyOutReason& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitEarlyOutReason::IsInitialized() const {

  return true;
}

void CommitEarlyOutReason::Swap(CommitEarlyOutReason* other) {
  if (other != this) {
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CommitEarlyOutReason::GetTypeName() const {
  return "cc.proto.CommitEarlyOutReason";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cc

// @@protoc_insertion_point(global_scope)
