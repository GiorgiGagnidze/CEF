// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: layer_selection_bound.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "layer_selection_bound.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace cc {
namespace proto {

void protobuf_ShutdownFile_layer_5fselection_5fbound_2eproto() {
  delete LayerSelectionBound::default_instance_;
  delete LayerSelection::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_layer_5fselection_5fbound_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_layer_5fselection_5fbound_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::cc::proto::protobuf_AddDesc_point_2eproto();
  LayerSelectionBound::default_instance_ = new LayerSelectionBound();
  LayerSelection::default_instance_ = new LayerSelection();
  LayerSelectionBound::default_instance_->InitAsDefaultInstance();
  LayerSelection::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_layer_5fselection_5fbound_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_layer_5fselection_5fbound_2eproto_once_);
void protobuf_AddDesc_layer_5fselection_5fbound_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_layer_5fselection_5fbound_2eproto_once_,
                 &protobuf_AddDesc_layer_5fselection_5fbound_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_layer_5fselection_5fbound_2eproto {
  StaticDescriptorInitializer_layer_5fselection_5fbound_2eproto() {
    protobuf_AddDesc_layer_5fselection_5fbound_2eproto();
  }
} static_descriptor_initializer_layer_5fselection_5fbound_2eproto_;
#endif

// ===================================================================

bool LayerSelectionBound_SelectionBoundType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LayerSelectionBound_SelectionBoundType LayerSelectionBound::UNKNOWN;
const LayerSelectionBound_SelectionBoundType LayerSelectionBound::LEFT;
const LayerSelectionBound_SelectionBoundType LayerSelectionBound::RIGHT;
const LayerSelectionBound_SelectionBoundType LayerSelectionBound::CENTER;
const LayerSelectionBound_SelectionBoundType LayerSelectionBound::EMPTY;
const LayerSelectionBound_SelectionBoundType LayerSelectionBound::SelectionBoundType_MIN;
const LayerSelectionBound_SelectionBoundType LayerSelectionBound::SelectionBoundType_MAX;
const int LayerSelectionBound::SelectionBoundType_ARRAYSIZE;
#endif  // _MSC_VER
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LayerSelectionBound::kTypeFieldNumber;
const int LayerSelectionBound::kEdgeTopFieldNumber;
const int LayerSelectionBound::kEdgeBottomFieldNumber;
const int LayerSelectionBound::kLayerIdFieldNumber;
#endif  // !_MSC_VER

LayerSelectionBound::LayerSelectionBound()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LayerSelectionBound::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  edge_top_ = const_cast< ::cc::proto::Point*>(
      ::cc::proto::Point::internal_default_instance());
#else
  edge_top_ = const_cast< ::cc::proto::Point*>(&::cc::proto::Point::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  edge_bottom_ = const_cast< ::cc::proto::Point*>(
      ::cc::proto::Point::internal_default_instance());
#else
  edge_bottom_ = const_cast< ::cc::proto::Point*>(&::cc::proto::Point::default_instance());
#endif
}

LayerSelectionBound::LayerSelectionBound(const LayerSelectionBound& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LayerSelectionBound::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  edge_top_ = NULL;
  edge_bottom_ = NULL;
  layer_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LayerSelectionBound::~LayerSelectionBound() {
  SharedDtor();
}

void LayerSelectionBound::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete edge_top_;
    delete edge_bottom_;
  }
}

void LayerSelectionBound::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LayerSelectionBound& LayerSelectionBound::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_layer_5fselection_5fbound_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_layer_5fselection_5fbound_2eproto();
#endif
  return *default_instance_;
}

LayerSelectionBound* LayerSelectionBound::default_instance_ = NULL;

LayerSelectionBound* LayerSelectionBound::New() const {
  return new LayerSelectionBound;
}

void LayerSelectionBound::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_edge_top()) {
      if (edge_top_ != NULL) edge_top_->::cc::proto::Point::Clear();
    }
    if (has_edge_bottom()) {
      if (edge_bottom_ != NULL) edge_bottom_->::cc::proto::Point::Clear();
    }
    layer_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LayerSelectionBound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cc.proto.LayerSelectionBound.SelectionBoundType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cc::proto::LayerSelectionBound_SelectionBoundType_IsValid(value)) {
            set_type(static_cast< ::cc::proto::LayerSelectionBound_SelectionBoundType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_edge_top;
        break;
      }

      // optional .cc.proto.Point edge_top = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_edge_top:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_edge_top()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_edge_bottom;
        break;
      }

      // optional .cc.proto.Point edge_bottom = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_edge_bottom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_edge_bottom()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_layer_id;
        break;
      }

      // optional int32 layer_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layer_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_id_)));
          set_has_layer_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LayerSelectionBound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cc.proto.LayerSelectionBound.SelectionBoundType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .cc.proto.Point edge_top = 2;
  if (has_edge_top()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->edge_top(), output);
  }

  // optional .cc.proto.Point edge_bottom = 3;
  if (has_edge_bottom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->edge_bottom(), output);
  }

  // optional int32 layer_id = 4;
  if (has_layer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->layer_id(), output);
  }

}

int LayerSelectionBound::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cc.proto.LayerSelectionBound.SelectionBoundType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .cc.proto.Point edge_top = 2;
    if (has_edge_top()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->edge_top());
    }

    // optional .cc.proto.Point edge_bottom = 3;
    if (has_edge_bottom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->edge_bottom());
    }

    // optional int32 layer_id = 4;
    if (has_layer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layer_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LayerSelectionBound::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LayerSelectionBound*>(&from));
}

void LayerSelectionBound::MergeFrom(const LayerSelectionBound& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_edge_top()) {
      mutable_edge_top()->::cc::proto::Point::MergeFrom(from.edge_top());
    }
    if (from.has_edge_bottom()) {
      mutable_edge_bottom()->::cc::proto::Point::MergeFrom(from.edge_bottom());
    }
    if (from.has_layer_id()) {
      set_layer_id(from.layer_id());
    }
  }
}

void LayerSelectionBound::CopyFrom(const LayerSelectionBound& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerSelectionBound::IsInitialized() const {

  return true;
}

void LayerSelectionBound::Swap(LayerSelectionBound* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(edge_top_, other->edge_top_);
    std::swap(edge_bottom_, other->edge_bottom_);
    std::swap(layer_id_, other->layer_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LayerSelectionBound::GetTypeName() const {
  return "cc.proto.LayerSelectionBound";
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LayerSelection::kStartFieldNumber;
const int LayerSelection::kEndFieldNumber;
const int LayerSelection::kIsEditableFieldNumber;
const int LayerSelection::kIsEmptyTextFormControlFieldNumber;
#endif  // !_MSC_VER

LayerSelection::LayerSelection()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LayerSelection::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  start_ = const_cast< ::cc::proto::LayerSelectionBound*>(
      ::cc::proto::LayerSelectionBound::internal_default_instance());
#else
  start_ = const_cast< ::cc::proto::LayerSelectionBound*>(&::cc::proto::LayerSelectionBound::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  end_ = const_cast< ::cc::proto::LayerSelectionBound*>(
      ::cc::proto::LayerSelectionBound::internal_default_instance());
#else
  end_ = const_cast< ::cc::proto::LayerSelectionBound*>(&::cc::proto::LayerSelectionBound::default_instance());
#endif
}

LayerSelection::LayerSelection(const LayerSelection& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LayerSelection::SharedCtor() {
  _cached_size_ = 0;
  start_ = NULL;
  end_ = NULL;
  is_editable_ = false;
  is_empty_text_form_control_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LayerSelection::~LayerSelection() {
  SharedDtor();
}

void LayerSelection::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete start_;
    delete end_;
  }
}

void LayerSelection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LayerSelection& LayerSelection::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_layer_5fselection_5fbound_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_layer_5fselection_5fbound_2eproto();
#endif
  return *default_instance_;
}

LayerSelection* LayerSelection::default_instance_ = NULL;

LayerSelection* LayerSelection::New() const {
  return new LayerSelection;
}

void LayerSelection::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_start()) {
      if (start_ != NULL) start_->::cc::proto::LayerSelectionBound::Clear();
    }
    if (has_end()) {
      if (end_ != NULL) end_->::cc::proto::LayerSelectionBound::Clear();
    }
    is_editable_ = false;
    is_empty_text_form_control_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LayerSelection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cc.proto.LayerSelectionBound start = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_end;
        break;
      }

      // optional .cc.proto.LayerSelectionBound end = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_editable;
        break;
      }

      // optional bool is_editable = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_editable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_editable_)));
          set_has_is_editable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_empty_text_form_control;
        break;
      }

      // optional bool is_empty_text_form_control = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_empty_text_form_control:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_empty_text_form_control_)));
          set_has_is_empty_text_form_control();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LayerSelection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cc.proto.LayerSelectionBound start = 1;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->start(), output);
  }

  // optional .cc.proto.LayerSelectionBound end = 2;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->end(), output);
  }

  // optional bool is_editable = 3;
  if (has_is_editable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_editable(), output);
  }

  // optional bool is_empty_text_form_control = 4;
  if (has_is_empty_text_form_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_empty_text_form_control(), output);
  }

}

int LayerSelection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cc.proto.LayerSelectionBound start = 1;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start());
    }

    // optional .cc.proto.LayerSelectionBound end = 2;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end());
    }

    // optional bool is_editable = 3;
    if (has_is_editable()) {
      total_size += 1 + 1;
    }

    // optional bool is_empty_text_form_control = 4;
    if (has_is_empty_text_form_control()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LayerSelection::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LayerSelection*>(&from));
}

void LayerSelection::MergeFrom(const LayerSelection& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start()) {
      mutable_start()->::cc::proto::LayerSelectionBound::MergeFrom(from.start());
    }
    if (from.has_end()) {
      mutable_end()->::cc::proto::LayerSelectionBound::MergeFrom(from.end());
    }
    if (from.has_is_editable()) {
      set_is_editable(from.is_editable());
    }
    if (from.has_is_empty_text_form_control()) {
      set_is_empty_text_form_control(from.is_empty_text_form_control());
    }
  }
}

void LayerSelection::CopyFrom(const LayerSelection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerSelection::IsInitialized() const {

  return true;
}

void LayerSelection::Swap(LayerSelection* other) {
  if (other != this) {
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(is_editable_, other->is_editable_);
    std::swap(is_empty_text_form_control_, other->is_empty_text_form_control_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LayerSelection::GetTypeName() const {
  return "cc.proto.LayerSelection";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cc

// @@protoc_insertion_point(global_scope)
