// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skxfermode.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "skxfermode.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace cc {
namespace proto {

void protobuf_ShutdownFile_skxfermode_2eproto() {
  delete SkXfermode::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_skxfermode_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_skxfermode_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  SkXfermode::default_instance_ = new SkXfermode();
  SkXfermode::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_skxfermode_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_skxfermode_2eproto_once_);
void protobuf_AddDesc_skxfermode_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_skxfermode_2eproto_once_,
                 &protobuf_AddDesc_skxfermode_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_skxfermode_2eproto {
  StaticDescriptorInitializer_skxfermode_2eproto() {
    protobuf_AddDesc_skxfermode_2eproto();
  }
} static_descriptor_initializer_skxfermode_2eproto_;
#endif

// ===================================================================

bool SkXfermode_Mode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SkXfermode_Mode SkXfermode::Mode_Clear;
const SkXfermode_Mode SkXfermode::Mode_Src;
const SkXfermode_Mode SkXfermode::Mode_Dst;
const SkXfermode_Mode SkXfermode::Mode_SrcOver;
const SkXfermode_Mode SkXfermode::Mode_DstOver;
const SkXfermode_Mode SkXfermode::Mode_SrcIn;
const SkXfermode_Mode SkXfermode::Mode_DstIn;
const SkXfermode_Mode SkXfermode::Mode_SrcOut;
const SkXfermode_Mode SkXfermode::Mode_DstOut;
const SkXfermode_Mode SkXfermode::Mode_SrcATop;
const SkXfermode_Mode SkXfermode::Mode_DstATop;
const SkXfermode_Mode SkXfermode::Mode_XOR;
const SkXfermode_Mode SkXfermode::Mode_Plus;
const SkXfermode_Mode SkXfermode::Mode_Modulate;
const SkXfermode_Mode SkXfermode::Mode_Screen;
const SkXfermode_Mode SkXfermode::Mode_Overlay;
const SkXfermode_Mode SkXfermode::Mode_Darken;
const SkXfermode_Mode SkXfermode::Mode_Lighten;
const SkXfermode_Mode SkXfermode::Mode_ColorDodge;
const SkXfermode_Mode SkXfermode::Mode_ColorBurn;
const SkXfermode_Mode SkXfermode::Mode_HardLight;
const SkXfermode_Mode SkXfermode::Mode_SoftLight;
const SkXfermode_Mode SkXfermode::Mode_Difference;
const SkXfermode_Mode SkXfermode::Mode_Exclusion;
const SkXfermode_Mode SkXfermode::Mode_Multiply;
const SkXfermode_Mode SkXfermode::Mode_Hue;
const SkXfermode_Mode SkXfermode::Mode_Saturation;
const SkXfermode_Mode SkXfermode::Mode_Color;
const SkXfermode_Mode SkXfermode::Mode_Luminosity;
const SkXfermode_Mode SkXfermode::Mode_MIN;
const SkXfermode_Mode SkXfermode::Mode_MAX;
const int SkXfermode::Mode_ARRAYSIZE;
#endif  // _MSC_VER
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !_MSC_VER

SkXfermode::SkXfermode()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SkXfermode::InitAsDefaultInstance() {
}

SkXfermode::SkXfermode(const SkXfermode& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SkXfermode::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkXfermode::~SkXfermode() {
  SharedDtor();
}

void SkXfermode::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SkXfermode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SkXfermode& SkXfermode::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_skxfermode_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_skxfermode_2eproto();
#endif
  return *default_instance_;
}

SkXfermode* SkXfermode::default_instance_ = NULL;

SkXfermode* SkXfermode::New() const {
  return new SkXfermode;
}

void SkXfermode::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SkXfermode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
  }
  return true;
#undef DO_
}

void SkXfermode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int SkXfermode::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkXfermode::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SkXfermode*>(&from));
}

void SkXfermode::MergeFrom(const SkXfermode& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void SkXfermode::CopyFrom(const SkXfermode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkXfermode::IsInitialized() const {

  return true;
}

void SkXfermode::Swap(SkXfermode* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SkXfermode::GetTypeName() const {
  return "cc.proto.SkXfermode";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cc

// @@protoc_insertion_point(global_scope)
