// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtp_storage_info.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mtp_storage_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_mtp_5fstorage_5finfo_2eproto() {
  delete MtpStorageInfo::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_mtp_5fstorage_5finfo_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_mtp_5fstorage_5finfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  MtpStorageInfo::default_instance_ = new MtpStorageInfo();
  MtpStorageInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mtp_5fstorage_5finfo_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_mtp_5fstorage_5finfo_2eproto_once_);
void protobuf_AddDesc_mtp_5fstorage_5finfo_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_mtp_5fstorage_5finfo_2eproto_once_,
                 &protobuf_AddDesc_mtp_5fstorage_5finfo_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mtp_5fstorage_5finfo_2eproto {
  StaticDescriptorInitializer_mtp_5fstorage_5finfo_2eproto() {
    protobuf_AddDesc_mtp_5fstorage_5finfo_2eproto();
  }
} static_descriptor_initializer_mtp_5fstorage_5finfo_2eproto_;
#endif

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MtpStorageInfo::kStorageNameFieldNumber;
const int MtpStorageInfo::kVendorFieldNumber;
const int MtpStorageInfo::kVendorIdFieldNumber;
const int MtpStorageInfo::kProductFieldNumber;
const int MtpStorageInfo::kProductIdFieldNumber;
const int MtpStorageInfo::kDeviceFlagsFieldNumber;
const int MtpStorageInfo::kStorageTypeFieldNumber;
const int MtpStorageInfo::kFilesystemTypeFieldNumber;
const int MtpStorageInfo::kAccessCapabilityFieldNumber;
const int MtpStorageInfo::kMaxCapacityFieldNumber;
const int MtpStorageInfo::kFreeSpaceInBytesFieldNumber;
const int MtpStorageInfo::kFreeSpaceInObjectsFieldNumber;
const int MtpStorageInfo::kStorageDescriptionFieldNumber;
const int MtpStorageInfo::kVolumeIdentifierFieldNumber;
#endif  // !_MSC_VER

MtpStorageInfo::MtpStorageInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MtpStorageInfo::InitAsDefaultInstance() {
}

MtpStorageInfo::MtpStorageInfo(const MtpStorageInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MtpStorageInfo::SharedCtor() {
  _cached_size_ = 0;
  storage_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  vendor_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  vendor_id_ = 0u;
  product_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  product_id_ = 0u;
  device_flags_ = 0u;
  storage_type_ = 0u;
  filesystem_type_ = 0u;
  access_capability_ = 0u;
  max_capacity_ = GOOGLE_ULONGLONG(0);
  free_space_in_bytes_ = GOOGLE_ULONGLONG(0);
  free_space_in_objects_ = GOOGLE_ULONGLONG(0);
  storage_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  volume_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MtpStorageInfo::~MtpStorageInfo() {
  SharedDtor();
}

void MtpStorageInfo::SharedDtor() {
  if (storage_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete storage_name_;
  }
  if (vendor_ != &::google::protobuf::internal::GetEmptyString()) {
    delete vendor_;
  }
  if (product_ != &::google::protobuf::internal::GetEmptyString()) {
    delete product_;
  }
  if (storage_description_ != &::google::protobuf::internal::GetEmptyString()) {
    delete storage_description_;
  }
  if (volume_identifier_ != &::google::protobuf::internal::GetEmptyString()) {
    delete volume_identifier_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MtpStorageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MtpStorageInfo& MtpStorageInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_mtp_5fstorage_5finfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_mtp_5fstorage_5finfo_2eproto();
#endif
  return *default_instance_;
}

MtpStorageInfo* MtpStorageInfo::default_instance_ = NULL;

MtpStorageInfo* MtpStorageInfo::New() const {
  return new MtpStorageInfo;
}

void MtpStorageInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_storage_name()) {
      if (storage_name_ != &::google::protobuf::internal::GetEmptyString()) {
        storage_name_->clear();
      }
    }
    if (has_vendor()) {
      if (vendor_ != &::google::protobuf::internal::GetEmptyString()) {
        vendor_->clear();
      }
    }
    vendor_id_ = 0u;
    if (has_product()) {
      if (product_ != &::google::protobuf::internal::GetEmptyString()) {
        product_->clear();
      }
    }
    product_id_ = 0u;
    device_flags_ = 0u;
    storage_type_ = 0u;
    filesystem_type_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    access_capability_ = 0u;
    max_capacity_ = GOOGLE_ULONGLONG(0);
    free_space_in_bytes_ = GOOGLE_ULONGLONG(0);
    free_space_in_objects_ = GOOGLE_ULONGLONG(0);
    if (has_storage_description()) {
      if (storage_description_ != &::google::protobuf::internal::GetEmptyString()) {
        storage_description_->clear();
      }
    }
    if (has_volume_identifier()) {
      if (volume_identifier_ != &::google::protobuf::internal::GetEmptyString()) {
        volume_identifier_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MtpStorageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string storage_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_storage_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vendor;
        break;
      }

      // optional string vendor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vendor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vendor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vendor_id;
        break;
      }

      // optional uint32 vendor_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vendor_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vendor_id_)));
          set_has_vendor_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_product;
        break;
      }

      // optional string product = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_product:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_product_id;
        break;
      }

      // optional uint32 product_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_product_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &product_id_)));
          set_has_product_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_device_flags;
        break;
      }

      // optional uint32 device_flags = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_device_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_flags_)));
          set_has_device_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_storage_type;
        break;
      }

      // optional uint32 storage_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_storage_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &storage_type_)));
          set_has_storage_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_filesystem_type;
        break;
      }

      // optional uint32 filesystem_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filesystem_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filesystem_type_)));
          set_has_filesystem_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_access_capability;
        break;
      }

      // optional uint32 access_capability = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_access_capability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &access_capability_)));
          set_has_access_capability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_max_capacity;
        break;
      }

      // optional uint64 max_capacity = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_capacity_)));
          set_has_max_capacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_free_space_in_bytes;
        break;
      }

      // optional uint64 free_space_in_bytes = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free_space_in_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &free_space_in_bytes_)));
          set_has_free_space_in_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_free_space_in_objects;
        break;
      }

      // optional uint64 free_space_in_objects = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free_space_in_objects:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &free_space_in_objects_)));
          set_has_free_space_in_objects();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_storage_description;
        break;
      }

      // optional string storage_description = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storage_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_storage_description()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_volume_identifier;
        break;
      }

      // optional string volume_identifier = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_volume_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_volume_identifier()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MtpStorageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string storage_name = 1;
  if (has_storage_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->storage_name(), output);
  }

  // optional string vendor = 2;
  if (has_vendor()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->vendor(), output);
  }

  // optional uint32 vendor_id = 3;
  if (has_vendor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->vendor_id(), output);
  }

  // optional string product = 4;
  if (has_product()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->product(), output);
  }

  // optional uint32 product_id = 5;
  if (has_product_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->product_id(), output);
  }

  // optional uint32 device_flags = 6;
  if (has_device_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->device_flags(), output);
  }

  // optional uint32 storage_type = 7;
  if (has_storage_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->storage_type(), output);
  }

  // optional uint32 filesystem_type = 8;
  if (has_filesystem_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->filesystem_type(), output);
  }

  // optional uint32 access_capability = 9;
  if (has_access_capability()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->access_capability(), output);
  }

  // optional uint64 max_capacity = 10;
  if (has_max_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->max_capacity(), output);
  }

  // optional uint64 free_space_in_bytes = 11;
  if (has_free_space_in_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->free_space_in_bytes(), output);
  }

  // optional uint64 free_space_in_objects = 12;
  if (has_free_space_in_objects()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->free_space_in_objects(), output);
  }

  // optional string storage_description = 13;
  if (has_storage_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->storage_description(), output);
  }

  // optional string volume_identifier = 14;
  if (has_volume_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->volume_identifier(), output);
  }

}

int MtpStorageInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string storage_name = 1;
    if (has_storage_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->storage_name());
    }

    // optional string vendor = 2;
    if (has_vendor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vendor());
    }

    // optional uint32 vendor_id = 3;
    if (has_vendor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vendor_id());
    }

    // optional string product = 4;
    if (has_product()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->product());
    }

    // optional uint32 product_id = 5;
    if (has_product_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->product_id());
    }

    // optional uint32 device_flags = 6;
    if (has_device_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->device_flags());
    }

    // optional uint32 storage_type = 7;
    if (has_storage_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->storage_type());
    }

    // optional uint32 filesystem_type = 8;
    if (has_filesystem_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filesystem_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 access_capability = 9;
    if (has_access_capability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->access_capability());
    }

    // optional uint64 max_capacity = 10;
    if (has_max_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_capacity());
    }

    // optional uint64 free_space_in_bytes = 11;
    if (has_free_space_in_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->free_space_in_bytes());
    }

    // optional uint64 free_space_in_objects = 12;
    if (has_free_space_in_objects()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->free_space_in_objects());
    }

    // optional string storage_description = 13;
    if (has_storage_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->storage_description());
    }

    // optional string volume_identifier = 14;
    if (has_volume_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->volume_identifier());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MtpStorageInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MtpStorageInfo*>(&from));
}

void MtpStorageInfo::MergeFrom(const MtpStorageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_storage_name()) {
      set_storage_name(from.storage_name());
    }
    if (from.has_vendor()) {
      set_vendor(from.vendor());
    }
    if (from.has_vendor_id()) {
      set_vendor_id(from.vendor_id());
    }
    if (from.has_product()) {
      set_product(from.product());
    }
    if (from.has_product_id()) {
      set_product_id(from.product_id());
    }
    if (from.has_device_flags()) {
      set_device_flags(from.device_flags());
    }
    if (from.has_storage_type()) {
      set_storage_type(from.storage_type());
    }
    if (from.has_filesystem_type()) {
      set_filesystem_type(from.filesystem_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_access_capability()) {
      set_access_capability(from.access_capability());
    }
    if (from.has_max_capacity()) {
      set_max_capacity(from.max_capacity());
    }
    if (from.has_free_space_in_bytes()) {
      set_free_space_in_bytes(from.free_space_in_bytes());
    }
    if (from.has_free_space_in_objects()) {
      set_free_space_in_objects(from.free_space_in_objects());
    }
    if (from.has_storage_description()) {
      set_storage_description(from.storage_description());
    }
    if (from.has_volume_identifier()) {
      set_volume_identifier(from.volume_identifier());
    }
  }
}

void MtpStorageInfo::CopyFrom(const MtpStorageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MtpStorageInfo::IsInitialized() const {

  return true;
}

void MtpStorageInfo::Swap(MtpStorageInfo* other) {
  if (other != this) {
    std::swap(storage_name_, other->storage_name_);
    std::swap(vendor_, other->vendor_);
    std::swap(vendor_id_, other->vendor_id_);
    std::swap(product_, other->product_);
    std::swap(product_id_, other->product_id_);
    std::swap(device_flags_, other->device_flags_);
    std::swap(storage_type_, other->storage_type_);
    std::swap(filesystem_type_, other->filesystem_type_);
    std::swap(access_capability_, other->access_capability_);
    std::swap(max_capacity_, other->max_capacity_);
    std::swap(free_space_in_bytes_, other->free_space_in_bytes_);
    std::swap(free_space_in_objects_, other->free_space_in_objects_);
    std::swap(storage_description_, other->storage_description_);
    std::swap(volume_identifier_, other->volume_identifier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MtpStorageInfo::GetTypeName() const {
  return "MtpStorageInfo";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
