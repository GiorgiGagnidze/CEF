// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtp_file_entry.proto

#ifndef PROTOBUF_mtp_5ffile_5fentry_2eproto__INCLUDED
#define PROTOBUF_mtp_5ffile_5fentry_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mtp_5ffile_5fentry_2eproto();
void protobuf_AssignDesc_mtp_5ffile_5fentry_2eproto();
void protobuf_ShutdownFile_mtp_5ffile_5fentry_2eproto();

class MtpFileEntry;
class MtpFileEntries;

enum MtpFileEntry_FileType {
  MtpFileEntry_FileType_FILE_TYPE_FOLDER = 0,
  MtpFileEntry_FileType_FILE_TYPE_JPEG = 14,
  MtpFileEntry_FileType_FILE_TYPE_JFIF = 15,
  MtpFileEntry_FileType_FILE_TYPE_TIFF = 16,
  MtpFileEntry_FileType_FILE_TYPE_BMP = 17,
  MtpFileEntry_FileType_FILE_TYPE_GIF = 18,
  MtpFileEntry_FileType_FILE_TYPE_PICT = 19,
  MtpFileEntry_FileType_FILE_TYPE_PNG = 20,
  MtpFileEntry_FileType_FILE_TYPE_WINDOWSIMAGEFORMAT = 25,
  MtpFileEntry_FileType_FILE_TYPE_JP2 = 40,
  MtpFileEntry_FileType_FILE_TYPE_JPX = 41,
  MtpFileEntry_FileType_FILE_TYPE_UNKNOWN = 44,
  MtpFileEntry_FileType_FILE_TYPE_OTHER = 9999
};
bool MtpFileEntry_FileType_IsValid(int value);
const MtpFileEntry_FileType MtpFileEntry_FileType_FileType_MIN = MtpFileEntry_FileType_FILE_TYPE_FOLDER;
const MtpFileEntry_FileType MtpFileEntry_FileType_FileType_MAX = MtpFileEntry_FileType_FILE_TYPE_OTHER;
const int MtpFileEntry_FileType_FileType_ARRAYSIZE = MtpFileEntry_FileType_FileType_MAX + 1;

// ===================================================================

class MtpFileEntry : public ::google::protobuf::MessageLite {
 public:
  MtpFileEntry();
  virtual ~MtpFileEntry();

  MtpFileEntry(const MtpFileEntry& from);

  inline MtpFileEntry& operator=(const MtpFileEntry& from) {
    CopyFrom(from);
    return *this;
  }

  static const MtpFileEntry& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const MtpFileEntry* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(MtpFileEntry* other);

  // implements Message ----------------------------------------------

  MtpFileEntry* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const MtpFileEntry& from);
  void MergeFrom(const MtpFileEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef MtpFileEntry_FileType FileType;
  static const FileType FILE_TYPE_FOLDER = MtpFileEntry_FileType_FILE_TYPE_FOLDER;
  static const FileType FILE_TYPE_JPEG = MtpFileEntry_FileType_FILE_TYPE_JPEG;
  static const FileType FILE_TYPE_JFIF = MtpFileEntry_FileType_FILE_TYPE_JFIF;
  static const FileType FILE_TYPE_TIFF = MtpFileEntry_FileType_FILE_TYPE_TIFF;
  static const FileType FILE_TYPE_BMP = MtpFileEntry_FileType_FILE_TYPE_BMP;
  static const FileType FILE_TYPE_GIF = MtpFileEntry_FileType_FILE_TYPE_GIF;
  static const FileType FILE_TYPE_PICT = MtpFileEntry_FileType_FILE_TYPE_PICT;
  static const FileType FILE_TYPE_PNG = MtpFileEntry_FileType_FILE_TYPE_PNG;
  static const FileType FILE_TYPE_WINDOWSIMAGEFORMAT = MtpFileEntry_FileType_FILE_TYPE_WINDOWSIMAGEFORMAT;
  static const FileType FILE_TYPE_JP2 = MtpFileEntry_FileType_FILE_TYPE_JP2;
  static const FileType FILE_TYPE_JPX = MtpFileEntry_FileType_FILE_TYPE_JPX;
  static const FileType FILE_TYPE_UNKNOWN = MtpFileEntry_FileType_FILE_TYPE_UNKNOWN;
  static const FileType FILE_TYPE_OTHER = MtpFileEntry_FileType_FILE_TYPE_OTHER;
  static inline bool FileType_IsValid(int value) {
    return MtpFileEntry_FileType_IsValid(value);
  }
  static const FileType FileType_MIN =
    MtpFileEntry_FileType_FileType_MIN;
  static const FileType FileType_MAX =
    MtpFileEntry_FileType_FileType_MAX;
  static const int FileType_ARRAYSIZE =
    MtpFileEntry_FileType_FileType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional uint32 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::uint32 item_id() const;
  inline void set_item_id(::google::protobuf::uint32 value);

  // optional uint32 parent_id = 2;
  inline bool has_parent_id() const;
  inline void clear_parent_id();
  static const int kParentIdFieldNumber = 2;
  inline ::google::protobuf::uint32 parent_id() const;
  inline void set_parent_id(::google::protobuf::uint32 value);

  // optional string file_name = 3;
  inline bool has_file_name() const;
  inline void clear_file_name();
  static const int kFileNameFieldNumber = 3;
  inline const ::std::string& file_name() const;
  inline void set_file_name(const ::std::string& value);
  inline void set_file_name(const char* value);
  inline void set_file_name(const char* value, size_t size);
  inline ::std::string* mutable_file_name();
  inline ::std::string* release_file_name();
  inline void set_allocated_file_name(::std::string* file_name);

  // optional uint64 file_size = 4;
  inline bool has_file_size() const;
  inline void clear_file_size();
  static const int kFileSizeFieldNumber = 4;
  inline ::google::protobuf::uint64 file_size() const;
  inline void set_file_size(::google::protobuf::uint64 value);

  // optional int64 modification_time = 5;
  inline bool has_modification_time() const;
  inline void clear_modification_time();
  static const int kModificationTimeFieldNumber = 5;
  inline ::google::protobuf::int64 modification_time() const;
  inline void set_modification_time(::google::protobuf::int64 value);

  // optional .MtpFileEntry.FileType file_type = 6;
  inline bool has_file_type() const;
  inline void clear_file_type();
  static const int kFileTypeFieldNumber = 6;
  inline ::MtpFileEntry_FileType file_type() const;
  inline void set_file_type(::MtpFileEntry_FileType value);

  // @@protoc_insertion_point(class_scope:MtpFileEntry)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_parent_id();
  inline void clear_has_parent_id();
  inline void set_has_file_name();
  inline void clear_has_file_name();
  inline void set_has_file_size();
  inline void clear_has_file_size();
  inline void set_has_modification_time();
  inline void clear_has_modification_time();
  inline void set_has_file_type();
  inline void clear_has_file_type();

  ::google::protobuf::uint32 item_id_;
  ::google::protobuf::uint32 parent_id_;
  ::std::string* file_name_;
  ::google::protobuf::uint64 file_size_;
  ::google::protobuf::int64 modification_time_;
  int file_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_mtp_5ffile_5fentry_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_mtp_5ffile_5fentry_2eproto();
  #endif
  friend void protobuf_AssignDesc_mtp_5ffile_5fentry_2eproto();
  friend void protobuf_ShutdownFile_mtp_5ffile_5fentry_2eproto();

  void InitAsDefaultInstance();
  static MtpFileEntry* default_instance_;
};
// -------------------------------------------------------------------

class MtpFileEntries : public ::google::protobuf::MessageLite {
 public:
  MtpFileEntries();
  virtual ~MtpFileEntries();

  MtpFileEntries(const MtpFileEntries& from);

  inline MtpFileEntries& operator=(const MtpFileEntries& from) {
    CopyFrom(from);
    return *this;
  }

  static const MtpFileEntries& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const MtpFileEntries* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(MtpFileEntries* other);

  // implements Message ----------------------------------------------

  MtpFileEntries* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const MtpFileEntries& from);
  void MergeFrom(const MtpFileEntries& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MtpFileEntry file_entries = 1;
  inline int file_entries_size() const;
  inline void clear_file_entries();
  static const int kFileEntriesFieldNumber = 1;
  inline const ::MtpFileEntry& file_entries(int index) const;
  inline ::MtpFileEntry* mutable_file_entries(int index);
  inline ::MtpFileEntry* add_file_entries();
  inline const ::google::protobuf::RepeatedPtrField< ::MtpFileEntry >&
      file_entries() const;
  inline ::google::protobuf::RepeatedPtrField< ::MtpFileEntry >*
      mutable_file_entries();

  // @@protoc_insertion_point(class_scope:MtpFileEntries)
 private:

  ::google::protobuf::RepeatedPtrField< ::MtpFileEntry > file_entries_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_mtp_5ffile_5fentry_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_mtp_5ffile_5fentry_2eproto();
  #endif
  friend void protobuf_AssignDesc_mtp_5ffile_5fentry_2eproto();
  friend void protobuf_ShutdownFile_mtp_5ffile_5fentry_2eproto();

  void InitAsDefaultInstance();
  static MtpFileEntries* default_instance_;
};
// ===================================================================


// ===================================================================

// MtpFileEntry

// optional uint32 item_id = 1;
inline bool MtpFileEntry::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MtpFileEntry::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MtpFileEntry::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MtpFileEntry::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
inline ::google::protobuf::uint32 MtpFileEntry::item_id() const {
  return item_id_;
}
inline void MtpFileEntry::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional uint32 parent_id = 2;
inline bool MtpFileEntry::has_parent_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MtpFileEntry::set_has_parent_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MtpFileEntry::clear_has_parent_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MtpFileEntry::clear_parent_id() {
  parent_id_ = 0u;
  clear_has_parent_id();
}
inline ::google::protobuf::uint32 MtpFileEntry::parent_id() const {
  return parent_id_;
}
inline void MtpFileEntry::set_parent_id(::google::protobuf::uint32 value) {
  set_has_parent_id();
  parent_id_ = value;
}

// optional string file_name = 3;
inline bool MtpFileEntry::has_file_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MtpFileEntry::set_has_file_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MtpFileEntry::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MtpFileEntry::clear_file_name() {
  if (file_name_ != &::google::protobuf::internal::GetEmptyString()) {
    file_name_->clear();
  }
  clear_has_file_name();
}
inline const ::std::string& MtpFileEntry::file_name() const {
  return *file_name_;
}
inline void MtpFileEntry::set_file_name(const ::std::string& value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyString()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void MtpFileEntry::set_file_name(const char* value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyString()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void MtpFileEntry::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyString()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MtpFileEntry::mutable_file_name() {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyString()) {
    file_name_ = new ::std::string;
  }
  return file_name_;
}
inline ::std::string* MtpFileEntry::release_file_name() {
  clear_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = file_name_;
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void MtpFileEntry::set_allocated_file_name(::std::string* file_name) {
  if (file_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete file_name_;
  }
  if (file_name) {
    set_has_file_name();
    file_name_ = file_name;
  } else {
    clear_has_file_name();
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional uint64 file_size = 4;
inline bool MtpFileEntry::has_file_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MtpFileEntry::set_has_file_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MtpFileEntry::clear_has_file_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MtpFileEntry::clear_file_size() {
  file_size_ = GOOGLE_ULONGLONG(0);
  clear_has_file_size();
}
inline ::google::protobuf::uint64 MtpFileEntry::file_size() const {
  return file_size_;
}
inline void MtpFileEntry::set_file_size(::google::protobuf::uint64 value) {
  set_has_file_size();
  file_size_ = value;
}

// optional int64 modification_time = 5;
inline bool MtpFileEntry::has_modification_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MtpFileEntry::set_has_modification_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MtpFileEntry::clear_has_modification_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MtpFileEntry::clear_modification_time() {
  modification_time_ = GOOGLE_LONGLONG(0);
  clear_has_modification_time();
}
inline ::google::protobuf::int64 MtpFileEntry::modification_time() const {
  return modification_time_;
}
inline void MtpFileEntry::set_modification_time(::google::protobuf::int64 value) {
  set_has_modification_time();
  modification_time_ = value;
}

// optional .MtpFileEntry.FileType file_type = 6;
inline bool MtpFileEntry::has_file_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MtpFileEntry::set_has_file_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MtpFileEntry::clear_has_file_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MtpFileEntry::clear_file_type() {
  file_type_ = 0;
  clear_has_file_type();
}
inline ::MtpFileEntry_FileType MtpFileEntry::file_type() const {
  return static_cast< ::MtpFileEntry_FileType >(file_type_);
}
inline void MtpFileEntry::set_file_type(::MtpFileEntry_FileType value) {
  assert(::MtpFileEntry_FileType_IsValid(value));
  set_has_file_type();
  file_type_ = value;
}

// -------------------------------------------------------------------

// MtpFileEntries

// repeated .MtpFileEntry file_entries = 1;
inline int MtpFileEntries::file_entries_size() const {
  return file_entries_.size();
}
inline void MtpFileEntries::clear_file_entries() {
  file_entries_.Clear();
}
inline const ::MtpFileEntry& MtpFileEntries::file_entries(int index) const {
  return file_entries_.Get(index);
}
inline ::MtpFileEntry* MtpFileEntries::mutable_file_entries(int index) {
  return file_entries_.Mutable(index);
}
inline ::MtpFileEntry* MtpFileEntries::add_file_entries() {
  return file_entries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MtpFileEntry >&
MtpFileEntries::file_entries() const {
  return file_entries_;
}
inline ::google::protobuf::RepeatedPtrField< ::MtpFileEntry >*
MtpFileEntries::mutable_file_entries() {
  return &file_entries_;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mtp_5ffile_5fentry_2eproto__INCLUDED
