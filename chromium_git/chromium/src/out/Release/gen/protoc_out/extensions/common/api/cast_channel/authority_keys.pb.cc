// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: authority_keys.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "authority_keys.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace extensions {
namespace api {
namespace cast_channel {
namespace proto {

void protobuf_ShutdownFile_authority_5fkeys_2eproto() {
  delete AuthorityKeys::default_instance_;
  delete AuthorityKeys_Key::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_authority_5fkeys_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_authority_5fkeys_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  AuthorityKeys::default_instance_ = new AuthorityKeys();
  AuthorityKeys_Key::default_instance_ = new AuthorityKeys_Key();
  AuthorityKeys::default_instance_->InitAsDefaultInstance();
  AuthorityKeys_Key::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_authority_5fkeys_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_authority_5fkeys_2eproto_once_);
void protobuf_AddDesc_authority_5fkeys_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_authority_5fkeys_2eproto_once_,
                 &protobuf_AddDesc_authority_5fkeys_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_authority_5fkeys_2eproto {
  StaticDescriptorInitializer_authority_5fkeys_2eproto() {
    protobuf_AddDesc_authority_5fkeys_2eproto();
  }
} static_descriptor_initializer_authority_5fkeys_2eproto_;
#endif

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthorityKeys_Key::kFingerprintFieldNumber;
const int AuthorityKeys_Key::kPublicKeyFieldNumber;
#endif  // !_MSC_VER

AuthorityKeys_Key::AuthorityKeys_Key()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AuthorityKeys_Key::InitAsDefaultInstance() {
}

AuthorityKeys_Key::AuthorityKeys_Key(const AuthorityKeys_Key& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AuthorityKeys_Key::SharedCtor() {
  _cached_size_ = 0;
  fingerprint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthorityKeys_Key::~AuthorityKeys_Key() {
  SharedDtor();
}

void AuthorityKeys_Key::SharedDtor() {
  if (fingerprint_ != &::google::protobuf::internal::GetEmptyString()) {
    delete fingerprint_;
  }
  if (public_key_ != &::google::protobuf::internal::GetEmptyString()) {
    delete public_key_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AuthorityKeys_Key::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AuthorityKeys_Key& AuthorityKeys_Key::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_authority_5fkeys_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_authority_5fkeys_2eproto();
#endif
  return *default_instance_;
}

AuthorityKeys_Key* AuthorityKeys_Key::default_instance_ = NULL;

AuthorityKeys_Key* AuthorityKeys_Key::New() const {
  return new AuthorityKeys_Key;
}

void AuthorityKeys_Key::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fingerprint()) {
      if (fingerprint_ != &::google::protobuf::internal::GetEmptyString()) {
        fingerprint_->clear();
      }
    }
    if (has_public_key()) {
      if (public_key_ != &::google::protobuf::internal::GetEmptyString()) {
        public_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool AuthorityKeys_Key::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes fingerprint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fingerprint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_public_key;
        break;
      }

      // required bytes public_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_public_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuthorityKeys_Key::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes fingerprint = 1;
  if (has_fingerprint()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->fingerprint(), output);
  }

  // required bytes public_key = 2;
  if (has_public_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->public_key(), output);
  }

}

int AuthorityKeys_Key::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes fingerprint = 1;
    if (has_fingerprint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fingerprint());
    }

    // required bytes public_key = 2;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->public_key());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthorityKeys_Key::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthorityKeys_Key*>(&from));
}

void AuthorityKeys_Key::MergeFrom(const AuthorityKeys_Key& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fingerprint()) {
      set_fingerprint(from.fingerprint());
    }
    if (from.has_public_key()) {
      set_public_key(from.public_key());
    }
  }
}

void AuthorityKeys_Key::CopyFrom(const AuthorityKeys_Key& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthorityKeys_Key::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AuthorityKeys_Key::Swap(AuthorityKeys_Key* other) {
  if (other != this) {
    std::swap(fingerprint_, other->fingerprint_);
    std::swap(public_key_, other->public_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AuthorityKeys_Key::GetTypeName() const {
  return "extensions.api.cast_channel.proto.AuthorityKeys.Key";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthorityKeys::kKeysFieldNumber;
#endif  // !_MSC_VER

AuthorityKeys::AuthorityKeys()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AuthorityKeys::InitAsDefaultInstance() {
}

AuthorityKeys::AuthorityKeys(const AuthorityKeys& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AuthorityKeys::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthorityKeys::~AuthorityKeys() {
  SharedDtor();
}

void AuthorityKeys::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AuthorityKeys::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AuthorityKeys& AuthorityKeys::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_authority_5fkeys_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_authority_5fkeys_2eproto();
#endif
  return *default_instance_;
}

AuthorityKeys* AuthorityKeys::default_instance_ = NULL;

AuthorityKeys* AuthorityKeys::New() const {
  return new AuthorityKeys;
}

void AuthorityKeys::Clear() {
  keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool AuthorityKeys::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .extensions.api.cast_channel.proto.AuthorityKeys.Key keys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_keys;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuthorityKeys::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .extensions.api.cast_channel.proto.AuthorityKeys.Key keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->keys(i), output);
  }

}

int AuthorityKeys::ByteSize() const {
  int total_size = 0;

  // repeated .extensions.api.cast_channel.proto.AuthorityKeys.Key keys = 1;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keys(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthorityKeys::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthorityKeys*>(&from));
}

void AuthorityKeys::MergeFrom(const AuthorityKeys& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
}

void AuthorityKeys::CopyFrom(const AuthorityKeys& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthorityKeys::IsInitialized() const {

  for (int i = 0; i < keys_size(); i++) {
    if (!this->keys(i).IsInitialized()) return false;
  }
  return true;
}

void AuthorityKeys::Swap(AuthorityKeys* other) {
  if (other != this) {
    keys_.Swap(&other->keys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AuthorityKeys::GetTypeName() const {
  return "extensions.api.cast_channel.proto.AuthorityKeys";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cast_channel
}  // namespace api
}  // namespace extensions

// @@protoc_insertion_point(global_scope)
