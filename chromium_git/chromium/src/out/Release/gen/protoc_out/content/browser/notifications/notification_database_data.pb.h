// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notification_database_data.proto

#ifndef PROTOBUF_notification_5fdatabase_5fdata_2eproto__INCLUDED
#define PROTOBUF_notification_5fdatabase_5fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace content {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_notification_5fdatabase_5fdata_2eproto();
void protobuf_AssignDesc_notification_5fdatabase_5fdata_2eproto();
void protobuf_ShutdownFile_notification_5fdatabase_5fdata_2eproto();

class NotificationDatabaseDataProto;
class NotificationDatabaseDataProto_NotificationAction;
class NotificationDatabaseDataProto_NotificationData;

enum NotificationDatabaseDataProto_NotificationData_Direction {
  NotificationDatabaseDataProto_NotificationData_Direction_LEFT_TO_RIGHT = 0,
  NotificationDatabaseDataProto_NotificationData_Direction_RIGHT_TO_LEFT = 1,
  NotificationDatabaseDataProto_NotificationData_Direction_AUTO = 2
};
bool NotificationDatabaseDataProto_NotificationData_Direction_IsValid(int value);
const NotificationDatabaseDataProto_NotificationData_Direction NotificationDatabaseDataProto_NotificationData_Direction_Direction_MIN = NotificationDatabaseDataProto_NotificationData_Direction_LEFT_TO_RIGHT;
const NotificationDatabaseDataProto_NotificationData_Direction NotificationDatabaseDataProto_NotificationData_Direction_Direction_MAX = NotificationDatabaseDataProto_NotificationData_Direction_AUTO;
const int NotificationDatabaseDataProto_NotificationData_Direction_Direction_ARRAYSIZE = NotificationDatabaseDataProto_NotificationData_Direction_Direction_MAX + 1;

// ===================================================================

class NotificationDatabaseDataProto_NotificationAction : public ::google::protobuf::MessageLite {
 public:
  NotificationDatabaseDataProto_NotificationAction();
  virtual ~NotificationDatabaseDataProto_NotificationAction();

  NotificationDatabaseDataProto_NotificationAction(const NotificationDatabaseDataProto_NotificationAction& from);

  inline NotificationDatabaseDataProto_NotificationAction& operator=(const NotificationDatabaseDataProto_NotificationAction& from) {
    CopyFrom(from);
    return *this;
  }

  static const NotificationDatabaseDataProto_NotificationAction& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const NotificationDatabaseDataProto_NotificationAction* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(NotificationDatabaseDataProto_NotificationAction* other);

  // implements Message ----------------------------------------------

  NotificationDatabaseDataProto_NotificationAction* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const NotificationDatabaseDataProto_NotificationAction& from);
  void MergeFrom(const NotificationDatabaseDataProto_NotificationAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string action = 1;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 1;
  inline const ::std::string& action() const;
  inline void set_action(const ::std::string& value);
  inline void set_action(const char* value);
  inline void set_action(const char* value, size_t size);
  inline ::std::string* mutable_action();
  inline ::std::string* release_action();
  inline void set_allocated_action(::std::string* action);

  // optional string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // @@protoc_insertion_point(class_scope:content.NotificationDatabaseDataProto.NotificationAction)
 private:
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_title();
  inline void clear_has_title();

  ::std::string* action_;
  ::std::string* title_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_notification_5fdatabase_5fdata_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_notification_5fdatabase_5fdata_2eproto();
  #endif
  friend void protobuf_AssignDesc_notification_5fdatabase_5fdata_2eproto();
  friend void protobuf_ShutdownFile_notification_5fdatabase_5fdata_2eproto();

  void InitAsDefaultInstance();
  static NotificationDatabaseDataProto_NotificationAction* default_instance_;
};
// -------------------------------------------------------------------

class NotificationDatabaseDataProto_NotificationData : public ::google::protobuf::MessageLite {
 public:
  NotificationDatabaseDataProto_NotificationData();
  virtual ~NotificationDatabaseDataProto_NotificationData();

  NotificationDatabaseDataProto_NotificationData(const NotificationDatabaseDataProto_NotificationData& from);

  inline NotificationDatabaseDataProto_NotificationData& operator=(const NotificationDatabaseDataProto_NotificationData& from) {
    CopyFrom(from);
    return *this;
  }

  static const NotificationDatabaseDataProto_NotificationData& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const NotificationDatabaseDataProto_NotificationData* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(NotificationDatabaseDataProto_NotificationData* other);

  // implements Message ----------------------------------------------

  NotificationDatabaseDataProto_NotificationData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const NotificationDatabaseDataProto_NotificationData& from);
  void MergeFrom(const NotificationDatabaseDataProto_NotificationData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef NotificationDatabaseDataProto_NotificationData_Direction Direction;
  static const Direction LEFT_TO_RIGHT = NotificationDatabaseDataProto_NotificationData_Direction_LEFT_TO_RIGHT;
  static const Direction RIGHT_TO_LEFT = NotificationDatabaseDataProto_NotificationData_Direction_RIGHT_TO_LEFT;
  static const Direction AUTO = NotificationDatabaseDataProto_NotificationData_Direction_AUTO;
  static inline bool Direction_IsValid(int value) {
    return NotificationDatabaseDataProto_NotificationData_Direction_IsValid(value);
  }
  static const Direction Direction_MIN =
    NotificationDatabaseDataProto_NotificationData_Direction_Direction_MIN;
  static const Direction Direction_MAX =
    NotificationDatabaseDataProto_NotificationData_Direction_Direction_MAX;
  static const int Direction_ARRAYSIZE =
    NotificationDatabaseDataProto_NotificationData_Direction_Direction_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional string title = 1;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 1;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional .content.NotificationDatabaseDataProto.NotificationData.Direction direction = 2;
  inline bool has_direction() const;
  inline void clear_direction();
  static const int kDirectionFieldNumber = 2;
  inline ::content::NotificationDatabaseDataProto_NotificationData_Direction direction() const;
  inline void set_direction(::content::NotificationDatabaseDataProto_NotificationData_Direction value);

  // optional string lang = 3;
  inline bool has_lang() const;
  inline void clear_lang();
  static const int kLangFieldNumber = 3;
  inline const ::std::string& lang() const;
  inline void set_lang(const ::std::string& value);
  inline void set_lang(const char* value);
  inline void set_lang(const char* value, size_t size);
  inline ::std::string* mutable_lang();
  inline ::std::string* release_lang();
  inline void set_allocated_lang(::std::string* lang);

  // optional string body = 4;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 4;
  inline const ::std::string& body() const;
  inline void set_body(const ::std::string& value);
  inline void set_body(const char* value);
  inline void set_body(const char* value, size_t size);
  inline ::std::string* mutable_body();
  inline ::std::string* release_body();
  inline void set_allocated_body(::std::string* body);

  // optional string tag = 5;
  inline bool has_tag() const;
  inline void clear_tag();
  static const int kTagFieldNumber = 5;
  inline const ::std::string& tag() const;
  inline void set_tag(const ::std::string& value);
  inline void set_tag(const char* value);
  inline void set_tag(const char* value, size_t size);
  inline ::std::string* mutable_tag();
  inline ::std::string* release_tag();
  inline void set_allocated_tag(::std::string* tag);

  // optional string icon = 6;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 6;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  inline void set_allocated_icon(::std::string* icon);

  // repeated int32 vibration_pattern = 9 [packed = true];
  inline int vibration_pattern_size() const;
  inline void clear_vibration_pattern();
  static const int kVibrationPatternFieldNumber = 9;
  inline ::google::protobuf::int32 vibration_pattern(int index) const;
  inline void set_vibration_pattern(int index, ::google::protobuf::int32 value);
  inline void add_vibration_pattern(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      vibration_pattern() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_vibration_pattern();

  // optional int64 timestamp = 12;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 12;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // optional bool silent = 7;
  inline bool has_silent() const;
  inline void clear_silent();
  static const int kSilentFieldNumber = 7;
  inline bool silent() const;
  inline void set_silent(bool value);

  // optional bool require_interaction = 11;
  inline bool has_require_interaction() const;
  inline void clear_require_interaction();
  static const int kRequireInteractionFieldNumber = 11;
  inline bool require_interaction() const;
  inline void set_require_interaction(bool value);

  // optional bytes data = 8;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 8;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // repeated .content.NotificationDatabaseDataProto.NotificationAction actions = 10;
  inline int actions_size() const;
  inline void clear_actions();
  static const int kActionsFieldNumber = 10;
  inline const ::content::NotificationDatabaseDataProto_NotificationAction& actions(int index) const;
  inline ::content::NotificationDatabaseDataProto_NotificationAction* mutable_actions(int index);
  inline ::content::NotificationDatabaseDataProto_NotificationAction* add_actions();
  inline const ::google::protobuf::RepeatedPtrField< ::content::NotificationDatabaseDataProto_NotificationAction >&
      actions() const;
  inline ::google::protobuf::RepeatedPtrField< ::content::NotificationDatabaseDataProto_NotificationAction >*
      mutable_actions();

  // @@protoc_insertion_point(class_scope:content.NotificationDatabaseDataProto.NotificationData)
 private:
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_direction();
  inline void clear_has_direction();
  inline void set_has_lang();
  inline void clear_has_lang();
  inline void set_has_body();
  inline void clear_has_body();
  inline void set_has_tag();
  inline void clear_has_tag();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_silent();
  inline void clear_has_silent();
  inline void set_has_require_interaction();
  inline void clear_has_require_interaction();
  inline void set_has_data();
  inline void clear_has_data();

  ::std::string* title_;
  ::std::string* lang_;
  ::std::string* body_;
  ::std::string* tag_;
  ::std::string* icon_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > vibration_pattern_;
  mutable int _vibration_pattern_cached_byte_size_;
  int direction_;
  bool silent_;
  bool require_interaction_;
  ::google::protobuf::int64 timestamp_;
  ::std::string* data_;
  ::google::protobuf::RepeatedPtrField< ::content::NotificationDatabaseDataProto_NotificationAction > actions_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_notification_5fdatabase_5fdata_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_notification_5fdatabase_5fdata_2eproto();
  #endif
  friend void protobuf_AssignDesc_notification_5fdatabase_5fdata_2eproto();
  friend void protobuf_ShutdownFile_notification_5fdatabase_5fdata_2eproto();

  void InitAsDefaultInstance();
  static NotificationDatabaseDataProto_NotificationData* default_instance_;
};
// -------------------------------------------------------------------

class NotificationDatabaseDataProto : public ::google::protobuf::MessageLite {
 public:
  NotificationDatabaseDataProto();
  virtual ~NotificationDatabaseDataProto();

  NotificationDatabaseDataProto(const NotificationDatabaseDataProto& from);

  inline NotificationDatabaseDataProto& operator=(const NotificationDatabaseDataProto& from) {
    CopyFrom(from);
    return *this;
  }

  static const NotificationDatabaseDataProto& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const NotificationDatabaseDataProto* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(NotificationDatabaseDataProto* other);

  // implements Message ----------------------------------------------

  NotificationDatabaseDataProto* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const NotificationDatabaseDataProto& from);
  void MergeFrom(const NotificationDatabaseDataProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef NotificationDatabaseDataProto_NotificationAction NotificationAction;
  typedef NotificationDatabaseDataProto_NotificationData NotificationData;

  // accessors -------------------------------------------------------

  // optional int64 notification_id = 1;
  inline bool has_notification_id() const;
  inline void clear_notification_id();
  static const int kNotificationIdFieldNumber = 1;
  inline ::google::protobuf::int64 notification_id() const;
  inline void set_notification_id(::google::protobuf::int64 value);

  // optional string origin = 2;
  inline bool has_origin() const;
  inline void clear_origin();
  static const int kOriginFieldNumber = 2;
  inline const ::std::string& origin() const;
  inline void set_origin(const ::std::string& value);
  inline void set_origin(const char* value);
  inline void set_origin(const char* value, size_t size);
  inline ::std::string* mutable_origin();
  inline ::std::string* release_origin();
  inline void set_allocated_origin(::std::string* origin);

  // optional int64 service_worker_registration_id = 3;
  inline bool has_service_worker_registration_id() const;
  inline void clear_service_worker_registration_id();
  static const int kServiceWorkerRegistrationIdFieldNumber = 3;
  inline ::google::protobuf::int64 service_worker_registration_id() const;
  inline void set_service_worker_registration_id(::google::protobuf::int64 value);

  // optional .content.NotificationDatabaseDataProto.NotificationData notification_data = 4;
  inline bool has_notification_data() const;
  inline void clear_notification_data();
  static const int kNotificationDataFieldNumber = 4;
  inline const ::content::NotificationDatabaseDataProto_NotificationData& notification_data() const;
  inline ::content::NotificationDatabaseDataProto_NotificationData* mutable_notification_data();
  inline ::content::NotificationDatabaseDataProto_NotificationData* release_notification_data();
  inline void set_allocated_notification_data(::content::NotificationDatabaseDataProto_NotificationData* notification_data);

  // @@protoc_insertion_point(class_scope:content.NotificationDatabaseDataProto)
 private:
  inline void set_has_notification_id();
  inline void clear_has_notification_id();
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_service_worker_registration_id();
  inline void clear_has_service_worker_registration_id();
  inline void set_has_notification_data();
  inline void clear_has_notification_data();

  ::google::protobuf::int64 notification_id_;
  ::std::string* origin_;
  ::google::protobuf::int64 service_worker_registration_id_;
  ::content::NotificationDatabaseDataProto_NotificationData* notification_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_notification_5fdatabase_5fdata_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_notification_5fdatabase_5fdata_2eproto();
  #endif
  friend void protobuf_AssignDesc_notification_5fdatabase_5fdata_2eproto();
  friend void protobuf_ShutdownFile_notification_5fdatabase_5fdata_2eproto();

  void InitAsDefaultInstance();
  static NotificationDatabaseDataProto* default_instance_;
};
// ===================================================================


// ===================================================================

// NotificationDatabaseDataProto_NotificationAction

// optional string action = 1;
inline bool NotificationDatabaseDataProto_NotificationAction::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotificationDatabaseDataProto_NotificationAction::set_has_action() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotificationDatabaseDataProto_NotificationAction::clear_has_action() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotificationDatabaseDataProto_NotificationAction::clear_action() {
  if (action_ != &::google::protobuf::internal::GetEmptyString()) {
    action_->clear();
  }
  clear_has_action();
}
inline const ::std::string& NotificationDatabaseDataProto_NotificationAction::action() const {
  return *action_;
}
inline void NotificationDatabaseDataProto_NotificationAction::set_action(const ::std::string& value) {
  set_has_action();
  if (action_ == &::google::protobuf::internal::GetEmptyString()) {
    action_ = new ::std::string;
  }
  action_->assign(value);
}
inline void NotificationDatabaseDataProto_NotificationAction::set_action(const char* value) {
  set_has_action();
  if (action_ == &::google::protobuf::internal::GetEmptyString()) {
    action_ = new ::std::string;
  }
  action_->assign(value);
}
inline void NotificationDatabaseDataProto_NotificationAction::set_action(const char* value, size_t size) {
  set_has_action();
  if (action_ == &::google::protobuf::internal::GetEmptyString()) {
    action_ = new ::std::string;
  }
  action_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NotificationDatabaseDataProto_NotificationAction::mutable_action() {
  set_has_action();
  if (action_ == &::google::protobuf::internal::GetEmptyString()) {
    action_ = new ::std::string;
  }
  return action_;
}
inline ::std::string* NotificationDatabaseDataProto_NotificationAction::release_action() {
  clear_has_action();
  if (action_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = action_;
    action_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void NotificationDatabaseDataProto_NotificationAction::set_allocated_action(::std::string* action) {
  if (action_ != &::google::protobuf::internal::GetEmptyString()) {
    delete action_;
  }
  if (action) {
    set_has_action();
    action_ = action;
  } else {
    clear_has_action();
    action_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string title = 2;
inline bool NotificationDatabaseDataProto_NotificationAction::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotificationDatabaseDataProto_NotificationAction::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NotificationDatabaseDataProto_NotificationAction::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NotificationDatabaseDataProto_NotificationAction::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyString()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& NotificationDatabaseDataProto_NotificationAction::title() const {
  return *title_;
}
inline void NotificationDatabaseDataProto_NotificationAction::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyString()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void NotificationDatabaseDataProto_NotificationAction::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyString()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void NotificationDatabaseDataProto_NotificationAction::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyString()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NotificationDatabaseDataProto_NotificationAction::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyString()) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* NotificationDatabaseDataProto_NotificationAction::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void NotificationDatabaseDataProto_NotificationAction::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyString()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// NotificationDatabaseDataProto_NotificationData

// optional string title = 1;
inline bool NotificationDatabaseDataProto_NotificationData::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotificationDatabaseDataProto_NotificationData::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotificationDatabaseDataProto_NotificationData::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotificationDatabaseDataProto_NotificationData::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyString()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& NotificationDatabaseDataProto_NotificationData::title() const {
  return *title_;
}
inline void NotificationDatabaseDataProto_NotificationData::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyString()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void NotificationDatabaseDataProto_NotificationData::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyString()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void NotificationDatabaseDataProto_NotificationData::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyString()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NotificationDatabaseDataProto_NotificationData::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyString()) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* NotificationDatabaseDataProto_NotificationData::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void NotificationDatabaseDataProto_NotificationData::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyString()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional .content.NotificationDatabaseDataProto.NotificationData.Direction direction = 2;
inline bool NotificationDatabaseDataProto_NotificationData::has_direction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotificationDatabaseDataProto_NotificationData::set_has_direction() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NotificationDatabaseDataProto_NotificationData::clear_has_direction() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NotificationDatabaseDataProto_NotificationData::clear_direction() {
  direction_ = 0;
  clear_has_direction();
}
inline ::content::NotificationDatabaseDataProto_NotificationData_Direction NotificationDatabaseDataProto_NotificationData::direction() const {
  return static_cast< ::content::NotificationDatabaseDataProto_NotificationData_Direction >(direction_);
}
inline void NotificationDatabaseDataProto_NotificationData::set_direction(::content::NotificationDatabaseDataProto_NotificationData_Direction value) {
  assert(::content::NotificationDatabaseDataProto_NotificationData_Direction_IsValid(value));
  set_has_direction();
  direction_ = value;
}

// optional string lang = 3;
inline bool NotificationDatabaseDataProto_NotificationData::has_lang() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NotificationDatabaseDataProto_NotificationData::set_has_lang() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NotificationDatabaseDataProto_NotificationData::clear_has_lang() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NotificationDatabaseDataProto_NotificationData::clear_lang() {
  if (lang_ != &::google::protobuf::internal::GetEmptyString()) {
    lang_->clear();
  }
  clear_has_lang();
}
inline const ::std::string& NotificationDatabaseDataProto_NotificationData::lang() const {
  return *lang_;
}
inline void NotificationDatabaseDataProto_NotificationData::set_lang(const ::std::string& value) {
  set_has_lang();
  if (lang_ == &::google::protobuf::internal::GetEmptyString()) {
    lang_ = new ::std::string;
  }
  lang_->assign(value);
}
inline void NotificationDatabaseDataProto_NotificationData::set_lang(const char* value) {
  set_has_lang();
  if (lang_ == &::google::protobuf::internal::GetEmptyString()) {
    lang_ = new ::std::string;
  }
  lang_->assign(value);
}
inline void NotificationDatabaseDataProto_NotificationData::set_lang(const char* value, size_t size) {
  set_has_lang();
  if (lang_ == &::google::protobuf::internal::GetEmptyString()) {
    lang_ = new ::std::string;
  }
  lang_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NotificationDatabaseDataProto_NotificationData::mutable_lang() {
  set_has_lang();
  if (lang_ == &::google::protobuf::internal::GetEmptyString()) {
    lang_ = new ::std::string;
  }
  return lang_;
}
inline ::std::string* NotificationDatabaseDataProto_NotificationData::release_lang() {
  clear_has_lang();
  if (lang_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = lang_;
    lang_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void NotificationDatabaseDataProto_NotificationData::set_allocated_lang(::std::string* lang) {
  if (lang_ != &::google::protobuf::internal::GetEmptyString()) {
    delete lang_;
  }
  if (lang) {
    set_has_lang();
    lang_ = lang;
  } else {
    clear_has_lang();
    lang_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string body = 4;
inline bool NotificationDatabaseDataProto_NotificationData::has_body() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NotificationDatabaseDataProto_NotificationData::set_has_body() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NotificationDatabaseDataProto_NotificationData::clear_has_body() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NotificationDatabaseDataProto_NotificationData::clear_body() {
  if (body_ != &::google::protobuf::internal::GetEmptyString()) {
    body_->clear();
  }
  clear_has_body();
}
inline const ::std::string& NotificationDatabaseDataProto_NotificationData::body() const {
  return *body_;
}
inline void NotificationDatabaseDataProto_NotificationData::set_body(const ::std::string& value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyString()) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void NotificationDatabaseDataProto_NotificationData::set_body(const char* value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyString()) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void NotificationDatabaseDataProto_NotificationData::set_body(const char* value, size_t size) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyString()) {
    body_ = new ::std::string;
  }
  body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NotificationDatabaseDataProto_NotificationData::mutable_body() {
  set_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyString()) {
    body_ = new ::std::string;
  }
  return body_;
}
inline ::std::string* NotificationDatabaseDataProto_NotificationData::release_body() {
  clear_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = body_;
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void NotificationDatabaseDataProto_NotificationData::set_allocated_body(::std::string* body) {
  if (body_ != &::google::protobuf::internal::GetEmptyString()) {
    delete body_;
  }
  if (body) {
    set_has_body();
    body_ = body;
  } else {
    clear_has_body();
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string tag = 5;
inline bool NotificationDatabaseDataProto_NotificationData::has_tag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NotificationDatabaseDataProto_NotificationData::set_has_tag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NotificationDatabaseDataProto_NotificationData::clear_has_tag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NotificationDatabaseDataProto_NotificationData::clear_tag() {
  if (tag_ != &::google::protobuf::internal::GetEmptyString()) {
    tag_->clear();
  }
  clear_has_tag();
}
inline const ::std::string& NotificationDatabaseDataProto_NotificationData::tag() const {
  return *tag_;
}
inline void NotificationDatabaseDataProto_NotificationData::set_tag(const ::std::string& value) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyString()) {
    tag_ = new ::std::string;
  }
  tag_->assign(value);
}
inline void NotificationDatabaseDataProto_NotificationData::set_tag(const char* value) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyString()) {
    tag_ = new ::std::string;
  }
  tag_->assign(value);
}
inline void NotificationDatabaseDataProto_NotificationData::set_tag(const char* value, size_t size) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyString()) {
    tag_ = new ::std::string;
  }
  tag_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NotificationDatabaseDataProto_NotificationData::mutable_tag() {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyString()) {
    tag_ = new ::std::string;
  }
  return tag_;
}
inline ::std::string* NotificationDatabaseDataProto_NotificationData::release_tag() {
  clear_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = tag_;
    tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void NotificationDatabaseDataProto_NotificationData::set_allocated_tag(::std::string* tag) {
  if (tag_ != &::google::protobuf::internal::GetEmptyString()) {
    delete tag_;
  }
  if (tag) {
    set_has_tag();
    tag_ = tag;
  } else {
    clear_has_tag();
    tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string icon = 6;
inline bool NotificationDatabaseDataProto_NotificationData::has_icon() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NotificationDatabaseDataProto_NotificationData::set_has_icon() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NotificationDatabaseDataProto_NotificationData::clear_has_icon() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NotificationDatabaseDataProto_NotificationData::clear_icon() {
  if (icon_ != &::google::protobuf::internal::GetEmptyString()) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& NotificationDatabaseDataProto_NotificationData::icon() const {
  return *icon_;
}
inline void NotificationDatabaseDataProto_NotificationData::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::GetEmptyString()) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void NotificationDatabaseDataProto_NotificationData::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::GetEmptyString()) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void NotificationDatabaseDataProto_NotificationData::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::GetEmptyString()) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NotificationDatabaseDataProto_NotificationData::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::GetEmptyString()) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* NotificationDatabaseDataProto_NotificationData::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void NotificationDatabaseDataProto_NotificationData::set_allocated_icon(::std::string* icon) {
  if (icon_ != &::google::protobuf::internal::GetEmptyString()) {
    delete icon_;
  }
  if (icon) {
    set_has_icon();
    icon_ = icon;
  } else {
    clear_has_icon();
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// repeated int32 vibration_pattern = 9 [packed = true];
inline int NotificationDatabaseDataProto_NotificationData::vibration_pattern_size() const {
  return vibration_pattern_.size();
}
inline void NotificationDatabaseDataProto_NotificationData::clear_vibration_pattern() {
  vibration_pattern_.Clear();
}
inline ::google::protobuf::int32 NotificationDatabaseDataProto_NotificationData::vibration_pattern(int index) const {
  return vibration_pattern_.Get(index);
}
inline void NotificationDatabaseDataProto_NotificationData::set_vibration_pattern(int index, ::google::protobuf::int32 value) {
  vibration_pattern_.Set(index, value);
}
inline void NotificationDatabaseDataProto_NotificationData::add_vibration_pattern(::google::protobuf::int32 value) {
  vibration_pattern_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NotificationDatabaseDataProto_NotificationData::vibration_pattern() const {
  return vibration_pattern_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NotificationDatabaseDataProto_NotificationData::mutable_vibration_pattern() {
  return &vibration_pattern_;
}

// optional int64 timestamp = 12;
inline bool NotificationDatabaseDataProto_NotificationData::has_timestamp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NotificationDatabaseDataProto_NotificationData::set_has_timestamp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NotificationDatabaseDataProto_NotificationData::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NotificationDatabaseDataProto_NotificationData::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 NotificationDatabaseDataProto_NotificationData::timestamp() const {
  return timestamp_;
}
inline void NotificationDatabaseDataProto_NotificationData::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// optional bool silent = 7;
inline bool NotificationDatabaseDataProto_NotificationData::has_silent() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NotificationDatabaseDataProto_NotificationData::set_has_silent() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NotificationDatabaseDataProto_NotificationData::clear_has_silent() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NotificationDatabaseDataProto_NotificationData::clear_silent() {
  silent_ = false;
  clear_has_silent();
}
inline bool NotificationDatabaseDataProto_NotificationData::silent() const {
  return silent_;
}
inline void NotificationDatabaseDataProto_NotificationData::set_silent(bool value) {
  set_has_silent();
  silent_ = value;
}

// optional bool require_interaction = 11;
inline bool NotificationDatabaseDataProto_NotificationData::has_require_interaction() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void NotificationDatabaseDataProto_NotificationData::set_has_require_interaction() {
  _has_bits_[0] |= 0x00000200u;
}
inline void NotificationDatabaseDataProto_NotificationData::clear_has_require_interaction() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void NotificationDatabaseDataProto_NotificationData::clear_require_interaction() {
  require_interaction_ = false;
  clear_has_require_interaction();
}
inline bool NotificationDatabaseDataProto_NotificationData::require_interaction() const {
  return require_interaction_;
}
inline void NotificationDatabaseDataProto_NotificationData::set_require_interaction(bool value) {
  set_has_require_interaction();
  require_interaction_ = value;
}

// optional bytes data = 8;
inline bool NotificationDatabaseDataProto_NotificationData::has_data() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void NotificationDatabaseDataProto_NotificationData::set_has_data() {
  _has_bits_[0] |= 0x00000400u;
}
inline void NotificationDatabaseDataProto_NotificationData::clear_has_data() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void NotificationDatabaseDataProto_NotificationData::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyString()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& NotificationDatabaseDataProto_NotificationData::data() const {
  return *data_;
}
inline void NotificationDatabaseDataProto_NotificationData::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyString()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void NotificationDatabaseDataProto_NotificationData::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyString()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void NotificationDatabaseDataProto_NotificationData::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyString()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NotificationDatabaseDataProto_NotificationData::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyString()) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* NotificationDatabaseDataProto_NotificationData::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void NotificationDatabaseDataProto_NotificationData::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyString()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// repeated .content.NotificationDatabaseDataProto.NotificationAction actions = 10;
inline int NotificationDatabaseDataProto_NotificationData::actions_size() const {
  return actions_.size();
}
inline void NotificationDatabaseDataProto_NotificationData::clear_actions() {
  actions_.Clear();
}
inline const ::content::NotificationDatabaseDataProto_NotificationAction& NotificationDatabaseDataProto_NotificationData::actions(int index) const {
  return actions_.Get(index);
}
inline ::content::NotificationDatabaseDataProto_NotificationAction* NotificationDatabaseDataProto_NotificationData::mutable_actions(int index) {
  return actions_.Mutable(index);
}
inline ::content::NotificationDatabaseDataProto_NotificationAction* NotificationDatabaseDataProto_NotificationData::add_actions() {
  return actions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::content::NotificationDatabaseDataProto_NotificationAction >&
NotificationDatabaseDataProto_NotificationData::actions() const {
  return actions_;
}
inline ::google::protobuf::RepeatedPtrField< ::content::NotificationDatabaseDataProto_NotificationAction >*
NotificationDatabaseDataProto_NotificationData::mutable_actions() {
  return &actions_;
}

// -------------------------------------------------------------------

// NotificationDatabaseDataProto

// optional int64 notification_id = 1;
inline bool NotificationDatabaseDataProto::has_notification_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotificationDatabaseDataProto::set_has_notification_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotificationDatabaseDataProto::clear_has_notification_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotificationDatabaseDataProto::clear_notification_id() {
  notification_id_ = GOOGLE_LONGLONG(0);
  clear_has_notification_id();
}
inline ::google::protobuf::int64 NotificationDatabaseDataProto::notification_id() const {
  return notification_id_;
}
inline void NotificationDatabaseDataProto::set_notification_id(::google::protobuf::int64 value) {
  set_has_notification_id();
  notification_id_ = value;
}

// optional string origin = 2;
inline bool NotificationDatabaseDataProto::has_origin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotificationDatabaseDataProto::set_has_origin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NotificationDatabaseDataProto::clear_has_origin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NotificationDatabaseDataProto::clear_origin() {
  if (origin_ != &::google::protobuf::internal::GetEmptyString()) {
    origin_->clear();
  }
  clear_has_origin();
}
inline const ::std::string& NotificationDatabaseDataProto::origin() const {
  return *origin_;
}
inline void NotificationDatabaseDataProto::set_origin(const ::std::string& value) {
  set_has_origin();
  if (origin_ == &::google::protobuf::internal::GetEmptyString()) {
    origin_ = new ::std::string;
  }
  origin_->assign(value);
}
inline void NotificationDatabaseDataProto::set_origin(const char* value) {
  set_has_origin();
  if (origin_ == &::google::protobuf::internal::GetEmptyString()) {
    origin_ = new ::std::string;
  }
  origin_->assign(value);
}
inline void NotificationDatabaseDataProto::set_origin(const char* value, size_t size) {
  set_has_origin();
  if (origin_ == &::google::protobuf::internal::GetEmptyString()) {
    origin_ = new ::std::string;
  }
  origin_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NotificationDatabaseDataProto::mutable_origin() {
  set_has_origin();
  if (origin_ == &::google::protobuf::internal::GetEmptyString()) {
    origin_ = new ::std::string;
  }
  return origin_;
}
inline ::std::string* NotificationDatabaseDataProto::release_origin() {
  clear_has_origin();
  if (origin_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = origin_;
    origin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void NotificationDatabaseDataProto::set_allocated_origin(::std::string* origin) {
  if (origin_ != &::google::protobuf::internal::GetEmptyString()) {
    delete origin_;
  }
  if (origin) {
    set_has_origin();
    origin_ = origin;
  } else {
    clear_has_origin();
    origin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional int64 service_worker_registration_id = 3;
inline bool NotificationDatabaseDataProto::has_service_worker_registration_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NotificationDatabaseDataProto::set_has_service_worker_registration_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NotificationDatabaseDataProto::clear_has_service_worker_registration_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NotificationDatabaseDataProto::clear_service_worker_registration_id() {
  service_worker_registration_id_ = GOOGLE_LONGLONG(0);
  clear_has_service_worker_registration_id();
}
inline ::google::protobuf::int64 NotificationDatabaseDataProto::service_worker_registration_id() const {
  return service_worker_registration_id_;
}
inline void NotificationDatabaseDataProto::set_service_worker_registration_id(::google::protobuf::int64 value) {
  set_has_service_worker_registration_id();
  service_worker_registration_id_ = value;
}

// optional .content.NotificationDatabaseDataProto.NotificationData notification_data = 4;
inline bool NotificationDatabaseDataProto::has_notification_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NotificationDatabaseDataProto::set_has_notification_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NotificationDatabaseDataProto::clear_has_notification_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NotificationDatabaseDataProto::clear_notification_data() {
  if (notification_data_ != NULL) notification_data_->::content::NotificationDatabaseDataProto_NotificationData::Clear();
  clear_has_notification_data();
}
inline const ::content::NotificationDatabaseDataProto_NotificationData& NotificationDatabaseDataProto::notification_data() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return notification_data_ != NULL ? *notification_data_ : *default_instance().notification_data_;
#else
  return notification_data_ != NULL ? *notification_data_ : *default_instance_->notification_data_;
#endif
}
inline ::content::NotificationDatabaseDataProto_NotificationData* NotificationDatabaseDataProto::mutable_notification_data() {
  set_has_notification_data();
  if (notification_data_ == NULL) notification_data_ = new ::content::NotificationDatabaseDataProto_NotificationData;
  return notification_data_;
}
inline ::content::NotificationDatabaseDataProto_NotificationData* NotificationDatabaseDataProto::release_notification_data() {
  clear_has_notification_data();
  ::content::NotificationDatabaseDataProto_NotificationData* temp = notification_data_;
  notification_data_ = NULL;
  return temp;
}
inline void NotificationDatabaseDataProto::set_allocated_notification_data(::content::NotificationDatabaseDataProto_NotificationData* notification_data) {
  delete notification_data_;
  notification_data_ = notification_data;
  if (notification_data) {
    set_has_notification_data();
  } else {
    clear_has_notification_data();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace content

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_notification_5fdatabase_5fdata_2eproto__INCLUDED
