// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service_worker_database.proto

#ifndef PROTOBUF_service_5fworker_5fdatabase_2eproto__INCLUDED
#define PROTOBUF_service_5fworker_5fdatabase_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace content {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_service_5fworker_5fdatabase_2eproto();
void protobuf_AssignDesc_service_5fworker_5fdatabase_2eproto();
void protobuf_ShutdownFile_service_5fworker_5fdatabase_2eproto();

class ServiceWorkerRegistrationData;
class ServiceWorkerResourceRecord;

// ===================================================================

class ServiceWorkerRegistrationData : public ::google::protobuf::MessageLite {
 public:
  ServiceWorkerRegistrationData();
  virtual ~ServiceWorkerRegistrationData();

  ServiceWorkerRegistrationData(const ServiceWorkerRegistrationData& from);

  inline ServiceWorkerRegistrationData& operator=(const ServiceWorkerRegistrationData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ServiceWorkerRegistrationData& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ServiceWorkerRegistrationData* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ServiceWorkerRegistrationData* other);

  // implements Message ----------------------------------------------

  ServiceWorkerRegistrationData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ServiceWorkerRegistrationData& from);
  void MergeFrom(const ServiceWorkerRegistrationData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 registration_id = 1;
  inline bool has_registration_id() const;
  inline void clear_registration_id();
  static const int kRegistrationIdFieldNumber = 1;
  inline ::google::protobuf::int64 registration_id() const;
  inline void set_registration_id(::google::protobuf::int64 value);

  // required string scope_url = 2;
  inline bool has_scope_url() const;
  inline void clear_scope_url();
  static const int kScopeUrlFieldNumber = 2;
  inline const ::std::string& scope_url() const;
  inline void set_scope_url(const ::std::string& value);
  inline void set_scope_url(const char* value);
  inline void set_scope_url(const char* value, size_t size);
  inline ::std::string* mutable_scope_url();
  inline ::std::string* release_scope_url();
  inline void set_allocated_scope_url(::std::string* scope_url);

  // required string script_url = 3;
  inline bool has_script_url() const;
  inline void clear_script_url();
  static const int kScriptUrlFieldNumber = 3;
  inline const ::std::string& script_url() const;
  inline void set_script_url(const ::std::string& value);
  inline void set_script_url(const char* value);
  inline void set_script_url(const char* value, size_t size);
  inline ::std::string* mutable_script_url();
  inline ::std::string* release_script_url();
  inline void set_allocated_script_url(::std::string* script_url);

  // required int64 version_id = 4;
  inline bool has_version_id() const;
  inline void clear_version_id();
  static const int kVersionIdFieldNumber = 4;
  inline ::google::protobuf::int64 version_id() const;
  inline void set_version_id(::google::protobuf::int64 value);

  // required bool is_active = 5;
  inline bool has_is_active() const;
  inline void clear_is_active();
  static const int kIsActiveFieldNumber = 5;
  inline bool is_active() const;
  inline void set_is_active(bool value);

  // required bool has_fetch_handler = 6;
  inline bool has_has_fetch_handler() const;
  inline void clear_has_fetch_handler();
  static const int kHasFetchHandlerFieldNumber = 6;
  inline bool has_fetch_handler() const;
  inline void set_has_fetch_handler(bool value);

  // required int64 last_update_check_time = 7;
  inline bool has_last_update_check_time() const;
  inline void clear_last_update_check_time();
  static const int kLastUpdateCheckTimeFieldNumber = 7;
  inline ::google::protobuf::int64 last_update_check_time() const;
  inline void set_last_update_check_time(::google::protobuf::int64 value);

  // optional uint64 resources_total_size_bytes = 8;
  inline bool has_resources_total_size_bytes() const;
  inline void clear_resources_total_size_bytes();
  static const int kResourcesTotalSizeBytesFieldNumber = 8;
  inline ::google::protobuf::uint64 resources_total_size_bytes() const;
  inline void set_resources_total_size_bytes(::google::protobuf::uint64 value);

  // repeated string foreign_fetch_scope = 9;
  inline int foreign_fetch_scope_size() const;
  inline void clear_foreign_fetch_scope();
  static const int kForeignFetchScopeFieldNumber = 9;
  inline const ::std::string& foreign_fetch_scope(int index) const;
  inline ::std::string* mutable_foreign_fetch_scope(int index);
  inline void set_foreign_fetch_scope(int index, const ::std::string& value);
  inline void set_foreign_fetch_scope(int index, const char* value);
  inline void set_foreign_fetch_scope(int index, const char* value, size_t size);
  inline ::std::string* add_foreign_fetch_scope();
  inline void add_foreign_fetch_scope(const ::std::string& value);
  inline void add_foreign_fetch_scope(const char* value);
  inline void add_foreign_fetch_scope(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& foreign_fetch_scope() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_foreign_fetch_scope();

  // @@protoc_insertion_point(class_scope:content.ServiceWorkerRegistrationData)
 private:
  inline void set_has_registration_id();
  inline void clear_has_registration_id();
  inline void set_has_scope_url();
  inline void clear_has_scope_url();
  inline void set_has_script_url();
  inline void clear_has_script_url();
  inline void set_has_version_id();
  inline void clear_has_version_id();
  inline void set_has_is_active();
  inline void clear_has_is_active();
  inline void set_has_has_fetch_handler();
  inline void clear_has_has_fetch_handler();
  inline void set_has_last_update_check_time();
  inline void clear_has_last_update_check_time();
  inline void set_has_resources_total_size_bytes();
  inline void clear_has_resources_total_size_bytes();

  ::google::protobuf::int64 registration_id_;
  ::std::string* scope_url_;
  ::std::string* script_url_;
  ::google::protobuf::int64 version_id_;
  ::google::protobuf::int64 last_update_check_time_;
  ::google::protobuf::uint64 resources_total_size_bytes_;
  ::google::protobuf::RepeatedPtrField< ::std::string> foreign_fetch_scope_;
  bool is_active_;
  bool has_fetch_handler_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_service_5fworker_5fdatabase_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_service_5fworker_5fdatabase_2eproto();
  #endif
  friend void protobuf_AssignDesc_service_5fworker_5fdatabase_2eproto();
  friend void protobuf_ShutdownFile_service_5fworker_5fdatabase_2eproto();

  void InitAsDefaultInstance();
  static ServiceWorkerRegistrationData* default_instance_;
};
// -------------------------------------------------------------------

class ServiceWorkerResourceRecord : public ::google::protobuf::MessageLite {
 public:
  ServiceWorkerResourceRecord();
  virtual ~ServiceWorkerResourceRecord();

  ServiceWorkerResourceRecord(const ServiceWorkerResourceRecord& from);

  inline ServiceWorkerResourceRecord& operator=(const ServiceWorkerResourceRecord& from) {
    CopyFrom(from);
    return *this;
  }

  static const ServiceWorkerResourceRecord& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ServiceWorkerResourceRecord* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ServiceWorkerResourceRecord* other);

  // implements Message ----------------------------------------------

  ServiceWorkerResourceRecord* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ServiceWorkerResourceRecord& from);
  void MergeFrom(const ServiceWorkerResourceRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 resource_id = 1;
  inline bool has_resource_id() const;
  inline void clear_resource_id();
  static const int kResourceIdFieldNumber = 1;
  inline ::google::protobuf::int64 resource_id() const;
  inline void set_resource_id(::google::protobuf::int64 value);

  // required string url = 2;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 2;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // optional uint64 size_bytes = 3;
  inline bool has_size_bytes() const;
  inline void clear_size_bytes();
  static const int kSizeBytesFieldNumber = 3;
  inline ::google::protobuf::uint64 size_bytes() const;
  inline void set_size_bytes(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:content.ServiceWorkerResourceRecord)
 private:
  inline void set_has_resource_id();
  inline void clear_has_resource_id();
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_size_bytes();
  inline void clear_has_size_bytes();

  ::google::protobuf::int64 resource_id_;
  ::std::string* url_;
  ::google::protobuf::uint64 size_bytes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_service_5fworker_5fdatabase_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_service_5fworker_5fdatabase_2eproto();
  #endif
  friend void protobuf_AssignDesc_service_5fworker_5fdatabase_2eproto();
  friend void protobuf_ShutdownFile_service_5fworker_5fdatabase_2eproto();

  void InitAsDefaultInstance();
  static ServiceWorkerResourceRecord* default_instance_;
};
// ===================================================================


// ===================================================================

// ServiceWorkerRegistrationData

// required int64 registration_id = 1;
inline bool ServiceWorkerRegistrationData::has_registration_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceWorkerRegistrationData::set_has_registration_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServiceWorkerRegistrationData::clear_has_registration_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServiceWorkerRegistrationData::clear_registration_id() {
  registration_id_ = GOOGLE_LONGLONG(0);
  clear_has_registration_id();
}
inline ::google::protobuf::int64 ServiceWorkerRegistrationData::registration_id() const {
  return registration_id_;
}
inline void ServiceWorkerRegistrationData::set_registration_id(::google::protobuf::int64 value) {
  set_has_registration_id();
  registration_id_ = value;
}

// required string scope_url = 2;
inline bool ServiceWorkerRegistrationData::has_scope_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceWorkerRegistrationData::set_has_scope_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServiceWorkerRegistrationData::clear_has_scope_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServiceWorkerRegistrationData::clear_scope_url() {
  if (scope_url_ != &::google::protobuf::internal::GetEmptyString()) {
    scope_url_->clear();
  }
  clear_has_scope_url();
}
inline const ::std::string& ServiceWorkerRegistrationData::scope_url() const {
  return *scope_url_;
}
inline void ServiceWorkerRegistrationData::set_scope_url(const ::std::string& value) {
  set_has_scope_url();
  if (scope_url_ == &::google::protobuf::internal::GetEmptyString()) {
    scope_url_ = new ::std::string;
  }
  scope_url_->assign(value);
}
inline void ServiceWorkerRegistrationData::set_scope_url(const char* value) {
  set_has_scope_url();
  if (scope_url_ == &::google::protobuf::internal::GetEmptyString()) {
    scope_url_ = new ::std::string;
  }
  scope_url_->assign(value);
}
inline void ServiceWorkerRegistrationData::set_scope_url(const char* value, size_t size) {
  set_has_scope_url();
  if (scope_url_ == &::google::protobuf::internal::GetEmptyString()) {
    scope_url_ = new ::std::string;
  }
  scope_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServiceWorkerRegistrationData::mutable_scope_url() {
  set_has_scope_url();
  if (scope_url_ == &::google::protobuf::internal::GetEmptyString()) {
    scope_url_ = new ::std::string;
  }
  return scope_url_;
}
inline ::std::string* ServiceWorkerRegistrationData::release_scope_url() {
  clear_has_scope_url();
  if (scope_url_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = scope_url_;
    scope_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void ServiceWorkerRegistrationData::set_allocated_scope_url(::std::string* scope_url) {
  if (scope_url_ != &::google::protobuf::internal::GetEmptyString()) {
    delete scope_url_;
  }
  if (scope_url) {
    set_has_scope_url();
    scope_url_ = scope_url;
  } else {
    clear_has_scope_url();
    scope_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// required string script_url = 3;
inline bool ServiceWorkerRegistrationData::has_script_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServiceWorkerRegistrationData::set_has_script_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServiceWorkerRegistrationData::clear_has_script_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServiceWorkerRegistrationData::clear_script_url() {
  if (script_url_ != &::google::protobuf::internal::GetEmptyString()) {
    script_url_->clear();
  }
  clear_has_script_url();
}
inline const ::std::string& ServiceWorkerRegistrationData::script_url() const {
  return *script_url_;
}
inline void ServiceWorkerRegistrationData::set_script_url(const ::std::string& value) {
  set_has_script_url();
  if (script_url_ == &::google::protobuf::internal::GetEmptyString()) {
    script_url_ = new ::std::string;
  }
  script_url_->assign(value);
}
inline void ServiceWorkerRegistrationData::set_script_url(const char* value) {
  set_has_script_url();
  if (script_url_ == &::google::protobuf::internal::GetEmptyString()) {
    script_url_ = new ::std::string;
  }
  script_url_->assign(value);
}
inline void ServiceWorkerRegistrationData::set_script_url(const char* value, size_t size) {
  set_has_script_url();
  if (script_url_ == &::google::protobuf::internal::GetEmptyString()) {
    script_url_ = new ::std::string;
  }
  script_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServiceWorkerRegistrationData::mutable_script_url() {
  set_has_script_url();
  if (script_url_ == &::google::protobuf::internal::GetEmptyString()) {
    script_url_ = new ::std::string;
  }
  return script_url_;
}
inline ::std::string* ServiceWorkerRegistrationData::release_script_url() {
  clear_has_script_url();
  if (script_url_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = script_url_;
    script_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void ServiceWorkerRegistrationData::set_allocated_script_url(::std::string* script_url) {
  if (script_url_ != &::google::protobuf::internal::GetEmptyString()) {
    delete script_url_;
  }
  if (script_url) {
    set_has_script_url();
    script_url_ = script_url;
  } else {
    clear_has_script_url();
    script_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// required int64 version_id = 4;
inline bool ServiceWorkerRegistrationData::has_version_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServiceWorkerRegistrationData::set_has_version_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServiceWorkerRegistrationData::clear_has_version_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServiceWorkerRegistrationData::clear_version_id() {
  version_id_ = GOOGLE_LONGLONG(0);
  clear_has_version_id();
}
inline ::google::protobuf::int64 ServiceWorkerRegistrationData::version_id() const {
  return version_id_;
}
inline void ServiceWorkerRegistrationData::set_version_id(::google::protobuf::int64 value) {
  set_has_version_id();
  version_id_ = value;
}

// required bool is_active = 5;
inline bool ServiceWorkerRegistrationData::has_is_active() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServiceWorkerRegistrationData::set_has_is_active() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServiceWorkerRegistrationData::clear_has_is_active() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServiceWorkerRegistrationData::clear_is_active() {
  is_active_ = false;
  clear_has_is_active();
}
inline bool ServiceWorkerRegistrationData::is_active() const {
  return is_active_;
}
inline void ServiceWorkerRegistrationData::set_is_active(bool value) {
  set_has_is_active();
  is_active_ = value;
}

// required bool has_fetch_handler = 6;
inline bool ServiceWorkerRegistrationData::has_has_fetch_handler() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ServiceWorkerRegistrationData::set_has_has_fetch_handler() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ServiceWorkerRegistrationData::clear_has_has_fetch_handler() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ServiceWorkerRegistrationData::clear_has_fetch_handler() {
  has_fetch_handler_ = false;
  clear_has_has_fetch_handler();
}
inline bool ServiceWorkerRegistrationData::has_fetch_handler() const {
  return has_fetch_handler_;
}
inline void ServiceWorkerRegistrationData::set_has_fetch_handler(bool value) {
  set_has_has_fetch_handler();
  has_fetch_handler_ = value;
}

// required int64 last_update_check_time = 7;
inline bool ServiceWorkerRegistrationData::has_last_update_check_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ServiceWorkerRegistrationData::set_has_last_update_check_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ServiceWorkerRegistrationData::clear_has_last_update_check_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ServiceWorkerRegistrationData::clear_last_update_check_time() {
  last_update_check_time_ = GOOGLE_LONGLONG(0);
  clear_has_last_update_check_time();
}
inline ::google::protobuf::int64 ServiceWorkerRegistrationData::last_update_check_time() const {
  return last_update_check_time_;
}
inline void ServiceWorkerRegistrationData::set_last_update_check_time(::google::protobuf::int64 value) {
  set_has_last_update_check_time();
  last_update_check_time_ = value;
}

// optional uint64 resources_total_size_bytes = 8;
inline bool ServiceWorkerRegistrationData::has_resources_total_size_bytes() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ServiceWorkerRegistrationData::set_has_resources_total_size_bytes() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ServiceWorkerRegistrationData::clear_has_resources_total_size_bytes() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ServiceWorkerRegistrationData::clear_resources_total_size_bytes() {
  resources_total_size_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_resources_total_size_bytes();
}
inline ::google::protobuf::uint64 ServiceWorkerRegistrationData::resources_total_size_bytes() const {
  return resources_total_size_bytes_;
}
inline void ServiceWorkerRegistrationData::set_resources_total_size_bytes(::google::protobuf::uint64 value) {
  set_has_resources_total_size_bytes();
  resources_total_size_bytes_ = value;
}

// repeated string foreign_fetch_scope = 9;
inline int ServiceWorkerRegistrationData::foreign_fetch_scope_size() const {
  return foreign_fetch_scope_.size();
}
inline void ServiceWorkerRegistrationData::clear_foreign_fetch_scope() {
  foreign_fetch_scope_.Clear();
}
inline const ::std::string& ServiceWorkerRegistrationData::foreign_fetch_scope(int index) const {
  return foreign_fetch_scope_.Get(index);
}
inline ::std::string* ServiceWorkerRegistrationData::mutable_foreign_fetch_scope(int index) {
  return foreign_fetch_scope_.Mutable(index);
}
inline void ServiceWorkerRegistrationData::set_foreign_fetch_scope(int index, const ::std::string& value) {
  foreign_fetch_scope_.Mutable(index)->assign(value);
}
inline void ServiceWorkerRegistrationData::set_foreign_fetch_scope(int index, const char* value) {
  foreign_fetch_scope_.Mutable(index)->assign(value);
}
inline void ServiceWorkerRegistrationData::set_foreign_fetch_scope(int index, const char* value, size_t size) {
  foreign_fetch_scope_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServiceWorkerRegistrationData::add_foreign_fetch_scope() {
  return foreign_fetch_scope_.Add();
}
inline void ServiceWorkerRegistrationData::add_foreign_fetch_scope(const ::std::string& value) {
  foreign_fetch_scope_.Add()->assign(value);
}
inline void ServiceWorkerRegistrationData::add_foreign_fetch_scope(const char* value) {
  foreign_fetch_scope_.Add()->assign(value);
}
inline void ServiceWorkerRegistrationData::add_foreign_fetch_scope(const char* value, size_t size) {
  foreign_fetch_scope_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ServiceWorkerRegistrationData::foreign_fetch_scope() const {
  return foreign_fetch_scope_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ServiceWorkerRegistrationData::mutable_foreign_fetch_scope() {
  return &foreign_fetch_scope_;
}

// -------------------------------------------------------------------

// ServiceWorkerResourceRecord

// required int64 resource_id = 1;
inline bool ServiceWorkerResourceRecord::has_resource_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceWorkerResourceRecord::set_has_resource_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServiceWorkerResourceRecord::clear_has_resource_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServiceWorkerResourceRecord::clear_resource_id() {
  resource_id_ = GOOGLE_LONGLONG(0);
  clear_has_resource_id();
}
inline ::google::protobuf::int64 ServiceWorkerResourceRecord::resource_id() const {
  return resource_id_;
}
inline void ServiceWorkerResourceRecord::set_resource_id(::google::protobuf::int64 value) {
  set_has_resource_id();
  resource_id_ = value;
}

// required string url = 2;
inline bool ServiceWorkerResourceRecord::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceWorkerResourceRecord::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServiceWorkerResourceRecord::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServiceWorkerResourceRecord::clear_url() {
  if (url_ != &::google::protobuf::internal::GetEmptyString()) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& ServiceWorkerResourceRecord::url() const {
  return *url_;
}
inline void ServiceWorkerResourceRecord::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyString()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void ServiceWorkerResourceRecord::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyString()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void ServiceWorkerResourceRecord::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyString()) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServiceWorkerResourceRecord::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyString()) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* ServiceWorkerResourceRecord::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void ServiceWorkerResourceRecord::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::GetEmptyString()) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional uint64 size_bytes = 3;
inline bool ServiceWorkerResourceRecord::has_size_bytes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServiceWorkerResourceRecord::set_has_size_bytes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServiceWorkerResourceRecord::clear_has_size_bytes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServiceWorkerResourceRecord::clear_size_bytes() {
  size_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_size_bytes();
}
inline ::google::protobuf::uint64 ServiceWorkerResourceRecord::size_bytes() const {
  return size_bytes_;
}
inline void ServiceWorkerResourceRecord::set_size_bytes(::google::protobuf::uint64 value) {
  set_has_size_bytes();
  size_bytes_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace content

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_service_5fworker_5fdatabase_2eproto__INCLUDED
