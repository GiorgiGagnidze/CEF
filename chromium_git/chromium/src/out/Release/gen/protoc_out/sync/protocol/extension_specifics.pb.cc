// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: extension_specifics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "extension_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {

void protobuf_ShutdownFile_extension_5fspecifics_2eproto() {
  delete ExtensionSpecifics::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_extension_5fspecifics_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_extension_5fspecifics_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ExtensionSpecifics::default_instance_ = new ExtensionSpecifics();
  ExtensionSpecifics::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_extension_5fspecifics_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_extension_5fspecifics_2eproto_once_);
void protobuf_AddDesc_extension_5fspecifics_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_extension_5fspecifics_2eproto_once_,
                 &protobuf_AddDesc_extension_5fspecifics_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_extension_5fspecifics_2eproto {
  StaticDescriptorInitializer_extension_5fspecifics_2eproto() {
    protobuf_AddDesc_extension_5fspecifics_2eproto();
  }
} static_descriptor_initializer_extension_5fspecifics_2eproto_;
#endif

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExtensionSpecifics::kIdFieldNumber;
const int ExtensionSpecifics::kVersionFieldNumber;
const int ExtensionSpecifics::kUpdateUrlFieldNumber;
const int ExtensionSpecifics::kEnabledFieldNumber;
const int ExtensionSpecifics::kIncognitoEnabledFieldNumber;
const int ExtensionSpecifics::kNameFieldNumber;
const int ExtensionSpecifics::kRemoteInstallFieldNumber;
const int ExtensionSpecifics::kInstalledByCustodianFieldNumber;
const int ExtensionSpecifics::kAllUrlsEnabledFieldNumber;
const int ExtensionSpecifics::kDisableReasonsFieldNumber;
#endif  // !_MSC_VER

ExtensionSpecifics::ExtensionSpecifics()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ExtensionSpecifics::InitAsDefaultInstance() {
}

ExtensionSpecifics::ExtensionSpecifics(const ExtensionSpecifics& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ExtensionSpecifics::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  update_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  enabled_ = false;
  incognito_enabled_ = false;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  remote_install_ = false;
  installed_by_custodian_ = false;
  all_urls_enabled_ = false;
  disable_reasons_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExtensionSpecifics::~ExtensionSpecifics() {
  SharedDtor();
}

void ExtensionSpecifics::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete id_;
  }
  if (version_ != &::google::protobuf::internal::GetEmptyString()) {
    delete version_;
  }
  if (update_url_ != &::google::protobuf::internal::GetEmptyString()) {
    delete update_url_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ExtensionSpecifics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ExtensionSpecifics& ExtensionSpecifics::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_extension_5fspecifics_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_extension_5fspecifics_2eproto();
#endif
  return *default_instance_;
}

ExtensionSpecifics* ExtensionSpecifics::default_instance_ = NULL;

ExtensionSpecifics* ExtensionSpecifics::New() const {
  return new ExtensionSpecifics;
}

void ExtensionSpecifics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyString()) {
        id_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyString()) {
        version_->clear();
      }
    }
    if (has_update_url()) {
      if (update_url_ != &::google::protobuf::internal::GetEmptyString()) {
        update_url_->clear();
      }
    }
    enabled_ = false;
    incognito_enabled_ = false;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
    remote_install_ = false;
    installed_by_custodian_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    all_urls_enabled_ = false;
    disable_reasons_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExtensionSpecifics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }

      // optional string version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_update_url;
        break;
      }

      // optional string update_url = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_update_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_enabled;
        break;
      }

      // optional bool enabled = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_incognito_enabled;
        break;
      }

      // optional bool incognito_enabled = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_incognito_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &incognito_enabled_)));
          set_has_incognito_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }

      // optional string name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_remote_install;
        break;
      }

      // optional bool remote_install = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remote_install:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &remote_install_)));
          set_has_remote_install();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_installed_by_custodian;
        break;
      }

      // optional bool installed_by_custodian = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_installed_by_custodian:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &installed_by_custodian_)));
          set_has_installed_by_custodian();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_all_urls_enabled;
        break;
      }

      // optional bool all_urls_enabled = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_urls_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &all_urls_enabled_)));
          set_has_all_urls_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_disable_reasons;
        break;
      }

      // optional int32 disable_reasons = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_disable_reasons:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &disable_reasons_)));
          set_has_disable_reasons();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExtensionSpecifics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->version(), output);
  }

  // optional string update_url = 3;
  if (has_update_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->update_url(), output);
  }

  // optional bool enabled = 4;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->enabled(), output);
  }

  // optional bool incognito_enabled = 5;
  if (has_incognito_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->incognito_enabled(), output);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->name(), output);
  }

  // optional bool remote_install = 7;
  if (has_remote_install()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->remote_install(), output);
  }

  // optional bool installed_by_custodian = 8;
  if (has_installed_by_custodian()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->installed_by_custodian(), output);
  }

  // optional bool all_urls_enabled = 9;
  if (has_all_urls_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->all_urls_enabled(), output);
  }

  // optional int32 disable_reasons = 10;
  if (has_disable_reasons()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->disable_reasons(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int ExtensionSpecifics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string update_url = 3;
    if (has_update_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->update_url());
    }

    // optional bool enabled = 4;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool incognito_enabled = 5;
    if (has_incognito_enabled()) {
      total_size += 1 + 1;
    }

    // optional string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool remote_install = 7;
    if (has_remote_install()) {
      total_size += 1 + 1;
    }

    // optional bool installed_by_custodian = 8;
    if (has_installed_by_custodian()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool all_urls_enabled = 9;
    if (has_all_urls_enabled()) {
      total_size += 1 + 1;
    }

    // optional int32 disable_reasons = 10;
    if (has_disable_reasons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->disable_reasons());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtensionSpecifics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ExtensionSpecifics*>(&from));
}

void ExtensionSpecifics::MergeFrom(const ExtensionSpecifics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_update_url()) {
      set_update_url(from.update_url());
    }
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
    if (from.has_incognito_enabled()) {
      set_incognito_enabled(from.incognito_enabled());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_remote_install()) {
      set_remote_install(from.remote_install());
    }
    if (from.has_installed_by_custodian()) {
      set_installed_by_custodian(from.installed_by_custodian());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_all_urls_enabled()) {
      set_all_urls_enabled(from.all_urls_enabled());
    }
    if (from.has_disable_reasons()) {
      set_disable_reasons(from.disable_reasons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExtensionSpecifics::CopyFrom(const ExtensionSpecifics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionSpecifics::IsInitialized() const {

  return true;
}

void ExtensionSpecifics::Swap(ExtensionSpecifics* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(version_, other->version_);
    std::swap(update_url_, other->update_url_);
    std::swap(enabled_, other->enabled_);
    std::swap(incognito_enabled_, other->incognito_enabled_);
    std::swap(name_, other->name_);
    std::swap(remote_install_, other->remote_install_);
    std::swap(installed_by_custodian_, other->installed_by_custodian_);
    std::swap(all_urls_enabled_, other->all_urls_enabled_);
    std::swap(disable_reasons_, other->disable_reasons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ExtensionSpecifics::GetTypeName() const {
  return "sync_pb.ExtensionSpecifics";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)
