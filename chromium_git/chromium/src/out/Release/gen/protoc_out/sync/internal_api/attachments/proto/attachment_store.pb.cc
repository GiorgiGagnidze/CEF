// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: attachment_store.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "attachment_store.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace attachment_store_pb {

void protobuf_ShutdownFile_attachment_5fstore_2eproto() {
  delete StoreMetadata::default_instance_;
  delete RecordMetadata::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_attachment_5fstore_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_attachment_5fstore_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  StoreMetadata::default_instance_ = new StoreMetadata();
  RecordMetadata::default_instance_ = new RecordMetadata();
  StoreMetadata::default_instance_->InitAsDefaultInstance();
  RecordMetadata::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_attachment_5fstore_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_attachment_5fstore_2eproto_once_);
void protobuf_AddDesc_attachment_5fstore_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_attachment_5fstore_2eproto_once_,
                 &protobuf_AddDesc_attachment_5fstore_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_attachment_5fstore_2eproto {
  StaticDescriptorInitializer_attachment_5fstore_2eproto() {
    protobuf_AddDesc_attachment_5fstore_2eproto();
  }
} static_descriptor_initializer_attachment_5fstore_2eproto_;
#endif

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoreMetadata::kSchemaVersionFieldNumber;
#endif  // !_MSC_VER

StoreMetadata::StoreMetadata()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StoreMetadata::InitAsDefaultInstance() {
}

StoreMetadata::StoreMetadata(const StoreMetadata& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StoreMetadata::SharedCtor() {
  _cached_size_ = 0;
  schema_version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreMetadata::~StoreMetadata() {
  SharedDtor();
}

void StoreMetadata::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StoreMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StoreMetadata& StoreMetadata::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_attachment_5fstore_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_attachment_5fstore_2eproto();
#endif
  return *default_instance_;
}

StoreMetadata* StoreMetadata::default_instance_ = NULL;

StoreMetadata* StoreMetadata::New() const {
  return new StoreMetadata;
}

void StoreMetadata::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    schema_version_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 schema_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &schema_version_)));
          set_has_schema_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 schema_version = 1;
  if (has_schema_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->schema_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int StoreMetadata::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 schema_version = 1;
    if (has_schema_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->schema_version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreMetadata::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StoreMetadata*>(&from));
}

void StoreMetadata::MergeFrom(const StoreMetadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_schema_version()) {
      set_schema_version(from.schema_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreMetadata::CopyFrom(const StoreMetadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreMetadata::IsInitialized() const {

  return true;
}

void StoreMetadata::Swap(StoreMetadata* other) {
  if (other != this) {
    std::swap(schema_version_, other->schema_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StoreMetadata::GetTypeName() const {
  return "attachment_store_pb.StoreMetadata";
}


// ===================================================================

bool RecordMetadata_Component_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RecordMetadata_Component RecordMetadata::UNKNOWN;
const RecordMetadata_Component RecordMetadata::MODEL_TYPE;
const RecordMetadata_Component RecordMetadata::SYNC;
const RecordMetadata_Component RecordMetadata::Component_MIN;
const RecordMetadata_Component RecordMetadata::Component_MAX;
const int RecordMetadata::Component_ARRAYSIZE;
#endif  // _MSC_VER
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecordMetadata::kAttachmentSizeFieldNumber;
const int RecordMetadata::kCrc32CFieldNumber;
const int RecordMetadata::kComponentFieldNumber;
#endif  // !_MSC_VER

RecordMetadata::RecordMetadata()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RecordMetadata::InitAsDefaultInstance() {
}

RecordMetadata::RecordMetadata(const RecordMetadata& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RecordMetadata::SharedCtor() {
  _cached_size_ = 0;
  attachment_size_ = GOOGLE_LONGLONG(0);
  crc32c_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordMetadata::~RecordMetadata() {
  SharedDtor();
}

void RecordMetadata::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RecordMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RecordMetadata& RecordMetadata::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_attachment_5fstore_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_attachment_5fstore_2eproto();
#endif
  return *default_instance_;
}

RecordMetadata* RecordMetadata::default_instance_ = NULL;

RecordMetadata* RecordMetadata::New() const {
  return new RecordMetadata;
}

void RecordMetadata::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attachment_size_ = GOOGLE_LONGLONG(0);
    crc32c_ = 0u;
  }
  component_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 attachment_size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &attachment_size_)));
          set_has_attachment_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_crc32c;
        break;
      }

      // optional fixed32 crc32c = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_crc32c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &crc32c_)));
          set_has_crc32c();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_component;
        break;
      }

      // repeated .attachment_store_pb.RecordMetadata.Component component = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_component:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::attachment_store_pb::RecordMetadata_Component_IsValid(value)) {
            add_component(static_cast< ::attachment_store_pb::RecordMetadata_Component >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::attachment_store_pb::RecordMetadata_Component_IsValid,
                 this->mutable_component())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_component;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 attachment_size = 1;
  if (has_attachment_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->attachment_size(), output);
  }

  // optional fixed32 crc32c = 2;
  if (has_crc32c()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->crc32c(), output);
  }

  // repeated .attachment_store_pb.RecordMetadata.Component component = 3;
  for (int i = 0; i < this->component_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->component(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int RecordMetadata::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 attachment_size = 1;
    if (has_attachment_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->attachment_size());
    }

    // optional fixed32 crc32c = 2;
    if (has_crc32c()) {
      total_size += 1 + 4;
    }

  }
  // repeated .attachment_store_pb.RecordMetadata.Component component = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->component_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->component(i));
    }
    total_size += 1 * this->component_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordMetadata::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RecordMetadata*>(&from));
}

void RecordMetadata::MergeFrom(const RecordMetadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  component_.MergeFrom(from.component_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attachment_size()) {
      set_attachment_size(from.attachment_size());
    }
    if (from.has_crc32c()) {
      set_crc32c(from.crc32c());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordMetadata::CopyFrom(const RecordMetadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordMetadata::IsInitialized() const {

  return true;
}

void RecordMetadata::Swap(RecordMetadata* other) {
  if (other != this) {
    std::swap(attachment_size_, other->attachment_size_);
    std::swap(crc32c_, other->crc32c_);
    component_.Swap(&other->component_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RecordMetadata::GetTypeName() const {
  return "attachment_store_pb.RecordMetadata";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace attachment_store_pb

// @@protoc_insertion_point(global_scope)
