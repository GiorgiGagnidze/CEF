// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: attachments.proto

#ifndef PROTOBUF_attachments_2eproto__INCLUDED
#define PROTOBUF_attachments_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include "sync/protocol/sync_proto_export.h"

namespace sync_pb {

// Internal implementation detail -- do not call these.
void SYNC_PROTO_EXPORT protobuf_AddDesc_attachments_2eproto();
void protobuf_AssignDesc_attachments_2eproto();
void protobuf_ShutdownFile_attachments_2eproto();

class AttachmentIdProto;
class AttachmentMetadataRecord;
class AttachmentMetadata;

// ===================================================================

class SYNC_PROTO_EXPORT AttachmentIdProto : public ::google::protobuf::MessageLite {
 public:
  AttachmentIdProto();
  virtual ~AttachmentIdProto();

  AttachmentIdProto(const AttachmentIdProto& from);

  inline AttachmentIdProto& operator=(const AttachmentIdProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const AttachmentIdProto& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const AttachmentIdProto* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(AttachmentIdProto* other);

  // implements Message ----------------------------------------------

  AttachmentIdProto* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AttachmentIdProto& from);
  void MergeFrom(const AttachmentIdProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string unique_id = 1;
  inline bool has_unique_id() const;
  inline void clear_unique_id();
  static const int kUniqueIdFieldNumber = 1;
  inline const ::std::string& unique_id() const;
  inline void set_unique_id(const ::std::string& value);
  inline void set_unique_id(const char* value);
  inline void set_unique_id(const char* value, size_t size);
  inline ::std::string* mutable_unique_id();
  inline ::std::string* release_unique_id();
  inline void set_allocated_unique_id(::std::string* unique_id);

  // optional uint64 size_bytes = 2;
  inline bool has_size_bytes() const;
  inline void clear_size_bytes();
  static const int kSizeBytesFieldNumber = 2;
  inline ::google::protobuf::uint64 size_bytes() const;
  inline void set_size_bytes(::google::protobuf::uint64 value);

  // optional uint32 crc32c = 3;
  inline bool has_crc32c() const;
  inline void clear_crc32c();
  static const int kCrc32CFieldNumber = 3;
  inline ::google::protobuf::uint32 crc32c() const;
  inline void set_crc32c(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:sync_pb.AttachmentIdProto)
 private:
  inline void set_has_unique_id();
  inline void clear_has_unique_id();
  inline void set_has_size_bytes();
  inline void clear_has_size_bytes();
  inline void set_has_crc32c();
  inline void clear_has_crc32c();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* unique_id_;
  ::google::protobuf::uint64 size_bytes_;
  ::google::protobuf::uint32 crc32c_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void SYNC_PROTO_EXPORT protobuf_AddDesc_attachments_2eproto_impl();
  #else
  friend void SYNC_PROTO_EXPORT protobuf_AddDesc_attachments_2eproto();
  #endif
  friend void protobuf_AssignDesc_attachments_2eproto();
  friend void protobuf_ShutdownFile_attachments_2eproto();

  void InitAsDefaultInstance();
  static AttachmentIdProto* default_instance_;
};
// -------------------------------------------------------------------

class SYNC_PROTO_EXPORT AttachmentMetadataRecord : public ::google::protobuf::MessageLite {
 public:
  AttachmentMetadataRecord();
  virtual ~AttachmentMetadataRecord();

  AttachmentMetadataRecord(const AttachmentMetadataRecord& from);

  inline AttachmentMetadataRecord& operator=(const AttachmentMetadataRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const AttachmentMetadataRecord& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const AttachmentMetadataRecord* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(AttachmentMetadataRecord* other);

  // implements Message ----------------------------------------------

  AttachmentMetadataRecord* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AttachmentMetadataRecord& from);
  void MergeFrom(const AttachmentMetadataRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .sync_pb.AttachmentIdProto id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::sync_pb::AttachmentIdProto& id() const;
  inline ::sync_pb::AttachmentIdProto* mutable_id();
  inline ::sync_pb::AttachmentIdProto* release_id();
  inline void set_allocated_id(::sync_pb::AttachmentIdProto* id);

  // optional bool is_on_server = 2;
  inline bool has_is_on_server() const;
  inline void clear_is_on_server();
  static const int kIsOnServerFieldNumber = 2;
  inline bool is_on_server() const;
  inline void set_is_on_server(bool value);

  // @@protoc_insertion_point(class_scope:sync_pb.AttachmentMetadataRecord)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_is_on_server();
  inline void clear_has_is_on_server();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::sync_pb::AttachmentIdProto* id_;
  bool is_on_server_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void SYNC_PROTO_EXPORT protobuf_AddDesc_attachments_2eproto_impl();
  #else
  friend void SYNC_PROTO_EXPORT protobuf_AddDesc_attachments_2eproto();
  #endif
  friend void protobuf_AssignDesc_attachments_2eproto();
  friend void protobuf_ShutdownFile_attachments_2eproto();

  void InitAsDefaultInstance();
  static AttachmentMetadataRecord* default_instance_;
};
// -------------------------------------------------------------------

class SYNC_PROTO_EXPORT AttachmentMetadata : public ::google::protobuf::MessageLite {
 public:
  AttachmentMetadata();
  virtual ~AttachmentMetadata();

  AttachmentMetadata(const AttachmentMetadata& from);

  inline AttachmentMetadata& operator=(const AttachmentMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const AttachmentMetadata& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const AttachmentMetadata* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(AttachmentMetadata* other);

  // implements Message ----------------------------------------------

  AttachmentMetadata* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AttachmentMetadata& from);
  void MergeFrom(const AttachmentMetadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sync_pb.AttachmentMetadataRecord record = 1;
  inline int record_size() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 1;
  inline const ::sync_pb::AttachmentMetadataRecord& record(int index) const;
  inline ::sync_pb::AttachmentMetadataRecord* mutable_record(int index);
  inline ::sync_pb::AttachmentMetadataRecord* add_record();
  inline const ::google::protobuf::RepeatedPtrField< ::sync_pb::AttachmentMetadataRecord >&
      record() const;
  inline ::google::protobuf::RepeatedPtrField< ::sync_pb::AttachmentMetadataRecord >*
      mutable_record();

  // @@protoc_insertion_point(class_scope:sync_pb.AttachmentMetadata)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::sync_pb::AttachmentMetadataRecord > record_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void SYNC_PROTO_EXPORT protobuf_AddDesc_attachments_2eproto_impl();
  #else
  friend void SYNC_PROTO_EXPORT protobuf_AddDesc_attachments_2eproto();
  #endif
  friend void protobuf_AssignDesc_attachments_2eproto();
  friend void protobuf_ShutdownFile_attachments_2eproto();

  void InitAsDefaultInstance();
  static AttachmentMetadata* default_instance_;
};
// ===================================================================


// ===================================================================

// AttachmentIdProto

// optional string unique_id = 1;
inline bool AttachmentIdProto::has_unique_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AttachmentIdProto::set_has_unique_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AttachmentIdProto::clear_has_unique_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AttachmentIdProto::clear_unique_id() {
  if (unique_id_ != &::google::protobuf::internal::GetEmptyString()) {
    unique_id_->clear();
  }
  clear_has_unique_id();
}
inline const ::std::string& AttachmentIdProto::unique_id() const {
  return *unique_id_;
}
inline void AttachmentIdProto::set_unique_id(const ::std::string& value) {
  set_has_unique_id();
  if (unique_id_ == &::google::protobuf::internal::GetEmptyString()) {
    unique_id_ = new ::std::string;
  }
  unique_id_->assign(value);
}
inline void AttachmentIdProto::set_unique_id(const char* value) {
  set_has_unique_id();
  if (unique_id_ == &::google::protobuf::internal::GetEmptyString()) {
    unique_id_ = new ::std::string;
  }
  unique_id_->assign(value);
}
inline void AttachmentIdProto::set_unique_id(const char* value, size_t size) {
  set_has_unique_id();
  if (unique_id_ == &::google::protobuf::internal::GetEmptyString()) {
    unique_id_ = new ::std::string;
  }
  unique_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AttachmentIdProto::mutable_unique_id() {
  set_has_unique_id();
  if (unique_id_ == &::google::protobuf::internal::GetEmptyString()) {
    unique_id_ = new ::std::string;
  }
  return unique_id_;
}
inline ::std::string* AttachmentIdProto::release_unique_id() {
  clear_has_unique_id();
  if (unique_id_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = unique_id_;
    unique_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void AttachmentIdProto::set_allocated_unique_id(::std::string* unique_id) {
  if (unique_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete unique_id_;
  }
  if (unique_id) {
    set_has_unique_id();
    unique_id_ = unique_id;
  } else {
    clear_has_unique_id();
    unique_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional uint64 size_bytes = 2;
inline bool AttachmentIdProto::has_size_bytes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AttachmentIdProto::set_has_size_bytes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AttachmentIdProto::clear_has_size_bytes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AttachmentIdProto::clear_size_bytes() {
  size_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_size_bytes();
}
inline ::google::protobuf::uint64 AttachmentIdProto::size_bytes() const {
  return size_bytes_;
}
inline void AttachmentIdProto::set_size_bytes(::google::protobuf::uint64 value) {
  set_has_size_bytes();
  size_bytes_ = value;
}

// optional uint32 crc32c = 3;
inline bool AttachmentIdProto::has_crc32c() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AttachmentIdProto::set_has_crc32c() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AttachmentIdProto::clear_has_crc32c() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AttachmentIdProto::clear_crc32c() {
  crc32c_ = 0u;
  clear_has_crc32c();
}
inline ::google::protobuf::uint32 AttachmentIdProto::crc32c() const {
  return crc32c_;
}
inline void AttachmentIdProto::set_crc32c(::google::protobuf::uint32 value) {
  set_has_crc32c();
  crc32c_ = value;
}

// -------------------------------------------------------------------

// AttachmentMetadataRecord

// optional .sync_pb.AttachmentIdProto id = 1;
inline bool AttachmentMetadataRecord::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AttachmentMetadataRecord::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AttachmentMetadataRecord::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AttachmentMetadataRecord::clear_id() {
  if (id_ != NULL) id_->::sync_pb::AttachmentIdProto::Clear();
  clear_has_id();
}
inline const ::sync_pb::AttachmentIdProto& AttachmentMetadataRecord::id() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return id_ != NULL ? *id_ : *default_instance().id_;
#else
  return id_ != NULL ? *id_ : *default_instance_->id_;
#endif
}
inline ::sync_pb::AttachmentIdProto* AttachmentMetadataRecord::mutable_id() {
  set_has_id();
  if (id_ == NULL) id_ = new ::sync_pb::AttachmentIdProto;
  return id_;
}
inline ::sync_pb::AttachmentIdProto* AttachmentMetadataRecord::release_id() {
  clear_has_id();
  ::sync_pb::AttachmentIdProto* temp = id_;
  id_ = NULL;
  return temp;
}
inline void AttachmentMetadataRecord::set_allocated_id(::sync_pb::AttachmentIdProto* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
}

// optional bool is_on_server = 2;
inline bool AttachmentMetadataRecord::has_is_on_server() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AttachmentMetadataRecord::set_has_is_on_server() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AttachmentMetadataRecord::clear_has_is_on_server() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AttachmentMetadataRecord::clear_is_on_server() {
  is_on_server_ = false;
  clear_has_is_on_server();
}
inline bool AttachmentMetadataRecord::is_on_server() const {
  return is_on_server_;
}
inline void AttachmentMetadataRecord::set_is_on_server(bool value) {
  set_has_is_on_server();
  is_on_server_ = value;
}

// -------------------------------------------------------------------

// AttachmentMetadata

// repeated .sync_pb.AttachmentMetadataRecord record = 1;
inline int AttachmentMetadata::record_size() const {
  return record_.size();
}
inline void AttachmentMetadata::clear_record() {
  record_.Clear();
}
inline const ::sync_pb::AttachmentMetadataRecord& AttachmentMetadata::record(int index) const {
  return record_.Get(index);
}
inline ::sync_pb::AttachmentMetadataRecord* AttachmentMetadata::mutable_record(int index) {
  return record_.Mutable(index);
}
inline ::sync_pb::AttachmentMetadataRecord* AttachmentMetadata::add_record() {
  return record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sync_pb::AttachmentMetadataRecord >&
AttachmentMetadata::record() const {
  return record_;
}
inline ::google::protobuf::RepeatedPtrField< ::sync_pb::AttachmentMetadataRecord >*
AttachmentMetadata::mutable_record() {
  return &record_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_attachments_2eproto__INCLUDED
