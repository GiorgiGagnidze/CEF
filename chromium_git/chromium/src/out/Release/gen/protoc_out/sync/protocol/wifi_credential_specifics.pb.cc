// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wifi_credential_specifics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "wifi_credential_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {

void protobuf_ShutdownFile_wifi_5fcredential_5fspecifics_2eproto() {
  delete WifiCredentialSpecifics::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_wifi_5fcredential_5fspecifics_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_wifi_5fcredential_5fspecifics_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  WifiCredentialSpecifics::default_instance_ = new WifiCredentialSpecifics();
  WifiCredentialSpecifics::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_wifi_5fcredential_5fspecifics_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_wifi_5fcredential_5fspecifics_2eproto_once_);
void protobuf_AddDesc_wifi_5fcredential_5fspecifics_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_wifi_5fcredential_5fspecifics_2eproto_once_,
                 &protobuf_AddDesc_wifi_5fcredential_5fspecifics_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_wifi_5fcredential_5fspecifics_2eproto {
  StaticDescriptorInitializer_wifi_5fcredential_5fspecifics_2eproto() {
    protobuf_AddDesc_wifi_5fcredential_5fspecifics_2eproto();
  }
} static_descriptor_initializer_wifi_5fcredential_5fspecifics_2eproto_;
#endif

// ===================================================================

bool WifiCredentialSpecifics_SecurityClass_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const WifiCredentialSpecifics_SecurityClass WifiCredentialSpecifics::SECURITY_CLASS_INVALID;
const WifiCredentialSpecifics_SecurityClass WifiCredentialSpecifics::SECURITY_CLASS_NONE;
const WifiCredentialSpecifics_SecurityClass WifiCredentialSpecifics::SECURITY_CLASS_WEP;
const WifiCredentialSpecifics_SecurityClass WifiCredentialSpecifics::SECURITY_CLASS_PSK;
const WifiCredentialSpecifics_SecurityClass WifiCredentialSpecifics::SecurityClass_MIN;
const WifiCredentialSpecifics_SecurityClass WifiCredentialSpecifics::SecurityClass_MAX;
const int WifiCredentialSpecifics::SecurityClass_ARRAYSIZE;
#endif  // _MSC_VER
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WifiCredentialSpecifics::kSsidFieldNumber;
const int WifiCredentialSpecifics::kSecurityClassFieldNumber;
const int WifiCredentialSpecifics::kPassphraseFieldNumber;
#endif  // !_MSC_VER

WifiCredentialSpecifics::WifiCredentialSpecifics()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void WifiCredentialSpecifics::InitAsDefaultInstance() {
}

WifiCredentialSpecifics::WifiCredentialSpecifics(const WifiCredentialSpecifics& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void WifiCredentialSpecifics::SharedCtor() {
  _cached_size_ = 0;
  ssid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  security_class_ = 0;
  passphrase_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WifiCredentialSpecifics::~WifiCredentialSpecifics() {
  SharedDtor();
}

void WifiCredentialSpecifics::SharedDtor() {
  if (ssid_ != &::google::protobuf::internal::GetEmptyString()) {
    delete ssid_;
  }
  if (passphrase_ != &::google::protobuf::internal::GetEmptyString()) {
    delete passphrase_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void WifiCredentialSpecifics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WifiCredentialSpecifics& WifiCredentialSpecifics::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_wifi_5fcredential_5fspecifics_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_wifi_5fcredential_5fspecifics_2eproto();
#endif
  return *default_instance_;
}

WifiCredentialSpecifics* WifiCredentialSpecifics::default_instance_ = NULL;

WifiCredentialSpecifics* WifiCredentialSpecifics::New() const {
  return new WifiCredentialSpecifics;
}

void WifiCredentialSpecifics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ssid()) {
      if (ssid_ != &::google::protobuf::internal::GetEmptyString()) {
        ssid_->clear();
      }
    }
    security_class_ = 0;
    if (has_passphrase()) {
      if (passphrase_ != &::google::protobuf::internal::GetEmptyString()) {
        passphrase_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WifiCredentialSpecifics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes ssid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ssid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_security_class;
        break;
      }

      // optional .sync_pb.WifiCredentialSpecifics.SecurityClass security_class = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_security_class:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::WifiCredentialSpecifics_SecurityClass_IsValid(value)) {
            set_security_class(static_cast< ::sync_pb::WifiCredentialSpecifics_SecurityClass >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_passphrase;
        break;
      }

      // optional bytes passphrase = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passphrase:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_passphrase()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WifiCredentialSpecifics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes ssid = 1;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->ssid(), output);
  }

  // optional .sync_pb.WifiCredentialSpecifics.SecurityClass security_class = 2;
  if (has_security_class()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->security_class(), output);
  }

  // optional bytes passphrase = 3;
  if (has_passphrase()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->passphrase(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int WifiCredentialSpecifics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes ssid = 1;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ssid());
    }

    // optional .sync_pb.WifiCredentialSpecifics.SecurityClass security_class = 2;
    if (has_security_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->security_class());
    }

    // optional bytes passphrase = 3;
    if (has_passphrase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->passphrase());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WifiCredentialSpecifics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WifiCredentialSpecifics*>(&from));
}

void WifiCredentialSpecifics::MergeFrom(const WifiCredentialSpecifics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
    if (from.has_security_class()) {
      set_security_class(from.security_class());
    }
    if (from.has_passphrase()) {
      set_passphrase(from.passphrase());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WifiCredentialSpecifics::CopyFrom(const WifiCredentialSpecifics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WifiCredentialSpecifics::IsInitialized() const {

  return true;
}

void WifiCredentialSpecifics::Swap(WifiCredentialSpecifics* other) {
  if (other != this) {
    std::swap(ssid_, other->ssid_);
    std::swap(security_class_, other->security_class_);
    std::swap(passphrase_, other->passphrase_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string WifiCredentialSpecifics::GetTypeName() const {
  return "sync_pb.WifiCredentialSpecifics";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)
