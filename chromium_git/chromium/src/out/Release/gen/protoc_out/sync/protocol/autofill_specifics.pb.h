// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autofill_specifics.proto

#ifndef PROTOBUF_autofill_5fspecifics_2eproto__INCLUDED
#define PROTOBUF_autofill_5fspecifics_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include "sync/protocol/sync_proto_export.h"

namespace sync_pb {

// Internal implementation detail -- do not call these.
void SYNC_PROTO_EXPORT protobuf_AddDesc_autofill_5fspecifics_2eproto();
void protobuf_AssignDesc_autofill_5fspecifics_2eproto();
void protobuf_ShutdownFile_autofill_5fspecifics_2eproto();

class AutofillProfileSpecifics;
class AutofillSpecifics;
class WalletMaskedCreditCard;
class WalletPostalAddress;
class AutofillWalletSpecifics;
class WalletMetadataSpecifics;

enum WalletMaskedCreditCard_WalletCardStatus {
  WalletMaskedCreditCard_WalletCardStatus_VALID = 0,
  WalletMaskedCreditCard_WalletCardStatus_EXPIRED = 1
};
SYNC_PROTO_EXPORT bool WalletMaskedCreditCard_WalletCardStatus_IsValid(int value);
const WalletMaskedCreditCard_WalletCardStatus WalletMaskedCreditCard_WalletCardStatus_WalletCardStatus_MIN = WalletMaskedCreditCard_WalletCardStatus_VALID;
const WalletMaskedCreditCard_WalletCardStatus WalletMaskedCreditCard_WalletCardStatus_WalletCardStatus_MAX = WalletMaskedCreditCard_WalletCardStatus_EXPIRED;
const int WalletMaskedCreditCard_WalletCardStatus_WalletCardStatus_ARRAYSIZE = WalletMaskedCreditCard_WalletCardStatus_WalletCardStatus_MAX + 1;

enum WalletMaskedCreditCard_WalletCardType {
  WalletMaskedCreditCard_WalletCardType_UNKNOWN = 0,
  WalletMaskedCreditCard_WalletCardType_AMEX = 1,
  WalletMaskedCreditCard_WalletCardType_DISCOVER = 2,
  WalletMaskedCreditCard_WalletCardType_JCB = 3,
  WalletMaskedCreditCard_WalletCardType_MAESTRO = 4,
  WalletMaskedCreditCard_WalletCardType_MASTER_CARD = 5,
  WalletMaskedCreditCard_WalletCardType_SOLO = 6,
  WalletMaskedCreditCard_WalletCardType_SWITCH = 7,
  WalletMaskedCreditCard_WalletCardType_VISA = 8
};
SYNC_PROTO_EXPORT bool WalletMaskedCreditCard_WalletCardType_IsValid(int value);
const WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard_WalletCardType_WalletCardType_MIN = WalletMaskedCreditCard_WalletCardType_UNKNOWN;
const WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard_WalletCardType_WalletCardType_MAX = WalletMaskedCreditCard_WalletCardType_VISA;
const int WalletMaskedCreditCard_WalletCardType_WalletCardType_ARRAYSIZE = WalletMaskedCreditCard_WalletCardType_WalletCardType_MAX + 1;

enum AutofillWalletSpecifics_WalletInfoType {
  AutofillWalletSpecifics_WalletInfoType_UNKNOWN = 0,
  AutofillWalletSpecifics_WalletInfoType_MASKED_CREDIT_CARD = 1,
  AutofillWalletSpecifics_WalletInfoType_POSTAL_ADDRESS = 2
};
SYNC_PROTO_EXPORT bool AutofillWalletSpecifics_WalletInfoType_IsValid(int value);
const AutofillWalletSpecifics_WalletInfoType AutofillWalletSpecifics_WalletInfoType_WalletInfoType_MIN = AutofillWalletSpecifics_WalletInfoType_UNKNOWN;
const AutofillWalletSpecifics_WalletInfoType AutofillWalletSpecifics_WalletInfoType_WalletInfoType_MAX = AutofillWalletSpecifics_WalletInfoType_POSTAL_ADDRESS;
const int AutofillWalletSpecifics_WalletInfoType_WalletInfoType_ARRAYSIZE = AutofillWalletSpecifics_WalletInfoType_WalletInfoType_MAX + 1;

enum WalletMetadataSpecifics_Type {
  WalletMetadataSpecifics_Type_UNKNOWN = 0,
  WalletMetadataSpecifics_Type_CARD = 1,
  WalletMetadataSpecifics_Type_ADDRESS = 2
};
SYNC_PROTO_EXPORT bool WalletMetadataSpecifics_Type_IsValid(int value);
const WalletMetadataSpecifics_Type WalletMetadataSpecifics_Type_Type_MIN = WalletMetadataSpecifics_Type_UNKNOWN;
const WalletMetadataSpecifics_Type WalletMetadataSpecifics_Type_Type_MAX = WalletMetadataSpecifics_Type_ADDRESS;
const int WalletMetadataSpecifics_Type_Type_ARRAYSIZE = WalletMetadataSpecifics_Type_Type_MAX + 1;

// ===================================================================

class SYNC_PROTO_EXPORT AutofillProfileSpecifics : public ::google::protobuf::MessageLite {
 public:
  AutofillProfileSpecifics();
  virtual ~AutofillProfileSpecifics();

  AutofillProfileSpecifics(const AutofillProfileSpecifics& from);

  inline AutofillProfileSpecifics& operator=(const AutofillProfileSpecifics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const AutofillProfileSpecifics& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const AutofillProfileSpecifics* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(AutofillProfileSpecifics* other);

  // implements Message ----------------------------------------------

  AutofillProfileSpecifics* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AutofillProfileSpecifics& from);
  void MergeFrom(const AutofillProfileSpecifics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string guid = 15;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 15;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // optional string origin = 16;
  inline bool has_origin() const;
  inline void clear_origin();
  static const int kOriginFieldNumber = 16;
  inline const ::std::string& origin() const;
  inline void set_origin(const ::std::string& value);
  inline void set_origin(const char* value);
  inline void set_origin(const char* value, size_t size);
  inline ::std::string* mutable_origin();
  inline ::std::string* release_origin();
  inline void set_allocated_origin(::std::string* origin);

  // optional int64 use_count = 22;
  inline bool has_use_count() const;
  inline void clear_use_count();
  static const int kUseCountFieldNumber = 22;
  inline ::google::protobuf::int64 use_count() const;
  inline void set_use_count(::google::protobuf::int64 value);

  // optional int64 use_date = 23;
  inline bool has_use_date() const;
  inline void clear_use_date();
  static const int kUseDateFieldNumber = 23;
  inline ::google::protobuf::int64 use_date() const;
  inline void set_use_date(::google::protobuf::int64 value);

  // repeated string name_first = 2;
  inline int name_first_size() const;
  inline void clear_name_first();
  static const int kNameFirstFieldNumber = 2;
  inline const ::std::string& name_first(int index) const;
  inline ::std::string* mutable_name_first(int index);
  inline void set_name_first(int index, const ::std::string& value);
  inline void set_name_first(int index, const char* value);
  inline void set_name_first(int index, const char* value, size_t size);
  inline ::std::string* add_name_first();
  inline void add_name_first(const ::std::string& value);
  inline void add_name_first(const char* value);
  inline void add_name_first(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& name_first() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name_first();

  // repeated string name_middle = 3;
  inline int name_middle_size() const;
  inline void clear_name_middle();
  static const int kNameMiddleFieldNumber = 3;
  inline const ::std::string& name_middle(int index) const;
  inline ::std::string* mutable_name_middle(int index);
  inline void set_name_middle(int index, const ::std::string& value);
  inline void set_name_middle(int index, const char* value);
  inline void set_name_middle(int index, const char* value, size_t size);
  inline ::std::string* add_name_middle();
  inline void add_name_middle(const ::std::string& value);
  inline void add_name_middle(const char* value);
  inline void add_name_middle(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& name_middle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name_middle();

  // repeated string name_last = 4;
  inline int name_last_size() const;
  inline void clear_name_last();
  static const int kNameLastFieldNumber = 4;
  inline const ::std::string& name_last(int index) const;
  inline ::std::string* mutable_name_last(int index);
  inline void set_name_last(int index, const ::std::string& value);
  inline void set_name_last(int index, const char* value);
  inline void set_name_last(int index, const char* value, size_t size);
  inline ::std::string* add_name_last();
  inline void add_name_last(const ::std::string& value);
  inline void add_name_last(const char* value);
  inline void add_name_last(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& name_last() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name_last();

  // repeated string name_full = 21;
  inline int name_full_size() const;
  inline void clear_name_full();
  static const int kNameFullFieldNumber = 21;
  inline const ::std::string& name_full(int index) const;
  inline ::std::string* mutable_name_full(int index);
  inline void set_name_full(int index, const ::std::string& value);
  inline void set_name_full(int index, const char* value);
  inline void set_name_full(int index, const char* value, size_t size);
  inline ::std::string* add_name_full();
  inline void add_name_full(const ::std::string& value);
  inline void add_name_full(const char* value);
  inline void add_name_full(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& name_full() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name_full();

  // repeated string email_address = 5;
  inline int email_address_size() const;
  inline void clear_email_address();
  static const int kEmailAddressFieldNumber = 5;
  inline const ::std::string& email_address(int index) const;
  inline ::std::string* mutable_email_address(int index);
  inline void set_email_address(int index, const ::std::string& value);
  inline void set_email_address(int index, const char* value);
  inline void set_email_address(int index, const char* value, size_t size);
  inline ::std::string* add_email_address();
  inline void add_email_address(const ::std::string& value);
  inline void add_email_address(const char* value);
  inline void add_email_address(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& email_address() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_email_address();

  // optional string company_name = 6;
  inline bool has_company_name() const;
  inline void clear_company_name();
  static const int kCompanyNameFieldNumber = 6;
  inline const ::std::string& company_name() const;
  inline void set_company_name(const ::std::string& value);
  inline void set_company_name(const char* value);
  inline void set_company_name(const char* value, size_t size);
  inline ::std::string* mutable_company_name();
  inline ::std::string* release_company_name();
  inline void set_allocated_company_name(::std::string* company_name);

  // optional string address_home_line1 = 7;
  inline bool has_address_home_line1() const;
  inline void clear_address_home_line1();
  static const int kAddressHomeLine1FieldNumber = 7;
  inline const ::std::string& address_home_line1() const;
  inline void set_address_home_line1(const ::std::string& value);
  inline void set_address_home_line1(const char* value);
  inline void set_address_home_line1(const char* value, size_t size);
  inline ::std::string* mutable_address_home_line1();
  inline ::std::string* release_address_home_line1();
  inline void set_allocated_address_home_line1(::std::string* address_home_line1);

  // optional string address_home_line2 = 8;
  inline bool has_address_home_line2() const;
  inline void clear_address_home_line2();
  static const int kAddressHomeLine2FieldNumber = 8;
  inline const ::std::string& address_home_line2() const;
  inline void set_address_home_line2(const ::std::string& value);
  inline void set_address_home_line2(const char* value);
  inline void set_address_home_line2(const char* value, size_t size);
  inline ::std::string* mutable_address_home_line2();
  inline ::std::string* release_address_home_line2();
  inline void set_allocated_address_home_line2(::std::string* address_home_line2);

  // optional string address_home_city = 9;
  inline bool has_address_home_city() const;
  inline void clear_address_home_city();
  static const int kAddressHomeCityFieldNumber = 9;
  inline const ::std::string& address_home_city() const;
  inline void set_address_home_city(const ::std::string& value);
  inline void set_address_home_city(const char* value);
  inline void set_address_home_city(const char* value, size_t size);
  inline ::std::string* mutable_address_home_city();
  inline ::std::string* release_address_home_city();
  inline void set_allocated_address_home_city(::std::string* address_home_city);

  // optional string address_home_state = 10;
  inline bool has_address_home_state() const;
  inline void clear_address_home_state();
  static const int kAddressHomeStateFieldNumber = 10;
  inline const ::std::string& address_home_state() const;
  inline void set_address_home_state(const ::std::string& value);
  inline void set_address_home_state(const char* value);
  inline void set_address_home_state(const char* value, size_t size);
  inline ::std::string* mutable_address_home_state();
  inline ::std::string* release_address_home_state();
  inline void set_allocated_address_home_state(::std::string* address_home_state);

  // optional string address_home_zip = 11;
  inline bool has_address_home_zip() const;
  inline void clear_address_home_zip();
  static const int kAddressHomeZipFieldNumber = 11;
  inline const ::std::string& address_home_zip() const;
  inline void set_address_home_zip(const ::std::string& value);
  inline void set_address_home_zip(const char* value);
  inline void set_address_home_zip(const char* value, size_t size);
  inline ::std::string* mutable_address_home_zip();
  inline ::std::string* release_address_home_zip();
  inline void set_allocated_address_home_zip(::std::string* address_home_zip);

  // optional string address_home_country = 12;
  inline bool has_address_home_country() const;
  inline void clear_address_home_country();
  static const int kAddressHomeCountryFieldNumber = 12;
  inline const ::std::string& address_home_country() const;
  inline void set_address_home_country(const ::std::string& value);
  inline void set_address_home_country(const char* value);
  inline void set_address_home_country(const char* value, size_t size);
  inline ::std::string* mutable_address_home_country();
  inline ::std::string* release_address_home_country();
  inline void set_allocated_address_home_country(::std::string* address_home_country);

  // optional string address_home_street_address = 17;
  inline bool has_address_home_street_address() const;
  inline void clear_address_home_street_address();
  static const int kAddressHomeStreetAddressFieldNumber = 17;
  inline const ::std::string& address_home_street_address() const;
  inline void set_address_home_street_address(const ::std::string& value);
  inline void set_address_home_street_address(const char* value);
  inline void set_address_home_street_address(const char* value, size_t size);
  inline ::std::string* mutable_address_home_street_address();
  inline ::std::string* release_address_home_street_address();
  inline void set_allocated_address_home_street_address(::std::string* address_home_street_address);

  // optional string address_home_sorting_code = 18;
  inline bool has_address_home_sorting_code() const;
  inline void clear_address_home_sorting_code();
  static const int kAddressHomeSortingCodeFieldNumber = 18;
  inline const ::std::string& address_home_sorting_code() const;
  inline void set_address_home_sorting_code(const ::std::string& value);
  inline void set_address_home_sorting_code(const char* value);
  inline void set_address_home_sorting_code(const char* value, size_t size);
  inline ::std::string* mutable_address_home_sorting_code();
  inline ::std::string* release_address_home_sorting_code();
  inline void set_allocated_address_home_sorting_code(::std::string* address_home_sorting_code);

  // optional string address_home_dependent_locality = 19;
  inline bool has_address_home_dependent_locality() const;
  inline void clear_address_home_dependent_locality();
  static const int kAddressHomeDependentLocalityFieldNumber = 19;
  inline const ::std::string& address_home_dependent_locality() const;
  inline void set_address_home_dependent_locality(const ::std::string& value);
  inline void set_address_home_dependent_locality(const char* value);
  inline void set_address_home_dependent_locality(const char* value, size_t size);
  inline ::std::string* mutable_address_home_dependent_locality();
  inline ::std::string* release_address_home_dependent_locality();
  inline void set_allocated_address_home_dependent_locality(::std::string* address_home_dependent_locality);

  // optional string address_home_language_code = 20;
  inline bool has_address_home_language_code() const;
  inline void clear_address_home_language_code();
  static const int kAddressHomeLanguageCodeFieldNumber = 20;
  inline const ::std::string& address_home_language_code() const;
  inline void set_address_home_language_code(const ::std::string& value);
  inline void set_address_home_language_code(const char* value);
  inline void set_address_home_language_code(const char* value, size_t size);
  inline ::std::string* mutable_address_home_language_code();
  inline ::std::string* release_address_home_language_code();
  inline void set_allocated_address_home_language_code(::std::string* address_home_language_code);

  // repeated string phone_home_whole_number = 13;
  inline int phone_home_whole_number_size() const;
  inline void clear_phone_home_whole_number();
  static const int kPhoneHomeWholeNumberFieldNumber = 13;
  inline const ::std::string& phone_home_whole_number(int index) const;
  inline ::std::string* mutable_phone_home_whole_number(int index);
  inline void set_phone_home_whole_number(int index, const ::std::string& value);
  inline void set_phone_home_whole_number(int index, const char* value);
  inline void set_phone_home_whole_number(int index, const char* value, size_t size);
  inline ::std::string* add_phone_home_whole_number();
  inline void add_phone_home_whole_number(const ::std::string& value);
  inline void add_phone_home_whole_number(const char* value);
  inline void add_phone_home_whole_number(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& phone_home_whole_number() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_phone_home_whole_number();

  // optional string label = 1 [deprecated = true];
  inline bool has_label() const PROTOBUF_DEPRECATED;
  inline void clear_label() PROTOBUF_DEPRECATED;
  static const int kLabelFieldNumber = 1;
  inline const ::std::string& label() const PROTOBUF_DEPRECATED;
  inline void set_label(const ::std::string& value) PROTOBUF_DEPRECATED;
  inline void set_label(const char* value) PROTOBUF_DEPRECATED;
  inline void set_label(const char* value, size_t size) PROTOBUF_DEPRECATED;
  inline ::std::string* mutable_label() PROTOBUF_DEPRECATED;
  inline ::std::string* release_label() PROTOBUF_DEPRECATED;
  inline void set_allocated_label(::std::string* label) PROTOBUF_DEPRECATED;

  // optional string phone_fax_whole_number = 14 [deprecated = true];
  inline bool has_phone_fax_whole_number() const PROTOBUF_DEPRECATED;
  inline void clear_phone_fax_whole_number() PROTOBUF_DEPRECATED;
  static const int kPhoneFaxWholeNumberFieldNumber = 14;
  inline const ::std::string& phone_fax_whole_number() const PROTOBUF_DEPRECATED;
  inline void set_phone_fax_whole_number(const ::std::string& value) PROTOBUF_DEPRECATED;
  inline void set_phone_fax_whole_number(const char* value) PROTOBUF_DEPRECATED;
  inline void set_phone_fax_whole_number(const char* value, size_t size) PROTOBUF_DEPRECATED;
  inline ::std::string* mutable_phone_fax_whole_number() PROTOBUF_DEPRECATED;
  inline ::std::string* release_phone_fax_whole_number() PROTOBUF_DEPRECATED;
  inline void set_allocated_phone_fax_whole_number(::std::string* phone_fax_whole_number) PROTOBUF_DEPRECATED;

  // @@protoc_insertion_point(class_scope:sync_pb.AutofillProfileSpecifics)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_use_count();
  inline void clear_has_use_count();
  inline void set_has_use_date();
  inline void clear_has_use_date();
  inline void set_has_company_name();
  inline void clear_has_company_name();
  inline void set_has_address_home_line1();
  inline void clear_has_address_home_line1();
  inline void set_has_address_home_line2();
  inline void clear_has_address_home_line2();
  inline void set_has_address_home_city();
  inline void clear_has_address_home_city();
  inline void set_has_address_home_state();
  inline void clear_has_address_home_state();
  inline void set_has_address_home_zip();
  inline void clear_has_address_home_zip();
  inline void set_has_address_home_country();
  inline void clear_has_address_home_country();
  inline void set_has_address_home_street_address();
  inline void clear_has_address_home_street_address();
  inline void set_has_address_home_sorting_code();
  inline void clear_has_address_home_sorting_code();
  inline void set_has_address_home_dependent_locality();
  inline void clear_has_address_home_dependent_locality();
  inline void set_has_address_home_language_code();
  inline void clear_has_address_home_language_code();
  inline void set_has_label();
  inline void clear_has_label();
  inline void set_has_phone_fax_whole_number();
  inline void clear_has_phone_fax_whole_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* guid_;
  ::std::string* origin_;
  ::google::protobuf::int64 use_count_;
  ::google::protobuf::int64 use_date_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_first_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_middle_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_last_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_full_;
  ::google::protobuf::RepeatedPtrField< ::std::string> email_address_;
  ::std::string* company_name_;
  ::std::string* address_home_line1_;
  ::std::string* address_home_line2_;
  ::std::string* address_home_city_;
  ::std::string* address_home_state_;
  ::std::string* address_home_zip_;
  ::std::string* address_home_country_;
  ::std::string* address_home_street_address_;
  ::std::string* address_home_sorting_code_;
  ::std::string* address_home_dependent_locality_;
  ::std::string* address_home_language_code_;
  ::google::protobuf::RepeatedPtrField< ::std::string> phone_home_whole_number_;
  ::std::string* label_;
  ::std::string* phone_fax_whole_number_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(23 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void SYNC_PROTO_EXPORT protobuf_AddDesc_autofill_5fspecifics_2eproto_impl();
  #else
  friend void SYNC_PROTO_EXPORT protobuf_AddDesc_autofill_5fspecifics_2eproto();
  #endif
  friend void protobuf_AssignDesc_autofill_5fspecifics_2eproto();
  friend void protobuf_ShutdownFile_autofill_5fspecifics_2eproto();

  void InitAsDefaultInstance();
  static AutofillProfileSpecifics* default_instance_;
};
// -------------------------------------------------------------------

class SYNC_PROTO_EXPORT AutofillSpecifics : public ::google::protobuf::MessageLite {
 public:
  AutofillSpecifics();
  virtual ~AutofillSpecifics();

  AutofillSpecifics(const AutofillSpecifics& from);

  inline AutofillSpecifics& operator=(const AutofillSpecifics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const AutofillSpecifics& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const AutofillSpecifics* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(AutofillSpecifics* other);

  // implements Message ----------------------------------------------

  AutofillSpecifics* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AutofillSpecifics& from);
  void MergeFrom(const AutofillSpecifics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // repeated int64 usage_timestamp = 3;
  inline int usage_timestamp_size() const;
  inline void clear_usage_timestamp();
  static const int kUsageTimestampFieldNumber = 3;
  inline ::google::protobuf::int64 usage_timestamp(int index) const;
  inline void set_usage_timestamp(int index, ::google::protobuf::int64 value);
  inline void add_usage_timestamp(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      usage_timestamp() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_usage_timestamp();

  // optional .sync_pb.AutofillProfileSpecifics profile = 4;
  inline bool has_profile() const;
  inline void clear_profile();
  static const int kProfileFieldNumber = 4;
  inline const ::sync_pb::AutofillProfileSpecifics& profile() const;
  inline ::sync_pb::AutofillProfileSpecifics* mutable_profile();
  inline ::sync_pb::AutofillProfileSpecifics* release_profile();
  inline void set_allocated_profile(::sync_pb::AutofillProfileSpecifics* profile);

  // @@protoc_insertion_point(class_scope:sync_pb.AutofillSpecifics)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_profile();
  inline void clear_has_profile();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* value_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > usage_timestamp_;
  ::sync_pb::AutofillProfileSpecifics* profile_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void SYNC_PROTO_EXPORT protobuf_AddDesc_autofill_5fspecifics_2eproto_impl();
  #else
  friend void SYNC_PROTO_EXPORT protobuf_AddDesc_autofill_5fspecifics_2eproto();
  #endif
  friend void protobuf_AssignDesc_autofill_5fspecifics_2eproto();
  friend void protobuf_ShutdownFile_autofill_5fspecifics_2eproto();

  void InitAsDefaultInstance();
  static AutofillSpecifics* default_instance_;
};
// -------------------------------------------------------------------

class SYNC_PROTO_EXPORT WalletMaskedCreditCard : public ::google::protobuf::MessageLite {
 public:
  WalletMaskedCreditCard();
  virtual ~WalletMaskedCreditCard();

  WalletMaskedCreditCard(const WalletMaskedCreditCard& from);

  inline WalletMaskedCreditCard& operator=(const WalletMaskedCreditCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const WalletMaskedCreditCard& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const WalletMaskedCreditCard* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(WalletMaskedCreditCard* other);

  // implements Message ----------------------------------------------

  WalletMaskedCreditCard* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const WalletMaskedCreditCard& from);
  void MergeFrom(const WalletMaskedCreditCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef WalletMaskedCreditCard_WalletCardStatus WalletCardStatus;
  static const WalletCardStatus VALID = WalletMaskedCreditCard_WalletCardStatus_VALID;
  static const WalletCardStatus EXPIRED = WalletMaskedCreditCard_WalletCardStatus_EXPIRED;
  static inline bool WalletCardStatus_IsValid(int value) {
    return WalletMaskedCreditCard_WalletCardStatus_IsValid(value);
  }
  static const WalletCardStatus WalletCardStatus_MIN =
    WalletMaskedCreditCard_WalletCardStatus_WalletCardStatus_MIN;
  static const WalletCardStatus WalletCardStatus_MAX =
    WalletMaskedCreditCard_WalletCardStatus_WalletCardStatus_MAX;
  static const int WalletCardStatus_ARRAYSIZE =
    WalletMaskedCreditCard_WalletCardStatus_WalletCardStatus_ARRAYSIZE;

  typedef WalletMaskedCreditCard_WalletCardType WalletCardType;
  static const WalletCardType UNKNOWN = WalletMaskedCreditCard_WalletCardType_UNKNOWN;
  static const WalletCardType AMEX = WalletMaskedCreditCard_WalletCardType_AMEX;
  static const WalletCardType DISCOVER = WalletMaskedCreditCard_WalletCardType_DISCOVER;
  static const WalletCardType JCB = WalletMaskedCreditCard_WalletCardType_JCB;
  static const WalletCardType MAESTRO = WalletMaskedCreditCard_WalletCardType_MAESTRO;
  static const WalletCardType MASTER_CARD = WalletMaskedCreditCard_WalletCardType_MASTER_CARD;
  static const WalletCardType SOLO = WalletMaskedCreditCard_WalletCardType_SOLO;
  static const WalletCardType SWITCH = WalletMaskedCreditCard_WalletCardType_SWITCH;
  static const WalletCardType VISA = WalletMaskedCreditCard_WalletCardType_VISA;
  static inline bool WalletCardType_IsValid(int value) {
    return WalletMaskedCreditCard_WalletCardType_IsValid(value);
  }
  static const WalletCardType WalletCardType_MIN =
    WalletMaskedCreditCard_WalletCardType_WalletCardType_MIN;
  static const WalletCardType WalletCardType_MAX =
    WalletMaskedCreditCard_WalletCardType_WalletCardType_MAX;
  static const int WalletCardType_ARRAYSIZE =
    WalletMaskedCreditCard_WalletCardType_WalletCardType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional .sync_pb.WalletMaskedCreditCard.WalletCardStatus status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::sync_pb::WalletMaskedCreditCard_WalletCardStatus status() const;
  inline void set_status(::sync_pb::WalletMaskedCreditCard_WalletCardStatus value);

  // optional string name_on_card = 3;
  inline bool has_name_on_card() const;
  inline void clear_name_on_card();
  static const int kNameOnCardFieldNumber = 3;
  inline const ::std::string& name_on_card() const;
  inline void set_name_on_card(const ::std::string& value);
  inline void set_name_on_card(const char* value);
  inline void set_name_on_card(const char* value, size_t size);
  inline ::std::string* mutable_name_on_card();
  inline ::std::string* release_name_on_card();
  inline void set_allocated_name_on_card(::std::string* name_on_card);

  // optional .sync_pb.WalletMaskedCreditCard.WalletCardType type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::sync_pb::WalletMaskedCreditCard_WalletCardType type() const;
  inline void set_type(::sync_pb::WalletMaskedCreditCard_WalletCardType value);

  // optional string last_four = 5;
  inline bool has_last_four() const;
  inline void clear_last_four();
  static const int kLastFourFieldNumber = 5;
  inline const ::std::string& last_four() const;
  inline void set_last_four(const ::std::string& value);
  inline void set_last_four(const char* value);
  inline void set_last_four(const char* value, size_t size);
  inline ::std::string* mutable_last_four();
  inline ::std::string* release_last_four();
  inline void set_allocated_last_four(::std::string* last_four);

  // optional int32 exp_month = 6;
  inline bool has_exp_month() const;
  inline void clear_exp_month();
  static const int kExpMonthFieldNumber = 6;
  inline ::google::protobuf::int32 exp_month() const;
  inline void set_exp_month(::google::protobuf::int32 value);

  // optional int32 exp_year = 7;
  inline bool has_exp_year() const;
  inline void clear_exp_year();
  static const int kExpYearFieldNumber = 7;
  inline ::google::protobuf::int32 exp_year() const;
  inline void set_exp_year(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sync_pb.WalletMaskedCreditCard)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_name_on_card();
  inline void clear_has_name_on_card();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_last_four();
  inline void clear_has_last_four();
  inline void set_has_exp_month();
  inline void clear_has_exp_month();
  inline void set_has_exp_year();
  inline void clear_has_exp_year();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::std::string* name_on_card_;
  int status_;
  int type_;
  ::std::string* last_four_;
  ::google::protobuf::int32 exp_month_;
  ::google::protobuf::int32 exp_year_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void SYNC_PROTO_EXPORT protobuf_AddDesc_autofill_5fspecifics_2eproto_impl();
  #else
  friend void SYNC_PROTO_EXPORT protobuf_AddDesc_autofill_5fspecifics_2eproto();
  #endif
  friend void protobuf_AssignDesc_autofill_5fspecifics_2eproto();
  friend void protobuf_ShutdownFile_autofill_5fspecifics_2eproto();

  void InitAsDefaultInstance();
  static WalletMaskedCreditCard* default_instance_;
};
// -------------------------------------------------------------------

class SYNC_PROTO_EXPORT WalletPostalAddress : public ::google::protobuf::MessageLite {
 public:
  WalletPostalAddress();
  virtual ~WalletPostalAddress();

  WalletPostalAddress(const WalletPostalAddress& from);

  inline WalletPostalAddress& operator=(const WalletPostalAddress& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const WalletPostalAddress& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const WalletPostalAddress* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(WalletPostalAddress* other);

  // implements Message ----------------------------------------------

  WalletPostalAddress* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const WalletPostalAddress& from);
  void MergeFrom(const WalletPostalAddress& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string recipient_name = 12;
  inline bool has_recipient_name() const;
  inline void clear_recipient_name();
  static const int kRecipientNameFieldNumber = 12;
  inline const ::std::string& recipient_name() const;
  inline void set_recipient_name(const ::std::string& value);
  inline void set_recipient_name(const char* value);
  inline void set_recipient_name(const char* value, size_t size);
  inline ::std::string* mutable_recipient_name();
  inline ::std::string* release_recipient_name();
  inline void set_allocated_recipient_name(::std::string* recipient_name);

  // optional string company_name = 2;
  inline bool has_company_name() const;
  inline void clear_company_name();
  static const int kCompanyNameFieldNumber = 2;
  inline const ::std::string& company_name() const;
  inline void set_company_name(const ::std::string& value);
  inline void set_company_name(const char* value);
  inline void set_company_name(const char* value, size_t size);
  inline ::std::string* mutable_company_name();
  inline ::std::string* release_company_name();
  inline void set_allocated_company_name(::std::string* company_name);

  // repeated string street_address = 3;
  inline int street_address_size() const;
  inline void clear_street_address();
  static const int kStreetAddressFieldNumber = 3;
  inline const ::std::string& street_address(int index) const;
  inline ::std::string* mutable_street_address(int index);
  inline void set_street_address(int index, const ::std::string& value);
  inline void set_street_address(int index, const char* value);
  inline void set_street_address(int index, const char* value, size_t size);
  inline ::std::string* add_street_address();
  inline void add_street_address(const ::std::string& value);
  inline void add_street_address(const char* value);
  inline void add_street_address(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& street_address() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_street_address();

  // optional string address_1 = 4;
  inline bool has_address_1() const;
  inline void clear_address_1();
  static const int kAddress1FieldNumber = 4;
  inline const ::std::string& address_1() const;
  inline void set_address_1(const ::std::string& value);
  inline void set_address_1(const char* value);
  inline void set_address_1(const char* value, size_t size);
  inline ::std::string* mutable_address_1();
  inline ::std::string* release_address_1();
  inline void set_allocated_address_1(::std::string* address_1);

  // optional string address_2 = 5;
  inline bool has_address_2() const;
  inline void clear_address_2();
  static const int kAddress2FieldNumber = 5;
  inline const ::std::string& address_2() const;
  inline void set_address_2(const ::std::string& value);
  inline void set_address_2(const char* value);
  inline void set_address_2(const char* value, size_t size);
  inline ::std::string* mutable_address_2();
  inline ::std::string* release_address_2();
  inline void set_allocated_address_2(::std::string* address_2);

  // optional string address_3 = 6;
  inline bool has_address_3() const;
  inline void clear_address_3();
  static const int kAddress3FieldNumber = 6;
  inline const ::std::string& address_3() const;
  inline void set_address_3(const ::std::string& value);
  inline void set_address_3(const char* value);
  inline void set_address_3(const char* value, size_t size);
  inline ::std::string* mutable_address_3();
  inline ::std::string* release_address_3();
  inline void set_allocated_address_3(::std::string* address_3);

  // optional string address_4 = 7;
  inline bool has_address_4() const;
  inline void clear_address_4();
  static const int kAddress4FieldNumber = 7;
  inline const ::std::string& address_4() const;
  inline void set_address_4(const ::std::string& value);
  inline void set_address_4(const char* value);
  inline void set_address_4(const char* value, size_t size);
  inline ::std::string* mutable_address_4();
  inline ::std::string* release_address_4();
  inline void set_allocated_address_4(::std::string* address_4);

  // optional string postal_code = 8;
  inline bool has_postal_code() const;
  inline void clear_postal_code();
  static const int kPostalCodeFieldNumber = 8;
  inline const ::std::string& postal_code() const;
  inline void set_postal_code(const ::std::string& value);
  inline void set_postal_code(const char* value);
  inline void set_postal_code(const char* value, size_t size);
  inline ::std::string* mutable_postal_code();
  inline ::std::string* release_postal_code();
  inline void set_allocated_postal_code(::std::string* postal_code);

  // optional string sorting_code = 9;
  inline bool has_sorting_code() const;
  inline void clear_sorting_code();
  static const int kSortingCodeFieldNumber = 9;
  inline const ::std::string& sorting_code() const;
  inline void set_sorting_code(const ::std::string& value);
  inline void set_sorting_code(const char* value);
  inline void set_sorting_code(const char* value, size_t size);
  inline ::std::string* mutable_sorting_code();
  inline ::std::string* release_sorting_code();
  inline void set_allocated_sorting_code(::std::string* sorting_code);

  // optional string country_code = 10;
  inline bool has_country_code() const;
  inline void clear_country_code();
  static const int kCountryCodeFieldNumber = 10;
  inline const ::std::string& country_code() const;
  inline void set_country_code(const ::std::string& value);
  inline void set_country_code(const char* value);
  inline void set_country_code(const char* value, size_t size);
  inline ::std::string* mutable_country_code();
  inline ::std::string* release_country_code();
  inline void set_allocated_country_code(::std::string* country_code);

  // optional string language_code = 11;
  inline bool has_language_code() const;
  inline void clear_language_code();
  static const int kLanguageCodeFieldNumber = 11;
  inline const ::std::string& language_code() const;
  inline void set_language_code(const ::std::string& value);
  inline void set_language_code(const char* value);
  inline void set_language_code(const char* value, size_t size);
  inline ::std::string* mutable_language_code();
  inline ::std::string* release_language_code();
  inline void set_allocated_language_code(::std::string* language_code);

  // optional string phone_number = 13;
  inline bool has_phone_number() const;
  inline void clear_phone_number();
  static const int kPhoneNumberFieldNumber = 13;
  inline const ::std::string& phone_number() const;
  inline void set_phone_number(const ::std::string& value);
  inline void set_phone_number(const char* value);
  inline void set_phone_number(const char* value, size_t size);
  inline ::std::string* mutable_phone_number();
  inline ::std::string* release_phone_number();
  inline void set_allocated_phone_number(::std::string* phone_number);

  // @@protoc_insertion_point(class_scope:sync_pb.WalletPostalAddress)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_recipient_name();
  inline void clear_has_recipient_name();
  inline void set_has_company_name();
  inline void clear_has_company_name();
  inline void set_has_address_1();
  inline void clear_has_address_1();
  inline void set_has_address_2();
  inline void clear_has_address_2();
  inline void set_has_address_3();
  inline void clear_has_address_3();
  inline void set_has_address_4();
  inline void clear_has_address_4();
  inline void set_has_postal_code();
  inline void clear_has_postal_code();
  inline void set_has_sorting_code();
  inline void clear_has_sorting_code();
  inline void set_has_country_code();
  inline void clear_has_country_code();
  inline void set_has_language_code();
  inline void clear_has_language_code();
  inline void set_has_phone_number();
  inline void clear_has_phone_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::std::string* recipient_name_;
  ::std::string* company_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> street_address_;
  ::std::string* address_1_;
  ::std::string* address_2_;
  ::std::string* address_3_;
  ::std::string* address_4_;
  ::std::string* postal_code_;
  ::std::string* sorting_code_;
  ::std::string* country_code_;
  ::std::string* language_code_;
  ::std::string* phone_number_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void SYNC_PROTO_EXPORT protobuf_AddDesc_autofill_5fspecifics_2eproto_impl();
  #else
  friend void SYNC_PROTO_EXPORT protobuf_AddDesc_autofill_5fspecifics_2eproto();
  #endif
  friend void protobuf_AssignDesc_autofill_5fspecifics_2eproto();
  friend void protobuf_ShutdownFile_autofill_5fspecifics_2eproto();

  void InitAsDefaultInstance();
  static WalletPostalAddress* default_instance_;
};
// -------------------------------------------------------------------

class SYNC_PROTO_EXPORT AutofillWalletSpecifics : public ::google::protobuf::MessageLite {
 public:
  AutofillWalletSpecifics();
  virtual ~AutofillWalletSpecifics();

  AutofillWalletSpecifics(const AutofillWalletSpecifics& from);

  inline AutofillWalletSpecifics& operator=(const AutofillWalletSpecifics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const AutofillWalletSpecifics& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const AutofillWalletSpecifics* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(AutofillWalletSpecifics* other);

  // implements Message ----------------------------------------------

  AutofillWalletSpecifics* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AutofillWalletSpecifics& from);
  void MergeFrom(const AutofillWalletSpecifics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef AutofillWalletSpecifics_WalletInfoType WalletInfoType;
  static const WalletInfoType UNKNOWN = AutofillWalletSpecifics_WalletInfoType_UNKNOWN;
  static const WalletInfoType MASKED_CREDIT_CARD = AutofillWalletSpecifics_WalletInfoType_MASKED_CREDIT_CARD;
  static const WalletInfoType POSTAL_ADDRESS = AutofillWalletSpecifics_WalletInfoType_POSTAL_ADDRESS;
  static inline bool WalletInfoType_IsValid(int value) {
    return AutofillWalletSpecifics_WalletInfoType_IsValid(value);
  }
  static const WalletInfoType WalletInfoType_MIN =
    AutofillWalletSpecifics_WalletInfoType_WalletInfoType_MIN;
  static const WalletInfoType WalletInfoType_MAX =
    AutofillWalletSpecifics_WalletInfoType_WalletInfoType_MAX;
  static const int WalletInfoType_ARRAYSIZE =
    AutofillWalletSpecifics_WalletInfoType_WalletInfoType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional .sync_pb.AutofillWalletSpecifics.WalletInfoType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::sync_pb::AutofillWalletSpecifics_WalletInfoType type() const;
  inline void set_type(::sync_pb::AutofillWalletSpecifics_WalletInfoType value);

  // optional .sync_pb.WalletMaskedCreditCard masked_card = 2;
  inline bool has_masked_card() const;
  inline void clear_masked_card();
  static const int kMaskedCardFieldNumber = 2;
  inline const ::sync_pb::WalletMaskedCreditCard& masked_card() const;
  inline ::sync_pb::WalletMaskedCreditCard* mutable_masked_card();
  inline ::sync_pb::WalletMaskedCreditCard* release_masked_card();
  inline void set_allocated_masked_card(::sync_pb::WalletMaskedCreditCard* masked_card);

  // optional .sync_pb.WalletPostalAddress address = 3;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 3;
  inline const ::sync_pb::WalletPostalAddress& address() const;
  inline ::sync_pb::WalletPostalAddress* mutable_address();
  inline ::sync_pb::WalletPostalAddress* release_address();
  inline void set_allocated_address(::sync_pb::WalletPostalAddress* address);

  // @@protoc_insertion_point(class_scope:sync_pb.AutofillWalletSpecifics)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_masked_card();
  inline void clear_has_masked_card();
  inline void set_has_address();
  inline void clear_has_address();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::sync_pb::WalletMaskedCreditCard* masked_card_;
  ::sync_pb::WalletPostalAddress* address_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void SYNC_PROTO_EXPORT protobuf_AddDesc_autofill_5fspecifics_2eproto_impl();
  #else
  friend void SYNC_PROTO_EXPORT protobuf_AddDesc_autofill_5fspecifics_2eproto();
  #endif
  friend void protobuf_AssignDesc_autofill_5fspecifics_2eproto();
  friend void protobuf_ShutdownFile_autofill_5fspecifics_2eproto();

  void InitAsDefaultInstance();
  static AutofillWalletSpecifics* default_instance_;
};
// -------------------------------------------------------------------

class SYNC_PROTO_EXPORT WalletMetadataSpecifics : public ::google::protobuf::MessageLite {
 public:
  WalletMetadataSpecifics();
  virtual ~WalletMetadataSpecifics();

  WalletMetadataSpecifics(const WalletMetadataSpecifics& from);

  inline WalletMetadataSpecifics& operator=(const WalletMetadataSpecifics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const WalletMetadataSpecifics& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const WalletMetadataSpecifics* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(WalletMetadataSpecifics* other);

  // implements Message ----------------------------------------------

  WalletMetadataSpecifics* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const WalletMetadataSpecifics& from);
  void MergeFrom(const WalletMetadataSpecifics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef WalletMetadataSpecifics_Type Type;
  static const Type UNKNOWN = WalletMetadataSpecifics_Type_UNKNOWN;
  static const Type CARD = WalletMetadataSpecifics_Type_CARD;
  static const Type ADDRESS = WalletMetadataSpecifics_Type_ADDRESS;
  static inline bool Type_IsValid(int value) {
    return WalletMetadataSpecifics_Type_IsValid(value);
  }
  static const Type Type_MIN =
    WalletMetadataSpecifics_Type_Type_MIN;
  static const Type Type_MAX =
    WalletMetadataSpecifics_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    WalletMetadataSpecifics_Type_Type_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional .sync_pb.WalletMetadataSpecifics.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::sync_pb::WalletMetadataSpecifics_Type type() const;
  inline void set_type(::sync_pb::WalletMetadataSpecifics_Type value);

  // optional string id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional int64 use_count = 3;
  inline bool has_use_count() const;
  inline void clear_use_count();
  static const int kUseCountFieldNumber = 3;
  inline ::google::protobuf::int64 use_count() const;
  inline void set_use_count(::google::protobuf::int64 value);

  // optional int64 use_date = 4;
  inline bool has_use_date() const;
  inline void clear_use_date();
  static const int kUseDateFieldNumber = 4;
  inline ::google::protobuf::int64 use_date() const;
  inline void set_use_date(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:sync_pb.WalletMetadataSpecifics)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_use_count();
  inline void clear_has_use_count();
  inline void set_has_use_date();
  inline void clear_has_use_date();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::google::protobuf::int64 use_count_;
  ::google::protobuf::int64 use_date_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void SYNC_PROTO_EXPORT protobuf_AddDesc_autofill_5fspecifics_2eproto_impl();
  #else
  friend void SYNC_PROTO_EXPORT protobuf_AddDesc_autofill_5fspecifics_2eproto();
  #endif
  friend void protobuf_AssignDesc_autofill_5fspecifics_2eproto();
  friend void protobuf_ShutdownFile_autofill_5fspecifics_2eproto();

  void InitAsDefaultInstance();
  static WalletMetadataSpecifics* default_instance_;
};
// ===================================================================


// ===================================================================

// AutofillProfileSpecifics

// optional string guid = 15;
inline bool AutofillProfileSpecifics::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AutofillProfileSpecifics::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AutofillProfileSpecifics::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AutofillProfileSpecifics::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyString()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& AutofillProfileSpecifics::guid() const {
  return *guid_;
}
inline void AutofillProfileSpecifics::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyString()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
}
inline void AutofillProfileSpecifics::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyString()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
}
inline void AutofillProfileSpecifics::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyString()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AutofillProfileSpecifics::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyString()) {
    guid_ = new ::std::string;
  }
  return guid_;
}
inline ::std::string* AutofillProfileSpecifics::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void AutofillProfileSpecifics::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyString()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string origin = 16;
inline bool AutofillProfileSpecifics::has_origin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AutofillProfileSpecifics::set_has_origin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AutofillProfileSpecifics::clear_has_origin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AutofillProfileSpecifics::clear_origin() {
  if (origin_ != &::google::protobuf::internal::GetEmptyString()) {
    origin_->clear();
  }
  clear_has_origin();
}
inline const ::std::string& AutofillProfileSpecifics::origin() const {
  return *origin_;
}
inline void AutofillProfileSpecifics::set_origin(const ::std::string& value) {
  set_has_origin();
  if (origin_ == &::google::protobuf::internal::GetEmptyString()) {
    origin_ = new ::std::string;
  }
  origin_->assign(value);
}
inline void AutofillProfileSpecifics::set_origin(const char* value) {
  set_has_origin();
  if (origin_ == &::google::protobuf::internal::GetEmptyString()) {
    origin_ = new ::std::string;
  }
  origin_->assign(value);
}
inline void AutofillProfileSpecifics::set_origin(const char* value, size_t size) {
  set_has_origin();
  if (origin_ == &::google::protobuf::internal::GetEmptyString()) {
    origin_ = new ::std::string;
  }
  origin_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AutofillProfileSpecifics::mutable_origin() {
  set_has_origin();
  if (origin_ == &::google::protobuf::internal::GetEmptyString()) {
    origin_ = new ::std::string;
  }
  return origin_;
}
inline ::std::string* AutofillProfileSpecifics::release_origin() {
  clear_has_origin();
  if (origin_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = origin_;
    origin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void AutofillProfileSpecifics::set_allocated_origin(::std::string* origin) {
  if (origin_ != &::google::protobuf::internal::GetEmptyString()) {
    delete origin_;
  }
  if (origin) {
    set_has_origin();
    origin_ = origin;
  } else {
    clear_has_origin();
    origin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional int64 use_count = 22;
inline bool AutofillProfileSpecifics::has_use_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AutofillProfileSpecifics::set_has_use_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AutofillProfileSpecifics::clear_has_use_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AutofillProfileSpecifics::clear_use_count() {
  use_count_ = GOOGLE_LONGLONG(0);
  clear_has_use_count();
}
inline ::google::protobuf::int64 AutofillProfileSpecifics::use_count() const {
  return use_count_;
}
inline void AutofillProfileSpecifics::set_use_count(::google::protobuf::int64 value) {
  set_has_use_count();
  use_count_ = value;
}

// optional int64 use_date = 23;
inline bool AutofillProfileSpecifics::has_use_date() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AutofillProfileSpecifics::set_has_use_date() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AutofillProfileSpecifics::clear_has_use_date() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AutofillProfileSpecifics::clear_use_date() {
  use_date_ = GOOGLE_LONGLONG(0);
  clear_has_use_date();
}
inline ::google::protobuf::int64 AutofillProfileSpecifics::use_date() const {
  return use_date_;
}
inline void AutofillProfileSpecifics::set_use_date(::google::protobuf::int64 value) {
  set_has_use_date();
  use_date_ = value;
}

// repeated string name_first = 2;
inline int AutofillProfileSpecifics::name_first_size() const {
  return name_first_.size();
}
inline void AutofillProfileSpecifics::clear_name_first() {
  name_first_.Clear();
}
inline const ::std::string& AutofillProfileSpecifics::name_first(int index) const {
  return name_first_.Get(index);
}
inline ::std::string* AutofillProfileSpecifics::mutable_name_first(int index) {
  return name_first_.Mutable(index);
}
inline void AutofillProfileSpecifics::set_name_first(int index, const ::std::string& value) {
  name_first_.Mutable(index)->assign(value);
}
inline void AutofillProfileSpecifics::set_name_first(int index, const char* value) {
  name_first_.Mutable(index)->assign(value);
}
inline void AutofillProfileSpecifics::set_name_first(int index, const char* value, size_t size) {
  name_first_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AutofillProfileSpecifics::add_name_first() {
  return name_first_.Add();
}
inline void AutofillProfileSpecifics::add_name_first(const ::std::string& value) {
  name_first_.Add()->assign(value);
}
inline void AutofillProfileSpecifics::add_name_first(const char* value) {
  name_first_.Add()->assign(value);
}
inline void AutofillProfileSpecifics::add_name_first(const char* value, size_t size) {
  name_first_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AutofillProfileSpecifics::name_first() const {
  return name_first_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AutofillProfileSpecifics::mutable_name_first() {
  return &name_first_;
}

// repeated string name_middle = 3;
inline int AutofillProfileSpecifics::name_middle_size() const {
  return name_middle_.size();
}
inline void AutofillProfileSpecifics::clear_name_middle() {
  name_middle_.Clear();
}
inline const ::std::string& AutofillProfileSpecifics::name_middle(int index) const {
  return name_middle_.Get(index);
}
inline ::std::string* AutofillProfileSpecifics::mutable_name_middle(int index) {
  return name_middle_.Mutable(index);
}
inline void AutofillProfileSpecifics::set_name_middle(int index, const ::std::string& value) {
  name_middle_.Mutable(index)->assign(value);
}
inline void AutofillProfileSpecifics::set_name_middle(int index, const char* value) {
  name_middle_.Mutable(index)->assign(value);
}
inline void AutofillProfileSpecifics::set_name_middle(int index, const char* value, size_t size) {
  name_middle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AutofillProfileSpecifics::add_name_middle() {
  return name_middle_.Add();
}
inline void AutofillProfileSpecifics::add_name_middle(const ::std::string& value) {
  name_middle_.Add()->assign(value);
}
inline void AutofillProfileSpecifics::add_name_middle(const char* value) {
  name_middle_.Add()->assign(value);
}
inline void AutofillProfileSpecifics::add_name_middle(const char* value, size_t size) {
  name_middle_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AutofillProfileSpecifics::name_middle() const {
  return name_middle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AutofillProfileSpecifics::mutable_name_middle() {
  return &name_middle_;
}

// repeated string name_last = 4;
inline int AutofillProfileSpecifics::name_last_size() const {
  return name_last_.size();
}
inline void AutofillProfileSpecifics::clear_name_last() {
  name_last_.Clear();
}
inline const ::std::string& AutofillProfileSpecifics::name_last(int index) const {
  return name_last_.Get(index);
}
inline ::std::string* AutofillProfileSpecifics::mutable_name_last(int index) {
  return name_last_.Mutable(index);
}
inline void AutofillProfileSpecifics::set_name_last(int index, const ::std::string& value) {
  name_last_.Mutable(index)->assign(value);
}
inline void AutofillProfileSpecifics::set_name_last(int index, const char* value) {
  name_last_.Mutable(index)->assign(value);
}
inline void AutofillProfileSpecifics::set_name_last(int index, const char* value, size_t size) {
  name_last_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AutofillProfileSpecifics::add_name_last() {
  return name_last_.Add();
}
inline void AutofillProfileSpecifics::add_name_last(const ::std::string& value) {
  name_last_.Add()->assign(value);
}
inline void AutofillProfileSpecifics::add_name_last(const char* value) {
  name_last_.Add()->assign(value);
}
inline void AutofillProfileSpecifics::add_name_last(const char* value, size_t size) {
  name_last_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AutofillProfileSpecifics::name_last() const {
  return name_last_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AutofillProfileSpecifics::mutable_name_last() {
  return &name_last_;
}

// repeated string name_full = 21;
inline int AutofillProfileSpecifics::name_full_size() const {
  return name_full_.size();
}
inline void AutofillProfileSpecifics::clear_name_full() {
  name_full_.Clear();
}
inline const ::std::string& AutofillProfileSpecifics::name_full(int index) const {
  return name_full_.Get(index);
}
inline ::std::string* AutofillProfileSpecifics::mutable_name_full(int index) {
  return name_full_.Mutable(index);
}
inline void AutofillProfileSpecifics::set_name_full(int index, const ::std::string& value) {
  name_full_.Mutable(index)->assign(value);
}
inline void AutofillProfileSpecifics::set_name_full(int index, const char* value) {
  name_full_.Mutable(index)->assign(value);
}
inline void AutofillProfileSpecifics::set_name_full(int index, const char* value, size_t size) {
  name_full_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AutofillProfileSpecifics::add_name_full() {
  return name_full_.Add();
}
inline void AutofillProfileSpecifics::add_name_full(const ::std::string& value) {
  name_full_.Add()->assign(value);
}
inline void AutofillProfileSpecifics::add_name_full(const char* value) {
  name_full_.Add()->assign(value);
}
inline void AutofillProfileSpecifics::add_name_full(const char* value, size_t size) {
  name_full_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AutofillProfileSpecifics::name_full() const {
  return name_full_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AutofillProfileSpecifics::mutable_name_full() {
  return &name_full_;
}

// repeated string email_address = 5;
inline int AutofillProfileSpecifics::email_address_size() const {
  return email_address_.size();
}
inline void AutofillProfileSpecifics::clear_email_address() {
  email_address_.Clear();
}
inline const ::std::string& AutofillProfileSpecifics::email_address(int index) const {
  return email_address_.Get(index);
}
inline ::std::string* AutofillProfileSpecifics::mutable_email_address(int index) {
  return email_address_.Mutable(index);
}
inline void AutofillProfileSpecifics::set_email_address(int index, const ::std::string& value) {
  email_address_.Mutable(index)->assign(value);
}
inline void AutofillProfileSpecifics::set_email_address(int index, const char* value) {
  email_address_.Mutable(index)->assign(value);
}
inline void AutofillProfileSpecifics::set_email_address(int index, const char* value, size_t size) {
  email_address_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AutofillProfileSpecifics::add_email_address() {
  return email_address_.Add();
}
inline void AutofillProfileSpecifics::add_email_address(const ::std::string& value) {
  email_address_.Add()->assign(value);
}
inline void AutofillProfileSpecifics::add_email_address(const char* value) {
  email_address_.Add()->assign(value);
}
inline void AutofillProfileSpecifics::add_email_address(const char* value, size_t size) {
  email_address_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AutofillProfileSpecifics::email_address() const {
  return email_address_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AutofillProfileSpecifics::mutable_email_address() {
  return &email_address_;
}

// optional string company_name = 6;
inline bool AutofillProfileSpecifics::has_company_name() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AutofillProfileSpecifics::set_has_company_name() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AutofillProfileSpecifics::clear_has_company_name() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AutofillProfileSpecifics::clear_company_name() {
  if (company_name_ != &::google::protobuf::internal::GetEmptyString()) {
    company_name_->clear();
  }
  clear_has_company_name();
}
inline const ::std::string& AutofillProfileSpecifics::company_name() const {
  return *company_name_;
}
inline void AutofillProfileSpecifics::set_company_name(const ::std::string& value) {
  set_has_company_name();
  if (company_name_ == &::google::protobuf::internal::GetEmptyString()) {
    company_name_ = new ::std::string;
  }
  company_name_->assign(value);
}
inline void AutofillProfileSpecifics::set_company_name(const char* value) {
  set_has_company_name();
  if (company_name_ == &::google::protobuf::internal::GetEmptyString()) {
    company_name_ = new ::std::string;
  }
  company_name_->assign(value);
}
inline void AutofillProfileSpecifics::set_company_name(const char* value, size_t size) {
  set_has_company_name();
  if (company_name_ == &::google::protobuf::internal::GetEmptyString()) {
    company_name_ = new ::std::string;
  }
  company_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AutofillProfileSpecifics::mutable_company_name() {
  set_has_company_name();
  if (company_name_ == &::google::protobuf::internal::GetEmptyString()) {
    company_name_ = new ::std::string;
  }
  return company_name_;
}
inline ::std::string* AutofillProfileSpecifics::release_company_name() {
  clear_has_company_name();
  if (company_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = company_name_;
    company_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void AutofillProfileSpecifics::set_allocated_company_name(::std::string* company_name) {
  if (company_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete company_name_;
  }
  if (company_name) {
    set_has_company_name();
    company_name_ = company_name;
  } else {
    clear_has_company_name();
    company_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string address_home_line1 = 7;
inline bool AutofillProfileSpecifics::has_address_home_line1() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AutofillProfileSpecifics::set_has_address_home_line1() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AutofillProfileSpecifics::clear_has_address_home_line1() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AutofillProfileSpecifics::clear_address_home_line1() {
  if (address_home_line1_ != &::google::protobuf::internal::GetEmptyString()) {
    address_home_line1_->clear();
  }
  clear_has_address_home_line1();
}
inline const ::std::string& AutofillProfileSpecifics::address_home_line1() const {
  return *address_home_line1_;
}
inline void AutofillProfileSpecifics::set_address_home_line1(const ::std::string& value) {
  set_has_address_home_line1();
  if (address_home_line1_ == &::google::protobuf::internal::GetEmptyString()) {
    address_home_line1_ = new ::std::string;
  }
  address_home_line1_->assign(value);
}
inline void AutofillProfileSpecifics::set_address_home_line1(const char* value) {
  set_has_address_home_line1();
  if (address_home_line1_ == &::google::protobuf::internal::GetEmptyString()) {
    address_home_line1_ = new ::std::string;
  }
  address_home_line1_->assign(value);
}
inline void AutofillProfileSpecifics::set_address_home_line1(const char* value, size_t size) {
  set_has_address_home_line1();
  if (address_home_line1_ == &::google::protobuf::internal::GetEmptyString()) {
    address_home_line1_ = new ::std::string;
  }
  address_home_line1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AutofillProfileSpecifics::mutable_address_home_line1() {
  set_has_address_home_line1();
  if (address_home_line1_ == &::google::protobuf::internal::GetEmptyString()) {
    address_home_line1_ = new ::std::string;
  }
  return address_home_line1_;
}
inline ::std::string* AutofillProfileSpecifics::release_address_home_line1() {
  clear_has_address_home_line1();
  if (address_home_line1_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = address_home_line1_;
    address_home_line1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void AutofillProfileSpecifics::set_allocated_address_home_line1(::std::string* address_home_line1) {
  if (address_home_line1_ != &::google::protobuf::internal::GetEmptyString()) {
    delete address_home_line1_;
  }
  if (address_home_line1) {
    set_has_address_home_line1();
    address_home_line1_ = address_home_line1;
  } else {
    clear_has_address_home_line1();
    address_home_line1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string address_home_line2 = 8;
inline bool AutofillProfileSpecifics::has_address_home_line2() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AutofillProfileSpecifics::set_has_address_home_line2() {
  _has_bits_[0] |= 0x00000800u;
}
inline void AutofillProfileSpecifics::clear_has_address_home_line2() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void AutofillProfileSpecifics::clear_address_home_line2() {
  if (address_home_line2_ != &::google::protobuf::internal::GetEmptyString()) {
    address_home_line2_->clear();
  }
  clear_has_address_home_line2();
}
inline const ::std::string& AutofillProfileSpecifics::address_home_line2() const {
  return *address_home_line2_;
}
inline void AutofillProfileSpecifics::set_address_home_line2(const ::std::string& value) {
  set_has_address_home_line2();
  if (address_home_line2_ == &::google::protobuf::internal::GetEmptyString()) {
    address_home_line2_ = new ::std::string;
  }
  address_home_line2_->assign(value);
}
inline void AutofillProfileSpecifics::set_address_home_line2(const char* value) {
  set_has_address_home_line2();
  if (address_home_line2_ == &::google::protobuf::internal::GetEmptyString()) {
    address_home_line2_ = new ::std::string;
  }
  address_home_line2_->assign(value);
}
inline void AutofillProfileSpecifics::set_address_home_line2(const char* value, size_t size) {
  set_has_address_home_line2();
  if (address_home_line2_ == &::google::protobuf::internal::GetEmptyString()) {
    address_home_line2_ = new ::std::string;
  }
  address_home_line2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AutofillProfileSpecifics::mutable_address_home_line2() {
  set_has_address_home_line2();
  if (address_home_line2_ == &::google::protobuf::internal::GetEmptyString()) {
    address_home_line2_ = new ::std::string;
  }
  return address_home_line2_;
}
inline ::std::string* AutofillProfileSpecifics::release_address_home_line2() {
  clear_has_address_home_line2();
  if (address_home_line2_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = address_home_line2_;
    address_home_line2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void AutofillProfileSpecifics::set_allocated_address_home_line2(::std::string* address_home_line2) {
  if (address_home_line2_ != &::google::protobuf::internal::GetEmptyString()) {
    delete address_home_line2_;
  }
  if (address_home_line2) {
    set_has_address_home_line2();
    address_home_line2_ = address_home_line2;
  } else {
    clear_has_address_home_line2();
    address_home_line2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string address_home_city = 9;
inline bool AutofillProfileSpecifics::has_address_home_city() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void AutofillProfileSpecifics::set_has_address_home_city() {
  _has_bits_[0] |= 0x00001000u;
}
inline void AutofillProfileSpecifics::clear_has_address_home_city() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void AutofillProfileSpecifics::clear_address_home_city() {
  if (address_home_city_ != &::google::protobuf::internal::GetEmptyString()) {
    address_home_city_->clear();
  }
  clear_has_address_home_city();
}
inline const ::std::string& AutofillProfileSpecifics::address_home_city() const {
  return *address_home_city_;
}
inline void AutofillProfileSpecifics::set_address_home_city(const ::std::string& value) {
  set_has_address_home_city();
  if (address_home_city_ == &::google::protobuf::internal::GetEmptyString()) {
    address_home_city_ = new ::std::string;
  }
  address_home_city_->assign(value);
}
inline void AutofillProfileSpecifics::set_address_home_city(const char* value) {
  set_has_address_home_city();
  if (address_home_city_ == &::google::protobuf::internal::GetEmptyString()) {
    address_home_city_ = new ::std::string;
  }
  address_home_city_->assign(value);
}
inline void AutofillProfileSpecifics::set_address_home_city(const char* value, size_t size) {
  set_has_address_home_city();
  if (address_home_city_ == &::google::protobuf::internal::GetEmptyString()) {
    address_home_city_ = new ::std::string;
  }
  address_home_city_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AutofillProfileSpecifics::mutable_address_home_city() {
  set_has_address_home_city();
  if (address_home_city_ == &::google::protobuf::internal::GetEmptyString()) {
    address_home_city_ = new ::std::string;
  }
  return address_home_city_;
}
inline ::std::string* AutofillProfileSpecifics::release_address_home_city() {
  clear_has_address_home_city();
  if (address_home_city_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = address_home_city_;
    address_home_city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void AutofillProfileSpecifics::set_allocated_address_home_city(::std::string* address_home_city) {
  if (address_home_city_ != &::google::protobuf::internal::GetEmptyString()) {
    delete address_home_city_;
  }
  if (address_home_city) {
    set_has_address_home_city();
    address_home_city_ = address_home_city;
  } else {
    clear_has_address_home_city();
    address_home_city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string address_home_state = 10;
inline bool AutofillProfileSpecifics::has_address_home_state() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void AutofillProfileSpecifics::set_has_address_home_state() {
  _has_bits_[0] |= 0x00002000u;
}
inline void AutofillProfileSpecifics::clear_has_address_home_state() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void AutofillProfileSpecifics::clear_address_home_state() {
  if (address_home_state_ != &::google::protobuf::internal::GetEmptyString()) {
    address_home_state_->clear();
  }
  clear_has_address_home_state();
}
inline const ::std::string& AutofillProfileSpecifics::address_home_state() const {
  return *address_home_state_;
}
inline void AutofillProfileSpecifics::set_address_home_state(const ::std::string& value) {
  set_has_address_home_state();
  if (address_home_state_ == &::google::protobuf::internal::GetEmptyString()) {
    address_home_state_ = new ::std::string;
  }
  address_home_state_->assign(value);
}
inline void AutofillProfileSpecifics::set_address_home_state(const char* value) {
  set_has_address_home_state();
  if (address_home_state_ == &::google::protobuf::internal::GetEmptyString()) {
    address_home_state_ = new ::std::string;
  }
  address_home_state_->assign(value);
}
inline void AutofillProfileSpecifics::set_address_home_state(const char* value, size_t size) {
  set_has_address_home_state();
  if (address_home_state_ == &::google::protobuf::internal::GetEmptyString()) {
    address_home_state_ = new ::std::string;
  }
  address_home_state_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AutofillProfileSpecifics::mutable_address_home_state() {
  set_has_address_home_state();
  if (address_home_state_ == &::google::protobuf::internal::GetEmptyString()) {
    address_home_state_ = new ::std::string;
  }
  return address_home_state_;
}
inline ::std::string* AutofillProfileSpecifics::release_address_home_state() {
  clear_has_address_home_state();
  if (address_home_state_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = address_home_state_;
    address_home_state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void AutofillProfileSpecifics::set_allocated_address_home_state(::std::string* address_home_state) {
  if (address_home_state_ != &::google::protobuf::internal::GetEmptyString()) {
    delete address_home_state_;
  }
  if (address_home_state) {
    set_has_address_home_state();
    address_home_state_ = address_home_state;
  } else {
    clear_has_address_home_state();
    address_home_state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string address_home_zip = 11;
inline bool AutofillProfileSpecifics::has_address_home_zip() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void AutofillProfileSpecifics::set_has_address_home_zip() {
  _has_bits_[0] |= 0x00004000u;
}
inline void AutofillProfileSpecifics::clear_has_address_home_zip() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void AutofillProfileSpecifics::clear_address_home_zip() {
  if (address_home_zip_ != &::google::protobuf::internal::GetEmptyString()) {
    address_home_zip_->clear();
  }
  clear_has_address_home_zip();
}
inline const ::std::string& AutofillProfileSpecifics::address_home_zip() const {
  return *address_home_zip_;
}
inline void AutofillProfileSpecifics::set_address_home_zip(const ::std::string& value) {
  set_has_address_home_zip();
  if (address_home_zip_ == &::google::protobuf::internal::GetEmptyString()) {
    address_home_zip_ = new ::std::string;
  }
  address_home_zip_->assign(value);
}
inline void AutofillProfileSpecifics::set_address_home_zip(const char* value) {
  set_has_address_home_zip();
  if (address_home_zip_ == &::google::protobuf::internal::GetEmptyString()) {
    address_home_zip_ = new ::std::string;
  }
  address_home_zip_->assign(value);
}
inline void AutofillProfileSpecifics::set_address_home_zip(const char* value, size_t size) {
  set_has_address_home_zip();
  if (address_home_zip_ == &::google::protobuf::internal::GetEmptyString()) {
    address_home_zip_ = new ::std::string;
  }
  address_home_zip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AutofillProfileSpecifics::mutable_address_home_zip() {
  set_has_address_home_zip();
  if (address_home_zip_ == &::google::protobuf::internal::GetEmptyString()) {
    address_home_zip_ = new ::std::string;
  }
  return address_home_zip_;
}
inline ::std::string* AutofillProfileSpecifics::release_address_home_zip() {
  clear_has_address_home_zip();
  if (address_home_zip_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = address_home_zip_;
    address_home_zip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void AutofillProfileSpecifics::set_allocated_address_home_zip(::std::string* address_home_zip) {
  if (address_home_zip_ != &::google::protobuf::internal::GetEmptyString()) {
    delete address_home_zip_;
  }
  if (address_home_zip) {
    set_has_address_home_zip();
    address_home_zip_ = address_home_zip;
  } else {
    clear_has_address_home_zip();
    address_home_zip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string address_home_country = 12;
inline bool AutofillProfileSpecifics::has_address_home_country() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void AutofillProfileSpecifics::set_has_address_home_country() {
  _has_bits_[0] |= 0x00008000u;
}
inline void AutofillProfileSpecifics::clear_has_address_home_country() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void AutofillProfileSpecifics::clear_address_home_country() {
  if (address_home_country_ != &::google::protobuf::internal::GetEmptyString()) {
    address_home_country_->clear();
  }
  clear_has_address_home_country();
}
inline const ::std::string& AutofillProfileSpecifics::address_home_country() const {
  return *address_home_country_;
}
inline void AutofillProfileSpecifics::set_address_home_country(const ::std::string& value) {
  set_has_address_home_country();
  if (address_home_country_ == &::google::protobuf::internal::GetEmptyString()) {
    address_home_country_ = new ::std::string;
  }
  address_home_country_->assign(value);
}
inline void AutofillProfileSpecifics::set_address_home_country(const char* value) {
  set_has_address_home_country();
  if (address_home_country_ == &::google::protobuf::internal::GetEmptyString()) {
    address_home_country_ = new ::std::string;
  }
  address_home_country_->assign(value);
}
inline void AutofillProfileSpecifics::set_address_home_country(const char* value, size_t size) {
  set_has_address_home_country();
  if (address_home_country_ == &::google::protobuf::internal::GetEmptyString()) {
    address_home_country_ = new ::std::string;
  }
  address_home_country_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AutofillProfileSpecifics::mutable_address_home_country() {
  set_has_address_home_country();
  if (address_home_country_ == &::google::protobuf::internal::GetEmptyString()) {
    address_home_country_ = new ::std::string;
  }
  return address_home_country_;
}
inline ::std::string* AutofillProfileSpecifics::release_address_home_country() {
  clear_has_address_home_country();
  if (address_home_country_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = address_home_country_;
    address_home_country_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void AutofillProfileSpecifics::set_allocated_address_home_country(::std::string* address_home_country) {
  if (address_home_country_ != &::google::protobuf::internal::GetEmptyString()) {
    delete address_home_country_;
  }
  if (address_home_country) {
    set_has_address_home_country();
    address_home_country_ = address_home_country;
  } else {
    clear_has_address_home_country();
    address_home_country_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string address_home_street_address = 17;
inline bool AutofillProfileSpecifics::has_address_home_street_address() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void AutofillProfileSpecifics::set_has_address_home_street_address() {
  _has_bits_[0] |= 0x00010000u;
}
inline void AutofillProfileSpecifics::clear_has_address_home_street_address() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void AutofillProfileSpecifics::clear_address_home_street_address() {
  if (address_home_street_address_ != &::google::protobuf::internal::GetEmptyString()) {
    address_home_street_address_->clear();
  }
  clear_has_address_home_street_address();
}
inline const ::std::string& AutofillProfileSpecifics::address_home_street_address() const {
  return *address_home_street_address_;
}
inline void AutofillProfileSpecifics::set_address_home_street_address(const ::std::string& value) {
  set_has_address_home_street_address();
  if (address_home_street_address_ == &::google::protobuf::internal::GetEmptyString()) {
    address_home_street_address_ = new ::std::string;
  }
  address_home_street_address_->assign(value);
}
inline void AutofillProfileSpecifics::set_address_home_street_address(const char* value) {
  set_has_address_home_street_address();
  if (address_home_street_address_ == &::google::protobuf::internal::GetEmptyString()) {
    address_home_street_address_ = new ::std::string;
  }
  address_home_street_address_->assign(value);
}
inline void AutofillProfileSpecifics::set_address_home_street_address(const char* value, size_t size) {
  set_has_address_home_street_address();
  if (address_home_street_address_ == &::google::protobuf::internal::GetEmptyString()) {
    address_home_street_address_ = new ::std::string;
  }
  address_home_street_address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AutofillProfileSpecifics::mutable_address_home_street_address() {
  set_has_address_home_street_address();
  if (address_home_street_address_ == &::google::protobuf::internal::GetEmptyString()) {
    address_home_street_address_ = new ::std::string;
  }
  return address_home_street_address_;
}
inline ::std::string* AutofillProfileSpecifics::release_address_home_street_address() {
  clear_has_address_home_street_address();
  if (address_home_street_address_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = address_home_street_address_;
    address_home_street_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void AutofillProfileSpecifics::set_allocated_address_home_street_address(::std::string* address_home_street_address) {
  if (address_home_street_address_ != &::google::protobuf::internal::GetEmptyString()) {
    delete address_home_street_address_;
  }
  if (address_home_street_address) {
    set_has_address_home_street_address();
    address_home_street_address_ = address_home_street_address;
  } else {
    clear_has_address_home_street_address();
    address_home_street_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string address_home_sorting_code = 18;
inline bool AutofillProfileSpecifics::has_address_home_sorting_code() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void AutofillProfileSpecifics::set_has_address_home_sorting_code() {
  _has_bits_[0] |= 0x00020000u;
}
inline void AutofillProfileSpecifics::clear_has_address_home_sorting_code() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void AutofillProfileSpecifics::clear_address_home_sorting_code() {
  if (address_home_sorting_code_ != &::google::protobuf::internal::GetEmptyString()) {
    address_home_sorting_code_->clear();
  }
  clear_has_address_home_sorting_code();
}
inline const ::std::string& AutofillProfileSpecifics::address_home_sorting_code() const {
  return *address_home_sorting_code_;
}
inline void AutofillProfileSpecifics::set_address_home_sorting_code(const ::std::string& value) {
  set_has_address_home_sorting_code();
  if (address_home_sorting_code_ == &::google::protobuf::internal::GetEmptyString()) {
    address_home_sorting_code_ = new ::std::string;
  }
  address_home_sorting_code_->assign(value);
}
inline void AutofillProfileSpecifics::set_address_home_sorting_code(const char* value) {
  set_has_address_home_sorting_code();
  if (address_home_sorting_code_ == &::google::protobuf::internal::GetEmptyString()) {
    address_home_sorting_code_ = new ::std::string;
  }
  address_home_sorting_code_->assign(value);
}
inline void AutofillProfileSpecifics::set_address_home_sorting_code(const char* value, size_t size) {
  set_has_address_home_sorting_code();
  if (address_home_sorting_code_ == &::google::protobuf::internal::GetEmptyString()) {
    address_home_sorting_code_ = new ::std::string;
  }
  address_home_sorting_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AutofillProfileSpecifics::mutable_address_home_sorting_code() {
  set_has_address_home_sorting_code();
  if (address_home_sorting_code_ == &::google::protobuf::internal::GetEmptyString()) {
    address_home_sorting_code_ = new ::std::string;
  }
  return address_home_sorting_code_;
}
inline ::std::string* AutofillProfileSpecifics::release_address_home_sorting_code() {
  clear_has_address_home_sorting_code();
  if (address_home_sorting_code_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = address_home_sorting_code_;
    address_home_sorting_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void AutofillProfileSpecifics::set_allocated_address_home_sorting_code(::std::string* address_home_sorting_code) {
  if (address_home_sorting_code_ != &::google::protobuf::internal::GetEmptyString()) {
    delete address_home_sorting_code_;
  }
  if (address_home_sorting_code) {
    set_has_address_home_sorting_code();
    address_home_sorting_code_ = address_home_sorting_code;
  } else {
    clear_has_address_home_sorting_code();
    address_home_sorting_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string address_home_dependent_locality = 19;
inline bool AutofillProfileSpecifics::has_address_home_dependent_locality() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void AutofillProfileSpecifics::set_has_address_home_dependent_locality() {
  _has_bits_[0] |= 0x00040000u;
}
inline void AutofillProfileSpecifics::clear_has_address_home_dependent_locality() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void AutofillProfileSpecifics::clear_address_home_dependent_locality() {
  if (address_home_dependent_locality_ != &::google::protobuf::internal::GetEmptyString()) {
    address_home_dependent_locality_->clear();
  }
  clear_has_address_home_dependent_locality();
}
inline const ::std::string& AutofillProfileSpecifics::address_home_dependent_locality() const {
  return *address_home_dependent_locality_;
}
inline void AutofillProfileSpecifics::set_address_home_dependent_locality(const ::std::string& value) {
  set_has_address_home_dependent_locality();
  if (address_home_dependent_locality_ == &::google::protobuf::internal::GetEmptyString()) {
    address_home_dependent_locality_ = new ::std::string;
  }
  address_home_dependent_locality_->assign(value);
}
inline void AutofillProfileSpecifics::set_address_home_dependent_locality(const char* value) {
  set_has_address_home_dependent_locality();
  if (address_home_dependent_locality_ == &::google::protobuf::internal::GetEmptyString()) {
    address_home_dependent_locality_ = new ::std::string;
  }
  address_home_dependent_locality_->assign(value);
}
inline void AutofillProfileSpecifics::set_address_home_dependent_locality(const char* value, size_t size) {
  set_has_address_home_dependent_locality();
  if (address_home_dependent_locality_ == &::google::protobuf::internal::GetEmptyString()) {
    address_home_dependent_locality_ = new ::std::string;
  }
  address_home_dependent_locality_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AutofillProfileSpecifics::mutable_address_home_dependent_locality() {
  set_has_address_home_dependent_locality();
  if (address_home_dependent_locality_ == &::google::protobuf::internal::GetEmptyString()) {
    address_home_dependent_locality_ = new ::std::string;
  }
  return address_home_dependent_locality_;
}
inline ::std::string* AutofillProfileSpecifics::release_address_home_dependent_locality() {
  clear_has_address_home_dependent_locality();
  if (address_home_dependent_locality_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = address_home_dependent_locality_;
    address_home_dependent_locality_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void AutofillProfileSpecifics::set_allocated_address_home_dependent_locality(::std::string* address_home_dependent_locality) {
  if (address_home_dependent_locality_ != &::google::protobuf::internal::GetEmptyString()) {
    delete address_home_dependent_locality_;
  }
  if (address_home_dependent_locality) {
    set_has_address_home_dependent_locality();
    address_home_dependent_locality_ = address_home_dependent_locality;
  } else {
    clear_has_address_home_dependent_locality();
    address_home_dependent_locality_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string address_home_language_code = 20;
inline bool AutofillProfileSpecifics::has_address_home_language_code() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void AutofillProfileSpecifics::set_has_address_home_language_code() {
  _has_bits_[0] |= 0x00080000u;
}
inline void AutofillProfileSpecifics::clear_has_address_home_language_code() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void AutofillProfileSpecifics::clear_address_home_language_code() {
  if (address_home_language_code_ != &::google::protobuf::internal::GetEmptyString()) {
    address_home_language_code_->clear();
  }
  clear_has_address_home_language_code();
}
inline const ::std::string& AutofillProfileSpecifics::address_home_language_code() const {
  return *address_home_language_code_;
}
inline void AutofillProfileSpecifics::set_address_home_language_code(const ::std::string& value) {
  set_has_address_home_language_code();
  if (address_home_language_code_ == &::google::protobuf::internal::GetEmptyString()) {
    address_home_language_code_ = new ::std::string;
  }
  address_home_language_code_->assign(value);
}
inline void AutofillProfileSpecifics::set_address_home_language_code(const char* value) {
  set_has_address_home_language_code();
  if (address_home_language_code_ == &::google::protobuf::internal::GetEmptyString()) {
    address_home_language_code_ = new ::std::string;
  }
  address_home_language_code_->assign(value);
}
inline void AutofillProfileSpecifics::set_address_home_language_code(const char* value, size_t size) {
  set_has_address_home_language_code();
  if (address_home_language_code_ == &::google::protobuf::internal::GetEmptyString()) {
    address_home_language_code_ = new ::std::string;
  }
  address_home_language_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AutofillProfileSpecifics::mutable_address_home_language_code() {
  set_has_address_home_language_code();
  if (address_home_language_code_ == &::google::protobuf::internal::GetEmptyString()) {
    address_home_language_code_ = new ::std::string;
  }
  return address_home_language_code_;
}
inline ::std::string* AutofillProfileSpecifics::release_address_home_language_code() {
  clear_has_address_home_language_code();
  if (address_home_language_code_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = address_home_language_code_;
    address_home_language_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void AutofillProfileSpecifics::set_allocated_address_home_language_code(::std::string* address_home_language_code) {
  if (address_home_language_code_ != &::google::protobuf::internal::GetEmptyString()) {
    delete address_home_language_code_;
  }
  if (address_home_language_code) {
    set_has_address_home_language_code();
    address_home_language_code_ = address_home_language_code;
  } else {
    clear_has_address_home_language_code();
    address_home_language_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// repeated string phone_home_whole_number = 13;
inline int AutofillProfileSpecifics::phone_home_whole_number_size() const {
  return phone_home_whole_number_.size();
}
inline void AutofillProfileSpecifics::clear_phone_home_whole_number() {
  phone_home_whole_number_.Clear();
}
inline const ::std::string& AutofillProfileSpecifics::phone_home_whole_number(int index) const {
  return phone_home_whole_number_.Get(index);
}
inline ::std::string* AutofillProfileSpecifics::mutable_phone_home_whole_number(int index) {
  return phone_home_whole_number_.Mutable(index);
}
inline void AutofillProfileSpecifics::set_phone_home_whole_number(int index, const ::std::string& value) {
  phone_home_whole_number_.Mutable(index)->assign(value);
}
inline void AutofillProfileSpecifics::set_phone_home_whole_number(int index, const char* value) {
  phone_home_whole_number_.Mutable(index)->assign(value);
}
inline void AutofillProfileSpecifics::set_phone_home_whole_number(int index, const char* value, size_t size) {
  phone_home_whole_number_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AutofillProfileSpecifics::add_phone_home_whole_number() {
  return phone_home_whole_number_.Add();
}
inline void AutofillProfileSpecifics::add_phone_home_whole_number(const ::std::string& value) {
  phone_home_whole_number_.Add()->assign(value);
}
inline void AutofillProfileSpecifics::add_phone_home_whole_number(const char* value) {
  phone_home_whole_number_.Add()->assign(value);
}
inline void AutofillProfileSpecifics::add_phone_home_whole_number(const char* value, size_t size) {
  phone_home_whole_number_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AutofillProfileSpecifics::phone_home_whole_number() const {
  return phone_home_whole_number_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AutofillProfileSpecifics::mutable_phone_home_whole_number() {
  return &phone_home_whole_number_;
}

// optional string label = 1 [deprecated = true];
inline bool AutofillProfileSpecifics::has_label() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void AutofillProfileSpecifics::set_has_label() {
  _has_bits_[0] |= 0x00200000u;
}
inline void AutofillProfileSpecifics::clear_has_label() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void AutofillProfileSpecifics::clear_label() {
  if (label_ != &::google::protobuf::internal::GetEmptyString()) {
    label_->clear();
  }
  clear_has_label();
}
inline const ::std::string& AutofillProfileSpecifics::label() const {
  return *label_;
}
inline void AutofillProfileSpecifics::set_label(const ::std::string& value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::GetEmptyString()) {
    label_ = new ::std::string;
  }
  label_->assign(value);
}
inline void AutofillProfileSpecifics::set_label(const char* value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::GetEmptyString()) {
    label_ = new ::std::string;
  }
  label_->assign(value);
}
inline void AutofillProfileSpecifics::set_label(const char* value, size_t size) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::GetEmptyString()) {
    label_ = new ::std::string;
  }
  label_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AutofillProfileSpecifics::mutable_label() {
  set_has_label();
  if (label_ == &::google::protobuf::internal::GetEmptyString()) {
    label_ = new ::std::string;
  }
  return label_;
}
inline ::std::string* AutofillProfileSpecifics::release_label() {
  clear_has_label();
  if (label_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = label_;
    label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void AutofillProfileSpecifics::set_allocated_label(::std::string* label) {
  if (label_ != &::google::protobuf::internal::GetEmptyString()) {
    delete label_;
  }
  if (label) {
    set_has_label();
    label_ = label;
  } else {
    clear_has_label();
    label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string phone_fax_whole_number = 14 [deprecated = true];
inline bool AutofillProfileSpecifics::has_phone_fax_whole_number() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void AutofillProfileSpecifics::set_has_phone_fax_whole_number() {
  _has_bits_[0] |= 0x00400000u;
}
inline void AutofillProfileSpecifics::clear_has_phone_fax_whole_number() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void AutofillProfileSpecifics::clear_phone_fax_whole_number() {
  if (phone_fax_whole_number_ != &::google::protobuf::internal::GetEmptyString()) {
    phone_fax_whole_number_->clear();
  }
  clear_has_phone_fax_whole_number();
}
inline const ::std::string& AutofillProfileSpecifics::phone_fax_whole_number() const {
  return *phone_fax_whole_number_;
}
inline void AutofillProfileSpecifics::set_phone_fax_whole_number(const ::std::string& value) {
  set_has_phone_fax_whole_number();
  if (phone_fax_whole_number_ == &::google::protobuf::internal::GetEmptyString()) {
    phone_fax_whole_number_ = new ::std::string;
  }
  phone_fax_whole_number_->assign(value);
}
inline void AutofillProfileSpecifics::set_phone_fax_whole_number(const char* value) {
  set_has_phone_fax_whole_number();
  if (phone_fax_whole_number_ == &::google::protobuf::internal::GetEmptyString()) {
    phone_fax_whole_number_ = new ::std::string;
  }
  phone_fax_whole_number_->assign(value);
}
inline void AutofillProfileSpecifics::set_phone_fax_whole_number(const char* value, size_t size) {
  set_has_phone_fax_whole_number();
  if (phone_fax_whole_number_ == &::google::protobuf::internal::GetEmptyString()) {
    phone_fax_whole_number_ = new ::std::string;
  }
  phone_fax_whole_number_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AutofillProfileSpecifics::mutable_phone_fax_whole_number() {
  set_has_phone_fax_whole_number();
  if (phone_fax_whole_number_ == &::google::protobuf::internal::GetEmptyString()) {
    phone_fax_whole_number_ = new ::std::string;
  }
  return phone_fax_whole_number_;
}
inline ::std::string* AutofillProfileSpecifics::release_phone_fax_whole_number() {
  clear_has_phone_fax_whole_number();
  if (phone_fax_whole_number_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = phone_fax_whole_number_;
    phone_fax_whole_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void AutofillProfileSpecifics::set_allocated_phone_fax_whole_number(::std::string* phone_fax_whole_number) {
  if (phone_fax_whole_number_ != &::google::protobuf::internal::GetEmptyString()) {
    delete phone_fax_whole_number_;
  }
  if (phone_fax_whole_number) {
    set_has_phone_fax_whole_number();
    phone_fax_whole_number_ = phone_fax_whole_number;
  } else {
    clear_has_phone_fax_whole_number();
    phone_fax_whole_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// AutofillSpecifics

// optional string name = 1;
inline bool AutofillSpecifics::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AutofillSpecifics::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AutofillSpecifics::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AutofillSpecifics::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& AutofillSpecifics::name() const {
  return *name_;
}
inline void AutofillSpecifics::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void AutofillSpecifics::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void AutofillSpecifics::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AutofillSpecifics::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* AutofillSpecifics::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void AutofillSpecifics::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string value = 2;
inline bool AutofillSpecifics::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AutofillSpecifics::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AutofillSpecifics::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AutofillSpecifics::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyString()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& AutofillSpecifics::value() const {
  return *value_;
}
inline void AutofillSpecifics::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void AutofillSpecifics::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void AutofillSpecifics::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AutofillSpecifics::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* AutofillSpecifics::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void AutofillSpecifics::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyString()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// repeated int64 usage_timestamp = 3;
inline int AutofillSpecifics::usage_timestamp_size() const {
  return usage_timestamp_.size();
}
inline void AutofillSpecifics::clear_usage_timestamp() {
  usage_timestamp_.Clear();
}
inline ::google::protobuf::int64 AutofillSpecifics::usage_timestamp(int index) const {
  return usage_timestamp_.Get(index);
}
inline void AutofillSpecifics::set_usage_timestamp(int index, ::google::protobuf::int64 value) {
  usage_timestamp_.Set(index, value);
}
inline void AutofillSpecifics::add_usage_timestamp(::google::protobuf::int64 value) {
  usage_timestamp_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
AutofillSpecifics::usage_timestamp() const {
  return usage_timestamp_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
AutofillSpecifics::mutable_usage_timestamp() {
  return &usage_timestamp_;
}

// optional .sync_pb.AutofillProfileSpecifics profile = 4;
inline bool AutofillSpecifics::has_profile() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AutofillSpecifics::set_has_profile() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AutofillSpecifics::clear_has_profile() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AutofillSpecifics::clear_profile() {
  if (profile_ != NULL) profile_->::sync_pb::AutofillProfileSpecifics::Clear();
  clear_has_profile();
}
inline const ::sync_pb::AutofillProfileSpecifics& AutofillSpecifics::profile() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return profile_ != NULL ? *profile_ : *default_instance().profile_;
#else
  return profile_ != NULL ? *profile_ : *default_instance_->profile_;
#endif
}
inline ::sync_pb::AutofillProfileSpecifics* AutofillSpecifics::mutable_profile() {
  set_has_profile();
  if (profile_ == NULL) profile_ = new ::sync_pb::AutofillProfileSpecifics;
  return profile_;
}
inline ::sync_pb::AutofillProfileSpecifics* AutofillSpecifics::release_profile() {
  clear_has_profile();
  ::sync_pb::AutofillProfileSpecifics* temp = profile_;
  profile_ = NULL;
  return temp;
}
inline void AutofillSpecifics::set_allocated_profile(::sync_pb::AutofillProfileSpecifics* profile) {
  delete profile_;
  profile_ = profile;
  if (profile) {
    set_has_profile();
  } else {
    clear_has_profile();
  }
}

// -------------------------------------------------------------------

// WalletMaskedCreditCard

// optional string id = 1;
inline bool WalletMaskedCreditCard::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WalletMaskedCreditCard::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WalletMaskedCreditCard::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WalletMaskedCreditCard::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyString()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& WalletMaskedCreditCard::id() const {
  return *id_;
}
inline void WalletMaskedCreditCard::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyString()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void WalletMaskedCreditCard::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyString()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void WalletMaskedCreditCard::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyString()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WalletMaskedCreditCard::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyString()) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* WalletMaskedCreditCard::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void WalletMaskedCreditCard::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional .sync_pb.WalletMaskedCreditCard.WalletCardStatus status = 2;
inline bool WalletMaskedCreditCard::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WalletMaskedCreditCard::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WalletMaskedCreditCard::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WalletMaskedCreditCard::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::sync_pb::WalletMaskedCreditCard_WalletCardStatus WalletMaskedCreditCard::status() const {
  return static_cast< ::sync_pb::WalletMaskedCreditCard_WalletCardStatus >(status_);
}
inline void WalletMaskedCreditCard::set_status(::sync_pb::WalletMaskedCreditCard_WalletCardStatus value) {
  assert(::sync_pb::WalletMaskedCreditCard_WalletCardStatus_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional string name_on_card = 3;
inline bool WalletMaskedCreditCard::has_name_on_card() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WalletMaskedCreditCard::set_has_name_on_card() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WalletMaskedCreditCard::clear_has_name_on_card() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WalletMaskedCreditCard::clear_name_on_card() {
  if (name_on_card_ != &::google::protobuf::internal::GetEmptyString()) {
    name_on_card_->clear();
  }
  clear_has_name_on_card();
}
inline const ::std::string& WalletMaskedCreditCard::name_on_card() const {
  return *name_on_card_;
}
inline void WalletMaskedCreditCard::set_name_on_card(const ::std::string& value) {
  set_has_name_on_card();
  if (name_on_card_ == &::google::protobuf::internal::GetEmptyString()) {
    name_on_card_ = new ::std::string;
  }
  name_on_card_->assign(value);
}
inline void WalletMaskedCreditCard::set_name_on_card(const char* value) {
  set_has_name_on_card();
  if (name_on_card_ == &::google::protobuf::internal::GetEmptyString()) {
    name_on_card_ = new ::std::string;
  }
  name_on_card_->assign(value);
}
inline void WalletMaskedCreditCard::set_name_on_card(const char* value, size_t size) {
  set_has_name_on_card();
  if (name_on_card_ == &::google::protobuf::internal::GetEmptyString()) {
    name_on_card_ = new ::std::string;
  }
  name_on_card_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WalletMaskedCreditCard::mutable_name_on_card() {
  set_has_name_on_card();
  if (name_on_card_ == &::google::protobuf::internal::GetEmptyString()) {
    name_on_card_ = new ::std::string;
  }
  return name_on_card_;
}
inline ::std::string* WalletMaskedCreditCard::release_name_on_card() {
  clear_has_name_on_card();
  if (name_on_card_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = name_on_card_;
    name_on_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void WalletMaskedCreditCard::set_allocated_name_on_card(::std::string* name_on_card) {
  if (name_on_card_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_on_card_;
  }
  if (name_on_card) {
    set_has_name_on_card();
    name_on_card_ = name_on_card;
  } else {
    clear_has_name_on_card();
    name_on_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional .sync_pb.WalletMaskedCreditCard.WalletCardType type = 4;
inline bool WalletMaskedCreditCard::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WalletMaskedCreditCard::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WalletMaskedCreditCard::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WalletMaskedCreditCard::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::sync_pb::WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard::type() const {
  return static_cast< ::sync_pb::WalletMaskedCreditCard_WalletCardType >(type_);
}
inline void WalletMaskedCreditCard::set_type(::sync_pb::WalletMaskedCreditCard_WalletCardType value) {
  assert(::sync_pb::WalletMaskedCreditCard_WalletCardType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string last_four = 5;
inline bool WalletMaskedCreditCard::has_last_four() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WalletMaskedCreditCard::set_has_last_four() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WalletMaskedCreditCard::clear_has_last_four() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WalletMaskedCreditCard::clear_last_four() {
  if (last_four_ != &::google::protobuf::internal::GetEmptyString()) {
    last_four_->clear();
  }
  clear_has_last_four();
}
inline const ::std::string& WalletMaskedCreditCard::last_four() const {
  return *last_four_;
}
inline void WalletMaskedCreditCard::set_last_four(const ::std::string& value) {
  set_has_last_four();
  if (last_four_ == &::google::protobuf::internal::GetEmptyString()) {
    last_four_ = new ::std::string;
  }
  last_four_->assign(value);
}
inline void WalletMaskedCreditCard::set_last_four(const char* value) {
  set_has_last_four();
  if (last_four_ == &::google::protobuf::internal::GetEmptyString()) {
    last_four_ = new ::std::string;
  }
  last_four_->assign(value);
}
inline void WalletMaskedCreditCard::set_last_four(const char* value, size_t size) {
  set_has_last_four();
  if (last_four_ == &::google::protobuf::internal::GetEmptyString()) {
    last_four_ = new ::std::string;
  }
  last_four_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WalletMaskedCreditCard::mutable_last_four() {
  set_has_last_four();
  if (last_four_ == &::google::protobuf::internal::GetEmptyString()) {
    last_four_ = new ::std::string;
  }
  return last_four_;
}
inline ::std::string* WalletMaskedCreditCard::release_last_four() {
  clear_has_last_four();
  if (last_four_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = last_four_;
    last_four_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void WalletMaskedCreditCard::set_allocated_last_four(::std::string* last_four) {
  if (last_four_ != &::google::protobuf::internal::GetEmptyString()) {
    delete last_four_;
  }
  if (last_four) {
    set_has_last_four();
    last_four_ = last_four;
  } else {
    clear_has_last_four();
    last_four_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional int32 exp_month = 6;
inline bool WalletMaskedCreditCard::has_exp_month() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WalletMaskedCreditCard::set_has_exp_month() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WalletMaskedCreditCard::clear_has_exp_month() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WalletMaskedCreditCard::clear_exp_month() {
  exp_month_ = 0;
  clear_has_exp_month();
}
inline ::google::protobuf::int32 WalletMaskedCreditCard::exp_month() const {
  return exp_month_;
}
inline void WalletMaskedCreditCard::set_exp_month(::google::protobuf::int32 value) {
  set_has_exp_month();
  exp_month_ = value;
}

// optional int32 exp_year = 7;
inline bool WalletMaskedCreditCard::has_exp_year() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WalletMaskedCreditCard::set_has_exp_year() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WalletMaskedCreditCard::clear_has_exp_year() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WalletMaskedCreditCard::clear_exp_year() {
  exp_year_ = 0;
  clear_has_exp_year();
}
inline ::google::protobuf::int32 WalletMaskedCreditCard::exp_year() const {
  return exp_year_;
}
inline void WalletMaskedCreditCard::set_exp_year(::google::protobuf::int32 value) {
  set_has_exp_year();
  exp_year_ = value;
}

// -------------------------------------------------------------------

// WalletPostalAddress

// optional string id = 1;
inline bool WalletPostalAddress::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WalletPostalAddress::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WalletPostalAddress::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WalletPostalAddress::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyString()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& WalletPostalAddress::id() const {
  return *id_;
}
inline void WalletPostalAddress::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyString()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void WalletPostalAddress::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyString()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void WalletPostalAddress::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyString()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WalletPostalAddress::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyString()) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* WalletPostalAddress::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void WalletPostalAddress::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string recipient_name = 12;
inline bool WalletPostalAddress::has_recipient_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WalletPostalAddress::set_has_recipient_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WalletPostalAddress::clear_has_recipient_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WalletPostalAddress::clear_recipient_name() {
  if (recipient_name_ != &::google::protobuf::internal::GetEmptyString()) {
    recipient_name_->clear();
  }
  clear_has_recipient_name();
}
inline const ::std::string& WalletPostalAddress::recipient_name() const {
  return *recipient_name_;
}
inline void WalletPostalAddress::set_recipient_name(const ::std::string& value) {
  set_has_recipient_name();
  if (recipient_name_ == &::google::protobuf::internal::GetEmptyString()) {
    recipient_name_ = new ::std::string;
  }
  recipient_name_->assign(value);
}
inline void WalletPostalAddress::set_recipient_name(const char* value) {
  set_has_recipient_name();
  if (recipient_name_ == &::google::protobuf::internal::GetEmptyString()) {
    recipient_name_ = new ::std::string;
  }
  recipient_name_->assign(value);
}
inline void WalletPostalAddress::set_recipient_name(const char* value, size_t size) {
  set_has_recipient_name();
  if (recipient_name_ == &::google::protobuf::internal::GetEmptyString()) {
    recipient_name_ = new ::std::string;
  }
  recipient_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WalletPostalAddress::mutable_recipient_name() {
  set_has_recipient_name();
  if (recipient_name_ == &::google::protobuf::internal::GetEmptyString()) {
    recipient_name_ = new ::std::string;
  }
  return recipient_name_;
}
inline ::std::string* WalletPostalAddress::release_recipient_name() {
  clear_has_recipient_name();
  if (recipient_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = recipient_name_;
    recipient_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void WalletPostalAddress::set_allocated_recipient_name(::std::string* recipient_name) {
  if (recipient_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete recipient_name_;
  }
  if (recipient_name) {
    set_has_recipient_name();
    recipient_name_ = recipient_name;
  } else {
    clear_has_recipient_name();
    recipient_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string company_name = 2;
inline bool WalletPostalAddress::has_company_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WalletPostalAddress::set_has_company_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WalletPostalAddress::clear_has_company_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WalletPostalAddress::clear_company_name() {
  if (company_name_ != &::google::protobuf::internal::GetEmptyString()) {
    company_name_->clear();
  }
  clear_has_company_name();
}
inline const ::std::string& WalletPostalAddress::company_name() const {
  return *company_name_;
}
inline void WalletPostalAddress::set_company_name(const ::std::string& value) {
  set_has_company_name();
  if (company_name_ == &::google::protobuf::internal::GetEmptyString()) {
    company_name_ = new ::std::string;
  }
  company_name_->assign(value);
}
inline void WalletPostalAddress::set_company_name(const char* value) {
  set_has_company_name();
  if (company_name_ == &::google::protobuf::internal::GetEmptyString()) {
    company_name_ = new ::std::string;
  }
  company_name_->assign(value);
}
inline void WalletPostalAddress::set_company_name(const char* value, size_t size) {
  set_has_company_name();
  if (company_name_ == &::google::protobuf::internal::GetEmptyString()) {
    company_name_ = new ::std::string;
  }
  company_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WalletPostalAddress::mutable_company_name() {
  set_has_company_name();
  if (company_name_ == &::google::protobuf::internal::GetEmptyString()) {
    company_name_ = new ::std::string;
  }
  return company_name_;
}
inline ::std::string* WalletPostalAddress::release_company_name() {
  clear_has_company_name();
  if (company_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = company_name_;
    company_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void WalletPostalAddress::set_allocated_company_name(::std::string* company_name) {
  if (company_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete company_name_;
  }
  if (company_name) {
    set_has_company_name();
    company_name_ = company_name;
  } else {
    clear_has_company_name();
    company_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// repeated string street_address = 3;
inline int WalletPostalAddress::street_address_size() const {
  return street_address_.size();
}
inline void WalletPostalAddress::clear_street_address() {
  street_address_.Clear();
}
inline const ::std::string& WalletPostalAddress::street_address(int index) const {
  return street_address_.Get(index);
}
inline ::std::string* WalletPostalAddress::mutable_street_address(int index) {
  return street_address_.Mutable(index);
}
inline void WalletPostalAddress::set_street_address(int index, const ::std::string& value) {
  street_address_.Mutable(index)->assign(value);
}
inline void WalletPostalAddress::set_street_address(int index, const char* value) {
  street_address_.Mutable(index)->assign(value);
}
inline void WalletPostalAddress::set_street_address(int index, const char* value, size_t size) {
  street_address_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WalletPostalAddress::add_street_address() {
  return street_address_.Add();
}
inline void WalletPostalAddress::add_street_address(const ::std::string& value) {
  street_address_.Add()->assign(value);
}
inline void WalletPostalAddress::add_street_address(const char* value) {
  street_address_.Add()->assign(value);
}
inline void WalletPostalAddress::add_street_address(const char* value, size_t size) {
  street_address_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
WalletPostalAddress::street_address() const {
  return street_address_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
WalletPostalAddress::mutable_street_address() {
  return &street_address_;
}

// optional string address_1 = 4;
inline bool WalletPostalAddress::has_address_1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WalletPostalAddress::set_has_address_1() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WalletPostalAddress::clear_has_address_1() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WalletPostalAddress::clear_address_1() {
  if (address_1_ != &::google::protobuf::internal::GetEmptyString()) {
    address_1_->clear();
  }
  clear_has_address_1();
}
inline const ::std::string& WalletPostalAddress::address_1() const {
  return *address_1_;
}
inline void WalletPostalAddress::set_address_1(const ::std::string& value) {
  set_has_address_1();
  if (address_1_ == &::google::protobuf::internal::GetEmptyString()) {
    address_1_ = new ::std::string;
  }
  address_1_->assign(value);
}
inline void WalletPostalAddress::set_address_1(const char* value) {
  set_has_address_1();
  if (address_1_ == &::google::protobuf::internal::GetEmptyString()) {
    address_1_ = new ::std::string;
  }
  address_1_->assign(value);
}
inline void WalletPostalAddress::set_address_1(const char* value, size_t size) {
  set_has_address_1();
  if (address_1_ == &::google::protobuf::internal::GetEmptyString()) {
    address_1_ = new ::std::string;
  }
  address_1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WalletPostalAddress::mutable_address_1() {
  set_has_address_1();
  if (address_1_ == &::google::protobuf::internal::GetEmptyString()) {
    address_1_ = new ::std::string;
  }
  return address_1_;
}
inline ::std::string* WalletPostalAddress::release_address_1() {
  clear_has_address_1();
  if (address_1_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = address_1_;
    address_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void WalletPostalAddress::set_allocated_address_1(::std::string* address_1) {
  if (address_1_ != &::google::protobuf::internal::GetEmptyString()) {
    delete address_1_;
  }
  if (address_1) {
    set_has_address_1();
    address_1_ = address_1;
  } else {
    clear_has_address_1();
    address_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string address_2 = 5;
inline bool WalletPostalAddress::has_address_2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WalletPostalAddress::set_has_address_2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WalletPostalAddress::clear_has_address_2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WalletPostalAddress::clear_address_2() {
  if (address_2_ != &::google::protobuf::internal::GetEmptyString()) {
    address_2_->clear();
  }
  clear_has_address_2();
}
inline const ::std::string& WalletPostalAddress::address_2() const {
  return *address_2_;
}
inline void WalletPostalAddress::set_address_2(const ::std::string& value) {
  set_has_address_2();
  if (address_2_ == &::google::protobuf::internal::GetEmptyString()) {
    address_2_ = new ::std::string;
  }
  address_2_->assign(value);
}
inline void WalletPostalAddress::set_address_2(const char* value) {
  set_has_address_2();
  if (address_2_ == &::google::protobuf::internal::GetEmptyString()) {
    address_2_ = new ::std::string;
  }
  address_2_->assign(value);
}
inline void WalletPostalAddress::set_address_2(const char* value, size_t size) {
  set_has_address_2();
  if (address_2_ == &::google::protobuf::internal::GetEmptyString()) {
    address_2_ = new ::std::string;
  }
  address_2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WalletPostalAddress::mutable_address_2() {
  set_has_address_2();
  if (address_2_ == &::google::protobuf::internal::GetEmptyString()) {
    address_2_ = new ::std::string;
  }
  return address_2_;
}
inline ::std::string* WalletPostalAddress::release_address_2() {
  clear_has_address_2();
  if (address_2_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = address_2_;
    address_2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void WalletPostalAddress::set_allocated_address_2(::std::string* address_2) {
  if (address_2_ != &::google::protobuf::internal::GetEmptyString()) {
    delete address_2_;
  }
  if (address_2) {
    set_has_address_2();
    address_2_ = address_2;
  } else {
    clear_has_address_2();
    address_2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string address_3 = 6;
inline bool WalletPostalAddress::has_address_3() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WalletPostalAddress::set_has_address_3() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WalletPostalAddress::clear_has_address_3() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WalletPostalAddress::clear_address_3() {
  if (address_3_ != &::google::protobuf::internal::GetEmptyString()) {
    address_3_->clear();
  }
  clear_has_address_3();
}
inline const ::std::string& WalletPostalAddress::address_3() const {
  return *address_3_;
}
inline void WalletPostalAddress::set_address_3(const ::std::string& value) {
  set_has_address_3();
  if (address_3_ == &::google::protobuf::internal::GetEmptyString()) {
    address_3_ = new ::std::string;
  }
  address_3_->assign(value);
}
inline void WalletPostalAddress::set_address_3(const char* value) {
  set_has_address_3();
  if (address_3_ == &::google::protobuf::internal::GetEmptyString()) {
    address_3_ = new ::std::string;
  }
  address_3_->assign(value);
}
inline void WalletPostalAddress::set_address_3(const char* value, size_t size) {
  set_has_address_3();
  if (address_3_ == &::google::protobuf::internal::GetEmptyString()) {
    address_3_ = new ::std::string;
  }
  address_3_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WalletPostalAddress::mutable_address_3() {
  set_has_address_3();
  if (address_3_ == &::google::protobuf::internal::GetEmptyString()) {
    address_3_ = new ::std::string;
  }
  return address_3_;
}
inline ::std::string* WalletPostalAddress::release_address_3() {
  clear_has_address_3();
  if (address_3_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = address_3_;
    address_3_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void WalletPostalAddress::set_allocated_address_3(::std::string* address_3) {
  if (address_3_ != &::google::protobuf::internal::GetEmptyString()) {
    delete address_3_;
  }
  if (address_3) {
    set_has_address_3();
    address_3_ = address_3;
  } else {
    clear_has_address_3();
    address_3_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string address_4 = 7;
inline bool WalletPostalAddress::has_address_4() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void WalletPostalAddress::set_has_address_4() {
  _has_bits_[0] |= 0x00000080u;
}
inline void WalletPostalAddress::clear_has_address_4() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void WalletPostalAddress::clear_address_4() {
  if (address_4_ != &::google::protobuf::internal::GetEmptyString()) {
    address_4_->clear();
  }
  clear_has_address_4();
}
inline const ::std::string& WalletPostalAddress::address_4() const {
  return *address_4_;
}
inline void WalletPostalAddress::set_address_4(const ::std::string& value) {
  set_has_address_4();
  if (address_4_ == &::google::protobuf::internal::GetEmptyString()) {
    address_4_ = new ::std::string;
  }
  address_4_->assign(value);
}
inline void WalletPostalAddress::set_address_4(const char* value) {
  set_has_address_4();
  if (address_4_ == &::google::protobuf::internal::GetEmptyString()) {
    address_4_ = new ::std::string;
  }
  address_4_->assign(value);
}
inline void WalletPostalAddress::set_address_4(const char* value, size_t size) {
  set_has_address_4();
  if (address_4_ == &::google::protobuf::internal::GetEmptyString()) {
    address_4_ = new ::std::string;
  }
  address_4_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WalletPostalAddress::mutable_address_4() {
  set_has_address_4();
  if (address_4_ == &::google::protobuf::internal::GetEmptyString()) {
    address_4_ = new ::std::string;
  }
  return address_4_;
}
inline ::std::string* WalletPostalAddress::release_address_4() {
  clear_has_address_4();
  if (address_4_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = address_4_;
    address_4_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void WalletPostalAddress::set_allocated_address_4(::std::string* address_4) {
  if (address_4_ != &::google::protobuf::internal::GetEmptyString()) {
    delete address_4_;
  }
  if (address_4) {
    set_has_address_4();
    address_4_ = address_4;
  } else {
    clear_has_address_4();
    address_4_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string postal_code = 8;
inline bool WalletPostalAddress::has_postal_code() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void WalletPostalAddress::set_has_postal_code() {
  _has_bits_[0] |= 0x00000100u;
}
inline void WalletPostalAddress::clear_has_postal_code() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void WalletPostalAddress::clear_postal_code() {
  if (postal_code_ != &::google::protobuf::internal::GetEmptyString()) {
    postal_code_->clear();
  }
  clear_has_postal_code();
}
inline const ::std::string& WalletPostalAddress::postal_code() const {
  return *postal_code_;
}
inline void WalletPostalAddress::set_postal_code(const ::std::string& value) {
  set_has_postal_code();
  if (postal_code_ == &::google::protobuf::internal::GetEmptyString()) {
    postal_code_ = new ::std::string;
  }
  postal_code_->assign(value);
}
inline void WalletPostalAddress::set_postal_code(const char* value) {
  set_has_postal_code();
  if (postal_code_ == &::google::protobuf::internal::GetEmptyString()) {
    postal_code_ = new ::std::string;
  }
  postal_code_->assign(value);
}
inline void WalletPostalAddress::set_postal_code(const char* value, size_t size) {
  set_has_postal_code();
  if (postal_code_ == &::google::protobuf::internal::GetEmptyString()) {
    postal_code_ = new ::std::string;
  }
  postal_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WalletPostalAddress::mutable_postal_code() {
  set_has_postal_code();
  if (postal_code_ == &::google::protobuf::internal::GetEmptyString()) {
    postal_code_ = new ::std::string;
  }
  return postal_code_;
}
inline ::std::string* WalletPostalAddress::release_postal_code() {
  clear_has_postal_code();
  if (postal_code_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = postal_code_;
    postal_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void WalletPostalAddress::set_allocated_postal_code(::std::string* postal_code) {
  if (postal_code_ != &::google::protobuf::internal::GetEmptyString()) {
    delete postal_code_;
  }
  if (postal_code) {
    set_has_postal_code();
    postal_code_ = postal_code;
  } else {
    clear_has_postal_code();
    postal_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string sorting_code = 9;
inline bool WalletPostalAddress::has_sorting_code() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void WalletPostalAddress::set_has_sorting_code() {
  _has_bits_[0] |= 0x00000200u;
}
inline void WalletPostalAddress::clear_has_sorting_code() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void WalletPostalAddress::clear_sorting_code() {
  if (sorting_code_ != &::google::protobuf::internal::GetEmptyString()) {
    sorting_code_->clear();
  }
  clear_has_sorting_code();
}
inline const ::std::string& WalletPostalAddress::sorting_code() const {
  return *sorting_code_;
}
inline void WalletPostalAddress::set_sorting_code(const ::std::string& value) {
  set_has_sorting_code();
  if (sorting_code_ == &::google::protobuf::internal::GetEmptyString()) {
    sorting_code_ = new ::std::string;
  }
  sorting_code_->assign(value);
}
inline void WalletPostalAddress::set_sorting_code(const char* value) {
  set_has_sorting_code();
  if (sorting_code_ == &::google::protobuf::internal::GetEmptyString()) {
    sorting_code_ = new ::std::string;
  }
  sorting_code_->assign(value);
}
inline void WalletPostalAddress::set_sorting_code(const char* value, size_t size) {
  set_has_sorting_code();
  if (sorting_code_ == &::google::protobuf::internal::GetEmptyString()) {
    sorting_code_ = new ::std::string;
  }
  sorting_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WalletPostalAddress::mutable_sorting_code() {
  set_has_sorting_code();
  if (sorting_code_ == &::google::protobuf::internal::GetEmptyString()) {
    sorting_code_ = new ::std::string;
  }
  return sorting_code_;
}
inline ::std::string* WalletPostalAddress::release_sorting_code() {
  clear_has_sorting_code();
  if (sorting_code_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = sorting_code_;
    sorting_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void WalletPostalAddress::set_allocated_sorting_code(::std::string* sorting_code) {
  if (sorting_code_ != &::google::protobuf::internal::GetEmptyString()) {
    delete sorting_code_;
  }
  if (sorting_code) {
    set_has_sorting_code();
    sorting_code_ = sorting_code;
  } else {
    clear_has_sorting_code();
    sorting_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string country_code = 10;
inline bool WalletPostalAddress::has_country_code() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void WalletPostalAddress::set_has_country_code() {
  _has_bits_[0] |= 0x00000400u;
}
inline void WalletPostalAddress::clear_has_country_code() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void WalletPostalAddress::clear_country_code() {
  if (country_code_ != &::google::protobuf::internal::GetEmptyString()) {
    country_code_->clear();
  }
  clear_has_country_code();
}
inline const ::std::string& WalletPostalAddress::country_code() const {
  return *country_code_;
}
inline void WalletPostalAddress::set_country_code(const ::std::string& value) {
  set_has_country_code();
  if (country_code_ == &::google::protobuf::internal::GetEmptyString()) {
    country_code_ = new ::std::string;
  }
  country_code_->assign(value);
}
inline void WalletPostalAddress::set_country_code(const char* value) {
  set_has_country_code();
  if (country_code_ == &::google::protobuf::internal::GetEmptyString()) {
    country_code_ = new ::std::string;
  }
  country_code_->assign(value);
}
inline void WalletPostalAddress::set_country_code(const char* value, size_t size) {
  set_has_country_code();
  if (country_code_ == &::google::protobuf::internal::GetEmptyString()) {
    country_code_ = new ::std::string;
  }
  country_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WalletPostalAddress::mutable_country_code() {
  set_has_country_code();
  if (country_code_ == &::google::protobuf::internal::GetEmptyString()) {
    country_code_ = new ::std::string;
  }
  return country_code_;
}
inline ::std::string* WalletPostalAddress::release_country_code() {
  clear_has_country_code();
  if (country_code_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = country_code_;
    country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void WalletPostalAddress::set_allocated_country_code(::std::string* country_code) {
  if (country_code_ != &::google::protobuf::internal::GetEmptyString()) {
    delete country_code_;
  }
  if (country_code) {
    set_has_country_code();
    country_code_ = country_code;
  } else {
    clear_has_country_code();
    country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string language_code = 11;
inline bool WalletPostalAddress::has_language_code() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void WalletPostalAddress::set_has_language_code() {
  _has_bits_[0] |= 0x00000800u;
}
inline void WalletPostalAddress::clear_has_language_code() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void WalletPostalAddress::clear_language_code() {
  if (language_code_ != &::google::protobuf::internal::GetEmptyString()) {
    language_code_->clear();
  }
  clear_has_language_code();
}
inline const ::std::string& WalletPostalAddress::language_code() const {
  return *language_code_;
}
inline void WalletPostalAddress::set_language_code(const ::std::string& value) {
  set_has_language_code();
  if (language_code_ == &::google::protobuf::internal::GetEmptyString()) {
    language_code_ = new ::std::string;
  }
  language_code_->assign(value);
}
inline void WalletPostalAddress::set_language_code(const char* value) {
  set_has_language_code();
  if (language_code_ == &::google::protobuf::internal::GetEmptyString()) {
    language_code_ = new ::std::string;
  }
  language_code_->assign(value);
}
inline void WalletPostalAddress::set_language_code(const char* value, size_t size) {
  set_has_language_code();
  if (language_code_ == &::google::protobuf::internal::GetEmptyString()) {
    language_code_ = new ::std::string;
  }
  language_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WalletPostalAddress::mutable_language_code() {
  set_has_language_code();
  if (language_code_ == &::google::protobuf::internal::GetEmptyString()) {
    language_code_ = new ::std::string;
  }
  return language_code_;
}
inline ::std::string* WalletPostalAddress::release_language_code() {
  clear_has_language_code();
  if (language_code_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = language_code_;
    language_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void WalletPostalAddress::set_allocated_language_code(::std::string* language_code) {
  if (language_code_ != &::google::protobuf::internal::GetEmptyString()) {
    delete language_code_;
  }
  if (language_code) {
    set_has_language_code();
    language_code_ = language_code;
  } else {
    clear_has_language_code();
    language_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string phone_number = 13;
inline bool WalletPostalAddress::has_phone_number() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void WalletPostalAddress::set_has_phone_number() {
  _has_bits_[0] |= 0x00001000u;
}
inline void WalletPostalAddress::clear_has_phone_number() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void WalletPostalAddress::clear_phone_number() {
  if (phone_number_ != &::google::protobuf::internal::GetEmptyString()) {
    phone_number_->clear();
  }
  clear_has_phone_number();
}
inline const ::std::string& WalletPostalAddress::phone_number() const {
  return *phone_number_;
}
inline void WalletPostalAddress::set_phone_number(const ::std::string& value) {
  set_has_phone_number();
  if (phone_number_ == &::google::protobuf::internal::GetEmptyString()) {
    phone_number_ = new ::std::string;
  }
  phone_number_->assign(value);
}
inline void WalletPostalAddress::set_phone_number(const char* value) {
  set_has_phone_number();
  if (phone_number_ == &::google::protobuf::internal::GetEmptyString()) {
    phone_number_ = new ::std::string;
  }
  phone_number_->assign(value);
}
inline void WalletPostalAddress::set_phone_number(const char* value, size_t size) {
  set_has_phone_number();
  if (phone_number_ == &::google::protobuf::internal::GetEmptyString()) {
    phone_number_ = new ::std::string;
  }
  phone_number_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WalletPostalAddress::mutable_phone_number() {
  set_has_phone_number();
  if (phone_number_ == &::google::protobuf::internal::GetEmptyString()) {
    phone_number_ = new ::std::string;
  }
  return phone_number_;
}
inline ::std::string* WalletPostalAddress::release_phone_number() {
  clear_has_phone_number();
  if (phone_number_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = phone_number_;
    phone_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void WalletPostalAddress::set_allocated_phone_number(::std::string* phone_number) {
  if (phone_number_ != &::google::protobuf::internal::GetEmptyString()) {
    delete phone_number_;
  }
  if (phone_number) {
    set_has_phone_number();
    phone_number_ = phone_number;
  } else {
    clear_has_phone_number();
    phone_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// AutofillWalletSpecifics

// optional .sync_pb.AutofillWalletSpecifics.WalletInfoType type = 1;
inline bool AutofillWalletSpecifics::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AutofillWalletSpecifics::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AutofillWalletSpecifics::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AutofillWalletSpecifics::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::sync_pb::AutofillWalletSpecifics_WalletInfoType AutofillWalletSpecifics::type() const {
  return static_cast< ::sync_pb::AutofillWalletSpecifics_WalletInfoType >(type_);
}
inline void AutofillWalletSpecifics::set_type(::sync_pb::AutofillWalletSpecifics_WalletInfoType value) {
  assert(::sync_pb::AutofillWalletSpecifics_WalletInfoType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .sync_pb.WalletMaskedCreditCard masked_card = 2;
inline bool AutofillWalletSpecifics::has_masked_card() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AutofillWalletSpecifics::set_has_masked_card() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AutofillWalletSpecifics::clear_has_masked_card() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AutofillWalletSpecifics::clear_masked_card() {
  if (masked_card_ != NULL) masked_card_->::sync_pb::WalletMaskedCreditCard::Clear();
  clear_has_masked_card();
}
inline const ::sync_pb::WalletMaskedCreditCard& AutofillWalletSpecifics::masked_card() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return masked_card_ != NULL ? *masked_card_ : *default_instance().masked_card_;
#else
  return masked_card_ != NULL ? *masked_card_ : *default_instance_->masked_card_;
#endif
}
inline ::sync_pb::WalletMaskedCreditCard* AutofillWalletSpecifics::mutable_masked_card() {
  set_has_masked_card();
  if (masked_card_ == NULL) masked_card_ = new ::sync_pb::WalletMaskedCreditCard;
  return masked_card_;
}
inline ::sync_pb::WalletMaskedCreditCard* AutofillWalletSpecifics::release_masked_card() {
  clear_has_masked_card();
  ::sync_pb::WalletMaskedCreditCard* temp = masked_card_;
  masked_card_ = NULL;
  return temp;
}
inline void AutofillWalletSpecifics::set_allocated_masked_card(::sync_pb::WalletMaskedCreditCard* masked_card) {
  delete masked_card_;
  masked_card_ = masked_card;
  if (masked_card) {
    set_has_masked_card();
  } else {
    clear_has_masked_card();
  }
}

// optional .sync_pb.WalletPostalAddress address = 3;
inline bool AutofillWalletSpecifics::has_address() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AutofillWalletSpecifics::set_has_address() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AutofillWalletSpecifics::clear_has_address() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AutofillWalletSpecifics::clear_address() {
  if (address_ != NULL) address_->::sync_pb::WalletPostalAddress::Clear();
  clear_has_address();
}
inline const ::sync_pb::WalletPostalAddress& AutofillWalletSpecifics::address() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return address_ != NULL ? *address_ : *default_instance().address_;
#else
  return address_ != NULL ? *address_ : *default_instance_->address_;
#endif
}
inline ::sync_pb::WalletPostalAddress* AutofillWalletSpecifics::mutable_address() {
  set_has_address();
  if (address_ == NULL) address_ = new ::sync_pb::WalletPostalAddress;
  return address_;
}
inline ::sync_pb::WalletPostalAddress* AutofillWalletSpecifics::release_address() {
  clear_has_address();
  ::sync_pb::WalletPostalAddress* temp = address_;
  address_ = NULL;
  return temp;
}
inline void AutofillWalletSpecifics::set_allocated_address(::sync_pb::WalletPostalAddress* address) {
  delete address_;
  address_ = address;
  if (address) {
    set_has_address();
  } else {
    clear_has_address();
  }
}

// -------------------------------------------------------------------

// WalletMetadataSpecifics

// optional .sync_pb.WalletMetadataSpecifics.Type type = 1;
inline bool WalletMetadataSpecifics::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WalletMetadataSpecifics::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WalletMetadataSpecifics::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WalletMetadataSpecifics::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::sync_pb::WalletMetadataSpecifics_Type WalletMetadataSpecifics::type() const {
  return static_cast< ::sync_pb::WalletMetadataSpecifics_Type >(type_);
}
inline void WalletMetadataSpecifics::set_type(::sync_pb::WalletMetadataSpecifics_Type value) {
  assert(::sync_pb::WalletMetadataSpecifics_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string id = 2;
inline bool WalletMetadataSpecifics::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WalletMetadataSpecifics::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WalletMetadataSpecifics::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WalletMetadataSpecifics::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyString()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& WalletMetadataSpecifics::id() const {
  return *id_;
}
inline void WalletMetadataSpecifics::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyString()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void WalletMetadataSpecifics::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyString()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void WalletMetadataSpecifics::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyString()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WalletMetadataSpecifics::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyString()) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* WalletMetadataSpecifics::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void WalletMetadataSpecifics::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional int64 use_count = 3;
inline bool WalletMetadataSpecifics::has_use_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WalletMetadataSpecifics::set_has_use_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WalletMetadataSpecifics::clear_has_use_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WalletMetadataSpecifics::clear_use_count() {
  use_count_ = GOOGLE_LONGLONG(0);
  clear_has_use_count();
}
inline ::google::protobuf::int64 WalletMetadataSpecifics::use_count() const {
  return use_count_;
}
inline void WalletMetadataSpecifics::set_use_count(::google::protobuf::int64 value) {
  set_has_use_count();
  use_count_ = value;
}

// optional int64 use_date = 4;
inline bool WalletMetadataSpecifics::has_use_date() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WalletMetadataSpecifics::set_has_use_date() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WalletMetadataSpecifics::clear_has_use_date() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WalletMetadataSpecifics::clear_use_date() {
  use_date_ = GOOGLE_LONGLONG(0);
  clear_has_use_date();
}
inline ::google::protobuf::int64 WalletMetadataSpecifics::use_date() const {
  return use_date_;
}
inline void WalletMetadataSpecifics::set_use_date(::google::protobuf::int64 value) {
  set_has_use_date();
  use_date_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_autofill_5fspecifics_2eproto__INCLUDED
