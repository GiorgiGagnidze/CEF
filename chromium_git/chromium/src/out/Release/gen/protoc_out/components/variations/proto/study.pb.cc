// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: study.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "study.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace variations {

void protobuf_ShutdownFile_study_2eproto() {
  delete Study::default_instance_;
  delete Study_Experiment::default_instance_;
  delete Study_Experiment_Param::default_instance_;
  delete Study_Experiment_FeatureAssociation::default_instance_;
  delete Study_Experiment_OverrideUIString::default_instance_;
  delete Study_Filter::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_study_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_study_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  Study::default_instance_ = new Study();
  Study_Experiment::default_instance_ = new Study_Experiment();
  Study_Experiment_Param::default_instance_ = new Study_Experiment_Param();
  Study_Experiment_FeatureAssociation::default_instance_ = new Study_Experiment_FeatureAssociation();
  Study_Experiment_OverrideUIString::default_instance_ = new Study_Experiment_OverrideUIString();
  Study_Filter::default_instance_ = new Study_Filter();
  Study::default_instance_->InitAsDefaultInstance();
  Study_Experiment::default_instance_->InitAsDefaultInstance();
  Study_Experiment_Param::default_instance_->InitAsDefaultInstance();
  Study_Experiment_FeatureAssociation::default_instance_->InitAsDefaultInstance();
  Study_Experiment_OverrideUIString::default_instance_->InitAsDefaultInstance();
  Study_Filter::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_study_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_study_2eproto_once_);
void protobuf_AddDesc_study_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_study_2eproto_once_,
                 &protobuf_AddDesc_study_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_study_2eproto {
  StaticDescriptorInitializer_study_2eproto() {
    protobuf_AddDesc_study_2eproto();
  }
} static_descriptor_initializer_study_2eproto_;
#endif

// ===================================================================

bool Study_Consistency_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Study_Consistency Study::SESSION;
const Study_Consistency Study::PERMANENT;
const Study_Consistency Study::Consistency_MIN;
const Study_Consistency Study::Consistency_MAX;
const int Study::Consistency_ARRAYSIZE;
#endif  // _MSC_VER
bool Study_Channel_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Study_Channel Study::UNKNOWN;
const Study_Channel Study::CANARY;
const Study_Channel Study::DEV;
const Study_Channel Study::BETA;
const Study_Channel Study::STABLE;
const Study_Channel Study::Channel_MIN;
const Study_Channel Study::Channel_MAX;
const int Study::Channel_ARRAYSIZE;
#endif  // _MSC_VER
bool Study_Platform_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Study_Platform Study::PLATFORM_WINDOWS;
const Study_Platform Study::PLATFORM_MAC;
const Study_Platform Study::PLATFORM_LINUX;
const Study_Platform Study::PLATFORM_CHROMEOS;
const Study_Platform Study::PLATFORM_ANDROID;
const Study_Platform Study::PLATFORM_IOS;
const Study_Platform Study::Platform_MIN;
const Study_Platform Study::Platform_MAX;
const int Study::Platform_ARRAYSIZE;
#endif  // _MSC_VER
bool Study_FormFactor_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Study_FormFactor Study::DESKTOP;
const Study_FormFactor Study::PHONE;
const Study_FormFactor Study::TABLET;
const Study_FormFactor Study::FormFactor_MIN;
const Study_FormFactor Study::FormFactor_MAX;
const int Study::FormFactor_ARRAYSIZE;
#endif  // _MSC_VER
bool Study_ActivationType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Study_ActivationType Study::ACTIVATION_EXPLICIT;
const Study_ActivationType Study::ACTIVATION_AUTO;
const Study_ActivationType Study::ActivationType_MIN;
const Study_ActivationType Study::ActivationType_MAX;
const int Study::ActivationType_ARRAYSIZE;
#endif  // _MSC_VER
bool Study_Experiment_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Study_Experiment_Type Study_Experiment::NORMAL;
const Study_Experiment_Type Study_Experiment::IGNORE_CHANGE;
const Study_Experiment_Type Study_Experiment::KILL_BEST_EFFORT;
const Study_Experiment_Type Study_Experiment::KILL_CRITICAL;
const Study_Experiment_Type Study_Experiment::Type_MIN;
const Study_Experiment_Type Study_Experiment::Type_MAX;
const int Study_Experiment::Type_ARRAYSIZE;
#endif  // _MSC_VER
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Study_Experiment_Param::kNameFieldNumber;
const int Study_Experiment_Param::kValueFieldNumber;
#endif  // !_MSC_VER

Study_Experiment_Param::Study_Experiment_Param()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Study_Experiment_Param::InitAsDefaultInstance() {
}

Study_Experiment_Param::Study_Experiment_Param(const Study_Experiment_Param& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Study_Experiment_Param::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Study_Experiment_Param::~Study_Experiment_Param() {
  SharedDtor();
}

void Study_Experiment_Param::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyString()) {
    delete value_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Study_Experiment_Param::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Study_Experiment_Param& Study_Experiment_Param::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_study_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_study_2eproto();
#endif
  return *default_instance_;
}

Study_Experiment_Param* Study_Experiment_Param::default_instance_ = NULL;

Study_Experiment_Param* Study_Experiment_Param::New() const {
  return new Study_Experiment_Param;
}

void Study_Experiment_Param::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyString()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Study_Experiment_Param::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Study_Experiment_Param::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

}

int Study_Experiment_Param::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Study_Experiment_Param::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Study_Experiment_Param*>(&from));
}

void Study_Experiment_Param::MergeFrom(const Study_Experiment_Param& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
}

void Study_Experiment_Param::CopyFrom(const Study_Experiment_Param& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Study_Experiment_Param::IsInitialized() const {

  return true;
}

void Study_Experiment_Param::Swap(Study_Experiment_Param* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Study_Experiment_Param::GetTypeName() const {
  return "variations.Study.Experiment.Param";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Study_Experiment_FeatureAssociation::kEnableFeatureFieldNumber;
const int Study_Experiment_FeatureAssociation::kDisableFeatureFieldNumber;
const int Study_Experiment_FeatureAssociation::kForcingFeatureOnFieldNumber;
const int Study_Experiment_FeatureAssociation::kForcingFeatureOffFieldNumber;
#endif  // !_MSC_VER

Study_Experiment_FeatureAssociation::Study_Experiment_FeatureAssociation()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Study_Experiment_FeatureAssociation::InitAsDefaultInstance() {
}

Study_Experiment_FeatureAssociation::Study_Experiment_FeatureAssociation(const Study_Experiment_FeatureAssociation& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Study_Experiment_FeatureAssociation::SharedCtor() {
  _cached_size_ = 0;
  forcing_feature_on_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  forcing_feature_off_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Study_Experiment_FeatureAssociation::~Study_Experiment_FeatureAssociation() {
  SharedDtor();
}

void Study_Experiment_FeatureAssociation::SharedDtor() {
  if (forcing_feature_on_ != &::google::protobuf::internal::GetEmptyString()) {
    delete forcing_feature_on_;
  }
  if (forcing_feature_off_ != &::google::protobuf::internal::GetEmptyString()) {
    delete forcing_feature_off_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Study_Experiment_FeatureAssociation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Study_Experiment_FeatureAssociation& Study_Experiment_FeatureAssociation::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_study_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_study_2eproto();
#endif
  return *default_instance_;
}

Study_Experiment_FeatureAssociation* Study_Experiment_FeatureAssociation::default_instance_ = NULL;

Study_Experiment_FeatureAssociation* Study_Experiment_FeatureAssociation::New() const {
  return new Study_Experiment_FeatureAssociation;
}

void Study_Experiment_FeatureAssociation::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_forcing_feature_on()) {
      if (forcing_feature_on_ != &::google::protobuf::internal::GetEmptyString()) {
        forcing_feature_on_->clear();
      }
    }
    if (has_forcing_feature_off()) {
      if (forcing_feature_off_ != &::google::protobuf::internal::GetEmptyString()) {
        forcing_feature_off_->clear();
      }
    }
  }
  enable_feature_.Clear();
  disable_feature_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Study_Experiment_FeatureAssociation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string enable_feature = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enable_feature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_enable_feature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_enable_feature;
        if (input->ExpectTag(18)) goto parse_disable_feature;
        break;
      }

      // repeated string disable_feature = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_disable_feature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_disable_feature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_disable_feature;
        if (input->ExpectTag(26)) goto parse_forcing_feature_on;
        break;
      }

      // optional string forcing_feature_on = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_forcing_feature_on:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_forcing_feature_on()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_forcing_feature_off;
        break;
      }

      // optional string forcing_feature_off = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_forcing_feature_off:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_forcing_feature_off()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Study_Experiment_FeatureAssociation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string enable_feature = 1;
  for (int i = 0; i < this->enable_feature_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->enable_feature(i), output);
  }

  // repeated string disable_feature = 2;
  for (int i = 0; i < this->disable_feature_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->disable_feature(i), output);
  }

  // optional string forcing_feature_on = 3;
  if (has_forcing_feature_on()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->forcing_feature_on(), output);
  }

  // optional string forcing_feature_off = 4;
  if (has_forcing_feature_off()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->forcing_feature_off(), output);
  }

}

int Study_Experiment_FeatureAssociation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional string forcing_feature_on = 3;
    if (has_forcing_feature_on()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->forcing_feature_on());
    }

    // optional string forcing_feature_off = 4;
    if (has_forcing_feature_off()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->forcing_feature_off());
    }

  }
  // repeated string enable_feature = 1;
  total_size += 1 * this->enable_feature_size();
  for (int i = 0; i < this->enable_feature_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->enable_feature(i));
  }

  // repeated string disable_feature = 2;
  total_size += 1 * this->disable_feature_size();
  for (int i = 0; i < this->disable_feature_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->disable_feature(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Study_Experiment_FeatureAssociation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Study_Experiment_FeatureAssociation*>(&from));
}

void Study_Experiment_FeatureAssociation::MergeFrom(const Study_Experiment_FeatureAssociation& from) {
  GOOGLE_CHECK_NE(&from, this);
  enable_feature_.MergeFrom(from.enable_feature_);
  disable_feature_.MergeFrom(from.disable_feature_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_forcing_feature_on()) {
      set_forcing_feature_on(from.forcing_feature_on());
    }
    if (from.has_forcing_feature_off()) {
      set_forcing_feature_off(from.forcing_feature_off());
    }
  }
}

void Study_Experiment_FeatureAssociation::CopyFrom(const Study_Experiment_FeatureAssociation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Study_Experiment_FeatureAssociation::IsInitialized() const {

  return true;
}

void Study_Experiment_FeatureAssociation::Swap(Study_Experiment_FeatureAssociation* other) {
  if (other != this) {
    enable_feature_.Swap(&other->enable_feature_);
    disable_feature_.Swap(&other->disable_feature_);
    std::swap(forcing_feature_on_, other->forcing_feature_on_);
    std::swap(forcing_feature_off_, other->forcing_feature_off_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Study_Experiment_FeatureAssociation::GetTypeName() const {
  return "variations.Study.Experiment.FeatureAssociation";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Study_Experiment_OverrideUIString::kNameHashFieldNumber;
const int Study_Experiment_OverrideUIString::kValueFieldNumber;
#endif  // !_MSC_VER

Study_Experiment_OverrideUIString::Study_Experiment_OverrideUIString()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Study_Experiment_OverrideUIString::InitAsDefaultInstance() {
}

Study_Experiment_OverrideUIString::Study_Experiment_OverrideUIString(const Study_Experiment_OverrideUIString& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Study_Experiment_OverrideUIString::SharedCtor() {
  _cached_size_ = 0;
  name_hash_ = 0u;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Study_Experiment_OverrideUIString::~Study_Experiment_OverrideUIString() {
  SharedDtor();
}

void Study_Experiment_OverrideUIString::SharedDtor() {
  if (value_ != &::google::protobuf::internal::GetEmptyString()) {
    delete value_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Study_Experiment_OverrideUIString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Study_Experiment_OverrideUIString& Study_Experiment_OverrideUIString::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_study_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_study_2eproto();
#endif
  return *default_instance_;
}

Study_Experiment_OverrideUIString* Study_Experiment_OverrideUIString::default_instance_ = NULL;

Study_Experiment_OverrideUIString* Study_Experiment_OverrideUIString::New() const {
  return new Study_Experiment_OverrideUIString;
}

void Study_Experiment_OverrideUIString::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    name_hash_ = 0u;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyString()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Study_Experiment_OverrideUIString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 name_hash = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &name_hash_)));
          set_has_name_hash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Study_Experiment_OverrideUIString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 name_hash = 1;
  if (has_name_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->name_hash(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

}

int Study_Experiment_OverrideUIString::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 name_hash = 1;
    if (has_name_hash()) {
      total_size += 1 + 4;
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Study_Experiment_OverrideUIString::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Study_Experiment_OverrideUIString*>(&from));
}

void Study_Experiment_OverrideUIString::MergeFrom(const Study_Experiment_OverrideUIString& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name_hash()) {
      set_name_hash(from.name_hash());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
}

void Study_Experiment_OverrideUIString::CopyFrom(const Study_Experiment_OverrideUIString& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Study_Experiment_OverrideUIString::IsInitialized() const {

  return true;
}

void Study_Experiment_OverrideUIString::Swap(Study_Experiment_OverrideUIString* other) {
  if (other != this) {
    std::swap(name_hash_, other->name_hash_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Study_Experiment_OverrideUIString::GetTypeName() const {
  return "variations.Study.Experiment.OverrideUIString";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Study_Experiment::kNameFieldNumber;
const int Study_Experiment::kProbabilityWeightFieldNumber;
const int Study_Experiment::kGoogleWebExperimentIdFieldNumber;
const int Study_Experiment::kGoogleWebTriggerExperimentIdFieldNumber;
const int Study_Experiment::kGoogleUpdateExperimentIdFieldNumber;
const int Study_Experiment::kChromeSyncExperimentIdFieldNumber;
const int Study_Experiment::kFeatureAssociationFieldNumber;
const int Study_Experiment::kForcingFlagFieldNumber;
const int Study_Experiment::kParamFieldNumber;
const int Study_Experiment::kTypeFieldNumber;
const int Study_Experiment::kOverrideUiStringFieldNumber;
#endif  // !_MSC_VER

Study_Experiment::Study_Experiment()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Study_Experiment::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  feature_association_ = const_cast< ::variations::Study_Experiment_FeatureAssociation*>(
      ::variations::Study_Experiment_FeatureAssociation::internal_default_instance());
#else
  feature_association_ = const_cast< ::variations::Study_Experiment_FeatureAssociation*>(&::variations::Study_Experiment_FeatureAssociation::default_instance());
#endif
}

Study_Experiment::Study_Experiment(const Study_Experiment& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Study_Experiment::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  probability_weight_ = 0u;
  google_web_experiment_id_ = GOOGLE_ULONGLONG(0);
  google_web_trigger_experiment_id_ = GOOGLE_ULONGLONG(0);
  google_update_experiment_id_ = GOOGLE_ULONGLONG(0);
  chrome_sync_experiment_id_ = GOOGLE_ULONGLONG(0);
  feature_association_ = NULL;
  forcing_flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Study_Experiment::~Study_Experiment() {
  SharedDtor();
}

void Study_Experiment::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (forcing_flag_ != &::google::protobuf::internal::GetEmptyString()) {
    delete forcing_flag_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete feature_association_;
  }
}

void Study_Experiment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Study_Experiment& Study_Experiment::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_study_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_study_2eproto();
#endif
  return *default_instance_;
}

Study_Experiment* Study_Experiment::default_instance_ = NULL;

Study_Experiment* Study_Experiment::New() const {
  return new Study_Experiment;
}

void Study_Experiment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
    probability_weight_ = 0u;
    google_web_experiment_id_ = GOOGLE_ULONGLONG(0);
    google_web_trigger_experiment_id_ = GOOGLE_ULONGLONG(0);
    google_update_experiment_id_ = GOOGLE_ULONGLONG(0);
    chrome_sync_experiment_id_ = GOOGLE_ULONGLONG(0);
    if (has_feature_association()) {
      if (feature_association_ != NULL) feature_association_->::variations::Study_Experiment_FeatureAssociation::Clear();
    }
    if (has_forcing_flag()) {
      if (forcing_flag_ != &::google::protobuf::internal::GetEmptyString()) {
        forcing_flag_->clear();
      }
    }
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    type_ = 0;
  }
  param_.Clear();
  override_ui_string_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Study_Experiment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_probability_weight;
        break;
      }

      // required uint32 probability_weight = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_probability_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &probability_weight_)));
          set_has_probability_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_google_web_experiment_id;
        break;
      }

      // optional uint64 google_web_experiment_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_google_web_experiment_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &google_web_experiment_id_)));
          set_has_google_web_experiment_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_google_update_experiment_id;
        break;
      }

      // optional uint64 google_update_experiment_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_google_update_experiment_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &google_update_experiment_id_)));
          set_has_google_update_experiment_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_forcing_flag;
        break;
      }

      // optional string forcing_flag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_forcing_flag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_forcing_flag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_param;
        break;
      }

      // repeated .variations.Study.Experiment.Param param = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_param;
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }

      // optional .variations.Study.Experiment.Type type = 7 [default = NORMAL];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::variations::Study_Experiment_Type_IsValid(value)) {
            set_type(static_cast< ::variations::Study_Experiment_Type >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_google_web_trigger_experiment_id;
        break;
      }

      // optional uint64 google_web_trigger_experiment_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_google_web_trigger_experiment_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &google_web_trigger_experiment_id_)));
          set_has_google_web_trigger_experiment_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_override_ui_string;
        break;
      }

      // repeated .variations.Study.Experiment.OverrideUIString override_ui_string = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_override_ui_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_override_ui_string()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_override_ui_string;
        if (input->ExpectTag(80)) goto parse_chrome_sync_experiment_id;
        break;
      }

      // optional uint64 chrome_sync_experiment_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chrome_sync_experiment_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chrome_sync_experiment_id_)));
          set_has_chrome_sync_experiment_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_feature_association;
        break;
      }

      // optional .variations.Study.Experiment.FeatureAssociation feature_association = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_feature_association:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_feature_association()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Study_Experiment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required uint32 probability_weight = 2;
  if (has_probability_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->probability_weight(), output);
  }

  // optional uint64 google_web_experiment_id = 3;
  if (has_google_web_experiment_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->google_web_experiment_id(), output);
  }

  // optional uint64 google_update_experiment_id = 4;
  if (has_google_update_experiment_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->google_update_experiment_id(), output);
  }

  // optional string forcing_flag = 5;
  if (has_forcing_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->forcing_flag(), output);
  }

  // repeated .variations.Study.Experiment.Param param = 6;
  for (int i = 0; i < this->param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->param(i), output);
  }

  // optional .variations.Study.Experiment.Type type = 7 [default = NORMAL];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->type(), output);
  }

  // optional uint64 google_web_trigger_experiment_id = 8;
  if (has_google_web_trigger_experiment_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->google_web_trigger_experiment_id(), output);
  }

  // repeated .variations.Study.Experiment.OverrideUIString override_ui_string = 9;
  for (int i = 0; i < this->override_ui_string_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->override_ui_string(i), output);
  }

  // optional uint64 chrome_sync_experiment_id = 10;
  if (has_chrome_sync_experiment_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->chrome_sync_experiment_id(), output);
  }

  // optional .variations.Study.Experiment.FeatureAssociation feature_association = 12;
  if (has_feature_association()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->feature_association(), output);
  }

}

int Study_Experiment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 probability_weight = 2;
    if (has_probability_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->probability_weight());
    }

    // optional uint64 google_web_experiment_id = 3;
    if (has_google_web_experiment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->google_web_experiment_id());
    }

    // optional uint64 google_web_trigger_experiment_id = 8;
    if (has_google_web_trigger_experiment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->google_web_trigger_experiment_id());
    }

    // optional uint64 google_update_experiment_id = 4;
    if (has_google_update_experiment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->google_update_experiment_id());
    }

    // optional uint64 chrome_sync_experiment_id = 10;
    if (has_chrome_sync_experiment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chrome_sync_experiment_id());
    }

    // optional .variations.Study.Experiment.FeatureAssociation feature_association = 12;
    if (has_feature_association()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->feature_association());
    }

    // optional string forcing_flag = 5;
    if (has_forcing_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->forcing_flag());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional .variations.Study.Experiment.Type type = 7 [default = NORMAL];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .variations.Study.Experiment.Param param = 6;
  total_size += 1 * this->param_size();
  for (int i = 0; i < this->param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->param(i));
  }

  // repeated .variations.Study.Experiment.OverrideUIString override_ui_string = 9;
  total_size += 1 * this->override_ui_string_size();
  for (int i = 0; i < this->override_ui_string_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->override_ui_string(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Study_Experiment::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Study_Experiment*>(&from));
}

void Study_Experiment::MergeFrom(const Study_Experiment& from) {
  GOOGLE_CHECK_NE(&from, this);
  param_.MergeFrom(from.param_);
  override_ui_string_.MergeFrom(from.override_ui_string_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_probability_weight()) {
      set_probability_weight(from.probability_weight());
    }
    if (from.has_google_web_experiment_id()) {
      set_google_web_experiment_id(from.google_web_experiment_id());
    }
    if (from.has_google_web_trigger_experiment_id()) {
      set_google_web_trigger_experiment_id(from.google_web_trigger_experiment_id());
    }
    if (from.has_google_update_experiment_id()) {
      set_google_update_experiment_id(from.google_update_experiment_id());
    }
    if (from.has_chrome_sync_experiment_id()) {
      set_chrome_sync_experiment_id(from.chrome_sync_experiment_id());
    }
    if (from.has_feature_association()) {
      mutable_feature_association()->::variations::Study_Experiment_FeatureAssociation::MergeFrom(from.feature_association());
    }
    if (from.has_forcing_flag()) {
      set_forcing_flag(from.forcing_flag());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
}

void Study_Experiment::CopyFrom(const Study_Experiment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Study_Experiment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Study_Experiment::Swap(Study_Experiment* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(probability_weight_, other->probability_weight_);
    std::swap(google_web_experiment_id_, other->google_web_experiment_id_);
    std::swap(google_web_trigger_experiment_id_, other->google_web_trigger_experiment_id_);
    std::swap(google_update_experiment_id_, other->google_update_experiment_id_);
    std::swap(chrome_sync_experiment_id_, other->chrome_sync_experiment_id_);
    std::swap(feature_association_, other->feature_association_);
    std::swap(forcing_flag_, other->forcing_flag_);
    param_.Swap(&other->param_);
    std::swap(type_, other->type_);
    override_ui_string_.Swap(&other->override_ui_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Study_Experiment::GetTypeName() const {
  return "variations.Study.Experiment";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Study_Filter::kStartDateFieldNumber;
const int Study_Filter::kMinVersionFieldNumber;
const int Study_Filter::kMaxVersionFieldNumber;
const int Study_Filter::kChannelFieldNumber;
const int Study_Filter::kPlatformFieldNumber;
const int Study_Filter::kLocaleFieldNumber;
const int Study_Filter::kFormFactorFieldNumber;
const int Study_Filter::kHardwareClassFieldNumber;
const int Study_Filter::kExcludeHardwareClassFieldNumber;
const int Study_Filter::kCountryFieldNumber;
const int Study_Filter::kExcludeCountryFieldNumber;
#endif  // !_MSC_VER

Study_Filter::Study_Filter()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Study_Filter::InitAsDefaultInstance() {
}

Study_Filter::Study_Filter(const Study_Filter& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Study_Filter::SharedCtor() {
  _cached_size_ = 0;
  start_date_ = GOOGLE_LONGLONG(0);
  min_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  max_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Study_Filter::~Study_Filter() {
  SharedDtor();
}

void Study_Filter::SharedDtor() {
  if (min_version_ != &::google::protobuf::internal::GetEmptyString()) {
    delete min_version_;
  }
  if (max_version_ != &::google::protobuf::internal::GetEmptyString()) {
    delete max_version_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Study_Filter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Study_Filter& Study_Filter::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_study_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_study_2eproto();
#endif
  return *default_instance_;
}

Study_Filter* Study_Filter::default_instance_ = NULL;

Study_Filter* Study_Filter::New() const {
  return new Study_Filter;
}

void Study_Filter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    start_date_ = GOOGLE_LONGLONG(0);
    if (has_min_version()) {
      if (min_version_ != &::google::protobuf::internal::GetEmptyString()) {
        min_version_->clear();
      }
    }
    if (has_max_version()) {
      if (max_version_ != &::google::protobuf::internal::GetEmptyString()) {
        max_version_->clear();
      }
    }
  }
  channel_.Clear();
  platform_.Clear();
  locale_.Clear();
  form_factor_.Clear();
  hardware_class_.Clear();
  exclude_hardware_class_.Clear();
  country_.Clear();
  exclude_country_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Study_Filter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 start_date = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_date_)));
          set_has_start_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_min_version;
        break;
      }

      // optional string min_version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_min_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_min_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_max_version;
        break;
      }

      // optional string max_version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_max_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_max_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_channel;
        break;
      }

      // repeated .variations.Study.Channel channel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::variations::Study_Channel_IsValid(value)) {
            add_channel(static_cast< ::variations::Study_Channel >(value));
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::variations::Study_Channel_IsValid,
                 this->mutable_channel())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_channel;
        if (input->ExpectTag(40)) goto parse_platform;
        break;
      }

      // repeated .variations.Study.Platform platform = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::variations::Study_Platform_IsValid(value)) {
            add_platform(static_cast< ::variations::Study_Platform >(value));
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::variations::Study_Platform_IsValid,
                 this->mutable_platform())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_platform;
        if (input->ExpectTag(50)) goto parse_locale;
        break;
      }

      // repeated string locale = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_locale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_locale()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_locale;
        if (input->ExpectTag(56)) goto parse_form_factor;
        break;
      }

      // repeated .variations.Study.FormFactor form_factor = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_form_factor:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::variations::Study_FormFactor_IsValid(value)) {
            add_form_factor(static_cast< ::variations::Study_FormFactor >(value));
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::variations::Study_FormFactor_IsValid,
                 this->mutable_form_factor())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_form_factor;
        if (input->ExpectTag(66)) goto parse_hardware_class;
        break;
      }

      // repeated string hardware_class = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hardware_class:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_hardware_class()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_hardware_class;
        if (input->ExpectTag(74)) goto parse_exclude_hardware_class;
        break;
      }

      // repeated string exclude_hardware_class = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exclude_hardware_class:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_exclude_hardware_class()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_exclude_hardware_class;
        if (input->ExpectTag(82)) goto parse_country;
        break;
      }

      // repeated string country = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_country()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_country;
        if (input->ExpectTag(90)) goto parse_exclude_country;
        break;
      }

      // repeated string exclude_country = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exclude_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_exclude_country()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_exclude_country;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Study_Filter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 start_date = 1;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->start_date(), output);
  }

  // optional string min_version = 2;
  if (has_min_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->min_version(), output);
  }

  // optional string max_version = 3;
  if (has_max_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->max_version(), output);
  }

  // repeated .variations.Study.Channel channel = 4;
  for (int i = 0; i < this->channel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->channel(i), output);
  }

  // repeated .variations.Study.Platform platform = 5;
  for (int i = 0; i < this->platform_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->platform(i), output);
  }

  // repeated string locale = 6;
  for (int i = 0; i < this->locale_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->locale(i), output);
  }

  // repeated .variations.Study.FormFactor form_factor = 7;
  for (int i = 0; i < this->form_factor_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->form_factor(i), output);
  }

  // repeated string hardware_class = 8;
  for (int i = 0; i < this->hardware_class_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->hardware_class(i), output);
  }

  // repeated string exclude_hardware_class = 9;
  for (int i = 0; i < this->exclude_hardware_class_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->exclude_hardware_class(i), output);
  }

  // repeated string country = 10;
  for (int i = 0; i < this->country_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->country(i), output);
  }

  // repeated string exclude_country = 11;
  for (int i = 0; i < this->exclude_country_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->exclude_country(i), output);
  }

}

int Study_Filter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 start_date = 1;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_date());
    }

    // optional string min_version = 2;
    if (has_min_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->min_version());
    }

    // optional string max_version = 3;
    if (has_max_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->max_version());
    }

  }
  // repeated .variations.Study.Channel channel = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->channel_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->channel(i));
    }
    total_size += 1 * this->channel_size() + data_size;
  }

  // repeated .variations.Study.Platform platform = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->platform_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->platform(i));
    }
    total_size += 1 * this->platform_size() + data_size;
  }

  // repeated string locale = 6;
  total_size += 1 * this->locale_size();
  for (int i = 0; i < this->locale_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->locale(i));
  }

  // repeated .variations.Study.FormFactor form_factor = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->form_factor_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->form_factor(i));
    }
    total_size += 1 * this->form_factor_size() + data_size;
  }

  // repeated string hardware_class = 8;
  total_size += 1 * this->hardware_class_size();
  for (int i = 0; i < this->hardware_class_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->hardware_class(i));
  }

  // repeated string exclude_hardware_class = 9;
  total_size += 1 * this->exclude_hardware_class_size();
  for (int i = 0; i < this->exclude_hardware_class_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->exclude_hardware_class(i));
  }

  // repeated string country = 10;
  total_size += 1 * this->country_size();
  for (int i = 0; i < this->country_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->country(i));
  }

  // repeated string exclude_country = 11;
  total_size += 1 * this->exclude_country_size();
  for (int i = 0; i < this->exclude_country_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->exclude_country(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Study_Filter::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Study_Filter*>(&from));
}

void Study_Filter::MergeFrom(const Study_Filter& from) {
  GOOGLE_CHECK_NE(&from, this);
  channel_.MergeFrom(from.channel_);
  platform_.MergeFrom(from.platform_);
  locale_.MergeFrom(from.locale_);
  form_factor_.MergeFrom(from.form_factor_);
  hardware_class_.MergeFrom(from.hardware_class_);
  exclude_hardware_class_.MergeFrom(from.exclude_hardware_class_);
  country_.MergeFrom(from.country_);
  exclude_country_.MergeFrom(from.exclude_country_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_min_version()) {
      set_min_version(from.min_version());
    }
    if (from.has_max_version()) {
      set_max_version(from.max_version());
    }
  }
}

void Study_Filter::CopyFrom(const Study_Filter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Study_Filter::IsInitialized() const {

  return true;
}

void Study_Filter::Swap(Study_Filter* other) {
  if (other != this) {
    std::swap(start_date_, other->start_date_);
    std::swap(min_version_, other->min_version_);
    std::swap(max_version_, other->max_version_);
    channel_.Swap(&other->channel_);
    platform_.Swap(&other->platform_);
    locale_.Swap(&other->locale_);
    form_factor_.Swap(&other->form_factor_);
    hardware_class_.Swap(&other->hardware_class_);
    exclude_hardware_class_.Swap(&other->exclude_hardware_class_);
    country_.Swap(&other->country_);
    exclude_country_.Swap(&other->exclude_country_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Study_Filter::GetTypeName() const {
  return "variations.Study.Filter";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Study::kNameFieldNumber;
const int Study::kExpiryDateFieldNumber;
const int Study::kConsistencyFieldNumber;
const int Study::kDefaultExperimentNameFieldNumber;
const int Study::kExperimentFieldNumber;
const int Study::kFilterFieldNumber;
const int Study::kRandomizationSeedFieldNumber;
const int Study::kActivationTypeFieldNumber;
#endif  // !_MSC_VER

Study::Study()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Study::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  filter_ = const_cast< ::variations::Study_Filter*>(
      ::variations::Study_Filter::internal_default_instance());
#else
  filter_ = const_cast< ::variations::Study_Filter*>(&::variations::Study_Filter::default_instance());
#endif
}

Study::Study(const Study& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Study::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  expiry_date_ = GOOGLE_LONGLONG(0);
  consistency_ = 0;
  default_experiment_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  filter_ = NULL;
  randomization_seed_ = 0u;
  activation_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Study::~Study() {
  SharedDtor();
}

void Study::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (default_experiment_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete default_experiment_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete filter_;
  }
}

void Study::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Study& Study::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_study_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_study_2eproto();
#endif
  return *default_instance_;
}

Study* Study::default_instance_ = NULL;

Study* Study::New() const {
  return new Study;
}

void Study::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
    expiry_date_ = GOOGLE_LONGLONG(0);
    consistency_ = 0;
    if (has_default_experiment_name()) {
      if (default_experiment_name_ != &::google::protobuf::internal::GetEmptyString()) {
        default_experiment_name_->clear();
      }
    }
    if (has_filter()) {
      if (filter_ != NULL) filter_->::variations::Study_Filter::Clear();
    }
    randomization_seed_ = 0u;
    activation_type_ = 0;
  }
  experiment_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Study::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_expiry_date;
        break;
      }

      // optional int64 expiry_date = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expiry_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expiry_date_)));
          set_has_expiry_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_consistency;
        break;
      }

      // optional .variations.Study.Consistency consistency = 7 [default = SESSION];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consistency:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::variations::Study_Consistency_IsValid(value)) {
            set_consistency(static_cast< ::variations::Study_Consistency >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_default_experiment_name;
        break;
      }

      // optional string default_experiment_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_default_experiment_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_default_experiment_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_experiment;
        break;
      }

      // repeated .variations.Study.Experiment experiment = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_experiment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_experiment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_experiment;
        if (input->ExpectTag(82)) goto parse_filter;
        break;
      }

      // optional .variations.Study.Filter filter = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_randomization_seed;
        break;
      }

      // optional uint32 randomization_seed = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_randomization_seed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &randomization_seed_)));
          set_has_randomization_seed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_activation_type;
        break;
      }

      // optional .variations.Study.ActivationType activation_type = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activation_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::variations::Study_ActivationType_IsValid(value)) {
            set_activation_type(static_cast< ::variations::Study_ActivationType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Study::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional int64 expiry_date = 3;
  if (has_expiry_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->expiry_date(), output);
  }

  // optional .variations.Study.Consistency consistency = 7 [default = SESSION];
  if (has_consistency()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->consistency(), output);
  }

  // optional string default_experiment_name = 8;
  if (has_default_experiment_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->default_experiment_name(), output);
  }

  // repeated .variations.Study.Experiment experiment = 9;
  for (int i = 0; i < this->experiment_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->experiment(i), output);
  }

  // optional .variations.Study.Filter filter = 10;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->filter(), output);
  }

  // optional uint32 randomization_seed = 11;
  if (has_randomization_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->randomization_seed(), output);
  }

  // optional .variations.Study.ActivationType activation_type = 12;
  if (has_activation_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->activation_type(), output);
  }

}

int Study::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 expiry_date = 3;
    if (has_expiry_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expiry_date());
    }

    // optional .variations.Study.Consistency consistency = 7 [default = SESSION];
    if (has_consistency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->consistency());
    }

    // optional string default_experiment_name = 8;
    if (has_default_experiment_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->default_experiment_name());
    }

    // optional .variations.Study.Filter filter = 10;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filter());
    }

    // optional uint32 randomization_seed = 11;
    if (has_randomization_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->randomization_seed());
    }

    // optional .variations.Study.ActivationType activation_type = 12;
    if (has_activation_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->activation_type());
    }

  }
  // repeated .variations.Study.Experiment experiment = 9;
  total_size += 1 * this->experiment_size();
  for (int i = 0; i < this->experiment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->experiment(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Study::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Study*>(&from));
}

void Study::MergeFrom(const Study& from) {
  GOOGLE_CHECK_NE(&from, this);
  experiment_.MergeFrom(from.experiment_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_expiry_date()) {
      set_expiry_date(from.expiry_date());
    }
    if (from.has_consistency()) {
      set_consistency(from.consistency());
    }
    if (from.has_default_experiment_name()) {
      set_default_experiment_name(from.default_experiment_name());
    }
    if (from.has_filter()) {
      mutable_filter()->::variations::Study_Filter::MergeFrom(from.filter());
    }
    if (from.has_randomization_seed()) {
      set_randomization_seed(from.randomization_seed());
    }
    if (from.has_activation_type()) {
      set_activation_type(from.activation_type());
    }
  }
}

void Study::CopyFrom(const Study& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Study::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < experiment_size(); i++) {
    if (!this->experiment(i).IsInitialized()) return false;
  }
  return true;
}

void Study::Swap(Study* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(expiry_date_, other->expiry_date_);
    std::swap(consistency_, other->consistency_);
    std::swap(default_experiment_name_, other->default_experiment_name_);
    experiment_.Swap(&other->experiment_);
    std::swap(filter_, other->filter_);
    std::swap(randomization_seed_, other->randomization_seed_);
    std::swap(activation_type_, other->activation_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Study::GetTypeName() const {
  return "variations.Study";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace variations

// @@protoc_insertion_point(global_scope)
