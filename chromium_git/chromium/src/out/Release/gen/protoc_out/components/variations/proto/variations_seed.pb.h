// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: variations_seed.proto

#ifndef PROTOBUF_variations_5fseed_2eproto__INCLUDED
#define PROTOBUF_variations_5fseed_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "study.pb.h"
// @@protoc_insertion_point(includes)

namespace variations {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_variations_5fseed_2eproto();
void protobuf_AssignDesc_variations_5fseed_2eproto();
void protobuf_ShutdownFile_variations_5fseed_2eproto();

class VariationsSeed;

// ===================================================================

class VariationsSeed : public ::google::protobuf::MessageLite {
 public:
  VariationsSeed();
  virtual ~VariationsSeed();

  VariationsSeed(const VariationsSeed& from);

  inline VariationsSeed& operator=(const VariationsSeed& from) {
    CopyFrom(from);
    return *this;
  }

  static const VariationsSeed& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const VariationsSeed* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(VariationsSeed* other);

  // implements Message ----------------------------------------------

  VariationsSeed* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const VariationsSeed& from);
  void MergeFrom(const VariationsSeed& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string serial_number = 1;
  inline bool has_serial_number() const;
  inline void clear_serial_number();
  static const int kSerialNumberFieldNumber = 1;
  inline const ::std::string& serial_number() const;
  inline void set_serial_number(const ::std::string& value);
  inline void set_serial_number(const char* value);
  inline void set_serial_number(const char* value, size_t size);
  inline ::std::string* mutable_serial_number();
  inline ::std::string* release_serial_number();
  inline void set_allocated_serial_number(::std::string* serial_number);

  // repeated .variations.Study study = 2;
  inline int study_size() const;
  inline void clear_study();
  static const int kStudyFieldNumber = 2;
  inline const ::variations::Study& study(int index) const;
  inline ::variations::Study* mutable_study(int index);
  inline ::variations::Study* add_study();
  inline const ::google::protobuf::RepeatedPtrField< ::variations::Study >&
      study() const;
  inline ::google::protobuf::RepeatedPtrField< ::variations::Study >*
      mutable_study();

  // optional string country_code = 3;
  inline bool has_country_code() const;
  inline void clear_country_code();
  static const int kCountryCodeFieldNumber = 3;
  inline const ::std::string& country_code() const;
  inline void set_country_code(const ::std::string& value);
  inline void set_country_code(const char* value);
  inline void set_country_code(const char* value, size_t size);
  inline ::std::string* mutable_country_code();
  inline ::std::string* release_country_code();
  inline void set_allocated_country_code(::std::string* country_code);

  // @@protoc_insertion_point(class_scope:variations.VariationsSeed)
 private:
  inline void set_has_serial_number();
  inline void clear_has_serial_number();
  inline void set_has_country_code();
  inline void clear_has_country_code();

  ::std::string* serial_number_;
  ::google::protobuf::RepeatedPtrField< ::variations::Study > study_;
  ::std::string* country_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_variations_5fseed_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_variations_5fseed_2eproto();
  #endif
  friend void protobuf_AssignDesc_variations_5fseed_2eproto();
  friend void protobuf_ShutdownFile_variations_5fseed_2eproto();

  void InitAsDefaultInstance();
  static VariationsSeed* default_instance_;
};
// ===================================================================


// ===================================================================

// VariationsSeed

// optional string serial_number = 1;
inline bool VariationsSeed::has_serial_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VariationsSeed::set_has_serial_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VariationsSeed::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VariationsSeed::clear_serial_number() {
  if (serial_number_ != &::google::protobuf::internal::GetEmptyString()) {
    serial_number_->clear();
  }
  clear_has_serial_number();
}
inline const ::std::string& VariationsSeed::serial_number() const {
  return *serial_number_;
}
inline void VariationsSeed::set_serial_number(const ::std::string& value) {
  set_has_serial_number();
  if (serial_number_ == &::google::protobuf::internal::GetEmptyString()) {
    serial_number_ = new ::std::string;
  }
  serial_number_->assign(value);
}
inline void VariationsSeed::set_serial_number(const char* value) {
  set_has_serial_number();
  if (serial_number_ == &::google::protobuf::internal::GetEmptyString()) {
    serial_number_ = new ::std::string;
  }
  serial_number_->assign(value);
}
inline void VariationsSeed::set_serial_number(const char* value, size_t size) {
  set_has_serial_number();
  if (serial_number_ == &::google::protobuf::internal::GetEmptyString()) {
    serial_number_ = new ::std::string;
  }
  serial_number_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VariationsSeed::mutable_serial_number() {
  set_has_serial_number();
  if (serial_number_ == &::google::protobuf::internal::GetEmptyString()) {
    serial_number_ = new ::std::string;
  }
  return serial_number_;
}
inline ::std::string* VariationsSeed::release_serial_number() {
  clear_has_serial_number();
  if (serial_number_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = serial_number_;
    serial_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void VariationsSeed::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serial_number_;
  }
  if (serial_number) {
    set_has_serial_number();
    serial_number_ = serial_number;
  } else {
    clear_has_serial_number();
    serial_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// repeated .variations.Study study = 2;
inline int VariationsSeed::study_size() const {
  return study_.size();
}
inline void VariationsSeed::clear_study() {
  study_.Clear();
}
inline const ::variations::Study& VariationsSeed::study(int index) const {
  return study_.Get(index);
}
inline ::variations::Study* VariationsSeed::mutable_study(int index) {
  return study_.Mutable(index);
}
inline ::variations::Study* VariationsSeed::add_study() {
  return study_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::variations::Study >&
VariationsSeed::study() const {
  return study_;
}
inline ::google::protobuf::RepeatedPtrField< ::variations::Study >*
VariationsSeed::mutable_study() {
  return &study_;
}

// optional string country_code = 3;
inline bool VariationsSeed::has_country_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VariationsSeed::set_has_country_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VariationsSeed::clear_has_country_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VariationsSeed::clear_country_code() {
  if (country_code_ != &::google::protobuf::internal::GetEmptyString()) {
    country_code_->clear();
  }
  clear_has_country_code();
}
inline const ::std::string& VariationsSeed::country_code() const {
  return *country_code_;
}
inline void VariationsSeed::set_country_code(const ::std::string& value) {
  set_has_country_code();
  if (country_code_ == &::google::protobuf::internal::GetEmptyString()) {
    country_code_ = new ::std::string;
  }
  country_code_->assign(value);
}
inline void VariationsSeed::set_country_code(const char* value) {
  set_has_country_code();
  if (country_code_ == &::google::protobuf::internal::GetEmptyString()) {
    country_code_ = new ::std::string;
  }
  country_code_->assign(value);
}
inline void VariationsSeed::set_country_code(const char* value, size_t size) {
  set_has_country_code();
  if (country_code_ == &::google::protobuf::internal::GetEmptyString()) {
    country_code_ = new ::std::string;
  }
  country_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VariationsSeed::mutable_country_code() {
  set_has_country_code();
  if (country_code_ == &::google::protobuf::internal::GetEmptyString()) {
    country_code_ = new ::std::string;
  }
  return country_code_;
}
inline ::std::string* VariationsSeed::release_country_code() {
  clear_has_country_code();
  if (country_code_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = country_code_;
    country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void VariationsSeed::set_allocated_country_code(::std::string* country_code) {
  if (country_code_ != &::google::protobuf::internal::GetEmptyString()) {
    delete country_code_;
  }
  if (country_code) {
    set_has_country_code();
    country_code_ = country_code;
  } else {
    clear_has_country_code();
    country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace variations

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_variations_5fseed_2eproto__INCLUDED
