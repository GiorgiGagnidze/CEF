// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: permuted_entropy_cache.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "permuted_entropy_cache.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace metrics {

void protobuf_ShutdownFile_permuted_5fentropy_5fcache_2eproto() {
  delete PermutedEntropyCache::default_instance_;
  delete PermutedEntropyCache_Entry::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_permuted_5fentropy_5fcache_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_permuted_5fentropy_5fcache_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  PermutedEntropyCache::default_instance_ = new PermutedEntropyCache();
  PermutedEntropyCache_Entry::default_instance_ = new PermutedEntropyCache_Entry();
  PermutedEntropyCache::default_instance_->InitAsDefaultInstance();
  PermutedEntropyCache_Entry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_permuted_5fentropy_5fcache_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_permuted_5fentropy_5fcache_2eproto_once_);
void protobuf_AddDesc_permuted_5fentropy_5fcache_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_permuted_5fentropy_5fcache_2eproto_once_,
                 &protobuf_AddDesc_permuted_5fentropy_5fcache_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_permuted_5fentropy_5fcache_2eproto {
  StaticDescriptorInitializer_permuted_5fentropy_5fcache_2eproto() {
    protobuf_AddDesc_permuted_5fentropy_5fcache_2eproto();
  }
} static_descriptor_initializer_permuted_5fentropy_5fcache_2eproto_;
#endif

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PermutedEntropyCache_Entry::kRandomizationSeedFieldNumber;
const int PermutedEntropyCache_Entry::kValueFieldNumber;
#endif  // !_MSC_VER

PermutedEntropyCache_Entry::PermutedEntropyCache_Entry()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PermutedEntropyCache_Entry::InitAsDefaultInstance() {
}

PermutedEntropyCache_Entry::PermutedEntropyCache_Entry(const PermutedEntropyCache_Entry& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PermutedEntropyCache_Entry::SharedCtor() {
  _cached_size_ = 0;
  randomization_seed_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PermutedEntropyCache_Entry::~PermutedEntropyCache_Entry() {
  SharedDtor();
}

void PermutedEntropyCache_Entry::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PermutedEntropyCache_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PermutedEntropyCache_Entry& PermutedEntropyCache_Entry::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_permuted_5fentropy_5fcache_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_permuted_5fentropy_5fcache_2eproto();
#endif
  return *default_instance_;
}

PermutedEntropyCache_Entry* PermutedEntropyCache_Entry::default_instance_ = NULL;

PermutedEntropyCache_Entry* PermutedEntropyCache_Entry::New() const {
  return new PermutedEntropyCache_Entry;
}

void PermutedEntropyCache_Entry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    randomization_seed_ = 0u;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PermutedEntropyCache_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 randomization_seed = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &randomization_seed_)));
          set_has_randomization_seed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PermutedEntropyCache_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 randomization_seed = 1;
  if (has_randomization_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->randomization_seed(), output);
  }

  // required uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

}

int PermutedEntropyCache_Entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 randomization_seed = 1;
    if (has_randomization_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->randomization_seed());
    }

    // required uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PermutedEntropyCache_Entry::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PermutedEntropyCache_Entry*>(&from));
}

void PermutedEntropyCache_Entry::MergeFrom(const PermutedEntropyCache_Entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_randomization_seed()) {
      set_randomization_seed(from.randomization_seed());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
}

void PermutedEntropyCache_Entry::CopyFrom(const PermutedEntropyCache_Entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PermutedEntropyCache_Entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PermutedEntropyCache_Entry::Swap(PermutedEntropyCache_Entry* other) {
  if (other != this) {
    std::swap(randomization_seed_, other->randomization_seed_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PermutedEntropyCache_Entry::GetTypeName() const {
  return "metrics.PermutedEntropyCache.Entry";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PermutedEntropyCache::kEntryFieldNumber;
#endif  // !_MSC_VER

PermutedEntropyCache::PermutedEntropyCache()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PermutedEntropyCache::InitAsDefaultInstance() {
}

PermutedEntropyCache::PermutedEntropyCache(const PermutedEntropyCache& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PermutedEntropyCache::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PermutedEntropyCache::~PermutedEntropyCache() {
  SharedDtor();
}

void PermutedEntropyCache::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PermutedEntropyCache::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PermutedEntropyCache& PermutedEntropyCache::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_permuted_5fentropy_5fcache_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_permuted_5fentropy_5fcache_2eproto();
#endif
  return *default_instance_;
}

PermutedEntropyCache* PermutedEntropyCache::default_instance_ = NULL;

PermutedEntropyCache* PermutedEntropyCache::New() const {
  return new PermutedEntropyCache;
}

void PermutedEntropyCache::Clear() {
  entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PermutedEntropyCache::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .metrics.PermutedEntropyCache.Entry entry = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_entry;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PermutedEntropyCache::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .metrics.PermutedEntropyCache.Entry entry = 1;
  for (int i = 0; i < this->entry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->entry(i), output);
  }

}

int PermutedEntropyCache::ByteSize() const {
  int total_size = 0;

  // repeated .metrics.PermutedEntropyCache.Entry entry = 1;
  total_size += 1 * this->entry_size();
  for (int i = 0; i < this->entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entry(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PermutedEntropyCache::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PermutedEntropyCache*>(&from));
}

void PermutedEntropyCache::MergeFrom(const PermutedEntropyCache& from) {
  GOOGLE_CHECK_NE(&from, this);
  entry_.MergeFrom(from.entry_);
}

void PermutedEntropyCache::CopyFrom(const PermutedEntropyCache& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PermutedEntropyCache::IsInitialized() const {

  for (int i = 0; i < entry_size(); i++) {
    if (!this->entry(i).IsInitialized()) return false;
  }
  return true;
}

void PermutedEntropyCache::Swap(PermutedEntropyCache* other) {
  if (other != this) {
    entry_.Swap(&other->entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PermutedEntropyCache::GetTypeName() const {
  return "metrics.PermutedEntropyCache";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace metrics

// @@protoc_insertion_point(global_scope)
