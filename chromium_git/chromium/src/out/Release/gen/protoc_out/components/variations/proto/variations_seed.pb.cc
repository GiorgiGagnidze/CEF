// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: variations_seed.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "variations_seed.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace variations {

void protobuf_ShutdownFile_variations_5fseed_2eproto() {
  delete VariationsSeed::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_variations_5fseed_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_variations_5fseed_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::variations::protobuf_AddDesc_study_2eproto();
  VariationsSeed::default_instance_ = new VariationsSeed();
  VariationsSeed::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_variations_5fseed_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_variations_5fseed_2eproto_once_);
void protobuf_AddDesc_variations_5fseed_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_variations_5fseed_2eproto_once_,
                 &protobuf_AddDesc_variations_5fseed_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_variations_5fseed_2eproto {
  StaticDescriptorInitializer_variations_5fseed_2eproto() {
    protobuf_AddDesc_variations_5fseed_2eproto();
  }
} static_descriptor_initializer_variations_5fseed_2eproto_;
#endif

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VariationsSeed::kSerialNumberFieldNumber;
const int VariationsSeed::kStudyFieldNumber;
const int VariationsSeed::kCountryCodeFieldNumber;
#endif  // !_MSC_VER

VariationsSeed::VariationsSeed()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void VariationsSeed::InitAsDefaultInstance() {
}

VariationsSeed::VariationsSeed(const VariationsSeed& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void VariationsSeed::SharedCtor() {
  _cached_size_ = 0;
  serial_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VariationsSeed::~VariationsSeed() {
  SharedDtor();
}

void VariationsSeed::SharedDtor() {
  if (serial_number_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serial_number_;
  }
  if (country_code_ != &::google::protobuf::internal::GetEmptyString()) {
    delete country_code_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void VariationsSeed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VariationsSeed& VariationsSeed::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_variations_5fseed_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_variations_5fseed_2eproto();
#endif
  return *default_instance_;
}

VariationsSeed* VariationsSeed::default_instance_ = NULL;

VariationsSeed* VariationsSeed::New() const {
  return new VariationsSeed;
}

void VariationsSeed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_serial_number()) {
      if (serial_number_ != &::google::protobuf::internal::GetEmptyString()) {
        serial_number_->clear();
      }
    }
    if (has_country_code()) {
      if (country_code_ != &::google::protobuf::internal::GetEmptyString()) {
        country_code_->clear();
      }
    }
  }
  study_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool VariationsSeed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string serial_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_study;
        break;
      }

      // repeated .variations.Study study = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_study:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_study()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_study;
        if (input->ExpectTag(26)) goto parse_country_code;
        break;
      }

      // optional string country_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_country_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VariationsSeed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string serial_number = 1;
  if (has_serial_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->serial_number(), output);
  }

  // repeated .variations.Study study = 2;
  for (int i = 0; i < this->study_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->study(i), output);
  }

  // optional string country_code = 3;
  if (has_country_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->country_code(), output);
  }

}

int VariationsSeed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string serial_number = 1;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serial_number());
    }

    // optional string country_code = 3;
    if (has_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_code());
    }

  }
  // repeated .variations.Study study = 2;
  total_size += 1 * this->study_size();
  for (int i = 0; i < this->study_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->study(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VariationsSeed::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VariationsSeed*>(&from));
}

void VariationsSeed::MergeFrom(const VariationsSeed& from) {
  GOOGLE_CHECK_NE(&from, this);
  study_.MergeFrom(from.study_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serial_number()) {
      set_serial_number(from.serial_number());
    }
    if (from.has_country_code()) {
      set_country_code(from.country_code());
    }
  }
}

void VariationsSeed::CopyFrom(const VariationsSeed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariationsSeed::IsInitialized() const {

  for (int i = 0; i < study_size(); i++) {
    if (!this->study(i).IsInitialized()) return false;
  }
  return true;
}

void VariationsSeed::Swap(VariationsSeed* other) {
  if (other != this) {
    std::swap(serial_number_, other->serial_number_);
    study_.Swap(&other->study_);
    std::swap(country_code_, other->country_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string VariationsSeed::GetTypeName() const {
  return "variations.VariationsSeed";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace variations

// @@protoc_insertion_point(global_scope)
